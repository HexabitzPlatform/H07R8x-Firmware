
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000137d0  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017494  08017494  0003000c  2**0
                  CONTENTS
  4 .ARM          00000000  08017494  08017494  0003000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017494  08017494  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017494  08017494  00027494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017498  08017498  00027498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801749c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080174a8  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080174a8  000300e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccea  00000000  00000000  00030034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8f  00000000  00000000  0003cd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0003eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0003f590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d26  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca1f  00000000  00000000  00041cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad48f  00000000  00000000  0004e6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbb5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002630  00000000  00000000  000fbbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003cac 	.word	0x08003cac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003cac 	.word	0x08003cac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <WriteI2C>:
 * @param3: Data to be sent
 * @param4: Data size
 * @retval: Status
 */
Status_TypeDef WriteI2C(I2C_HANDLE *xPort, uint16_t sAddress, uint8_t *pData, uint16_t Size)
{
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	b089      	sub	sp, #36	; 0x24
 8000220:	af02      	add	r7, sp, #8
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	0008      	movs	r0, r1
 8000226:	607a      	str	r2, [r7, #4]
 8000228:	0019      	movs	r1, r3
 800022a:	250a      	movs	r5, #10
 800022c:	197b      	adds	r3, r7, r5
 800022e:	1c02      	adds	r2, r0, #0
 8000230:	801a      	strh	r2, [r3, #0]
 8000232:	2008      	movs	r0, #8
 8000234:	183b      	adds	r3, r7, r0
 8000236:	1c0a      	adds	r2, r1, #0
 8000238:	801a      	strh	r2, [r3, #0]
  Status_TypeDef Status=STATUS_ERR;
 800023a:	2617      	movs	r6, #23
 800023c:	19bb      	adds	r3, r7, r6
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	701a      	strb	r2, [r3, #0]

  if (NULL!=xPort && NULL!=pData)
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d013      	beq.n	8000270 <WriteI2C+0x54>
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d010      	beq.n	8000270 <WriteI2C+0x54>
    {
      if (HAL_OK == HAL_I2C_Master_Transmit(xPort, (uint16_t) sAddress, pData, Size, TIM_OUT_1MS))
 800024e:	183b      	adds	r3, r7, r0
 8000250:	881c      	ldrh	r4, [r3, #0]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	197b      	adds	r3, r7, r5
 8000256:	8819      	ldrh	r1, [r3, #0]
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	2332      	movs	r3, #50	; 0x32
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	0023      	movs	r3, r4
 8000260:	f001 fa4c 	bl	80016fc <HAL_I2C_Master_Transmit>
 8000264:	1e03      	subs	r3, r0, #0
 8000266:	d107      	bne.n	8000278 <WriteI2C+0x5c>
      Status=STATUS_OK;
 8000268:	19bb      	adds	r3, r7, r6
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
      if (HAL_OK == HAL_I2C_Master_Transmit(xPort, (uint16_t) sAddress, pData, Size, TIM_OUT_1MS))
 800026e:	e003      	b.n	8000278 <WriteI2C+0x5c>

    }
  else
    Status=STATUS_ERR;
 8000270:	2317      	movs	r3, #23
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	22ff      	movs	r2, #255	; 0xff
 8000276:	701a      	strb	r2, [r3, #0]

  return Status;
 8000278:	2317      	movs	r3, #23
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	781b      	ldrb	r3, [r3, #0]
}
 800027e:	0018      	movs	r0, r3
 8000280:	46bd      	mov	sp, r7
 8000282:	b007      	add	sp, #28
 8000284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000288 <WriteI2S>:

	return Status;
}

Status_TypeDef WriteI2S(I2S_HANDLE *xPort, uint16_t *pData, uint16_t Size)
{
 8000288:	b5b0      	push	{r4, r5, r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	1dbb      	adds	r3, r7, #6
 8000294:	801a      	strh	r2, [r3, #0]
  Status_TypeDef Status=STATUS_ERR;
 8000296:	2517      	movs	r5, #23
 8000298:	197b      	adds	r3, r7, r5
 800029a:	22ff      	movs	r2, #255	; 0xff
 800029c:	701a      	strb	r2, [r3, #0]

  if (NULL!=xPort && NULL!=pData)
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d010      	beq.n	80002c6 <WriteI2S+0x3e>
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00d      	beq.n	80002c6 <WriteI2S+0x3e>
    {
      if (HAL_OK == HAL_I2S_Transmit(xPort, pData, Size, TIM_OUT_10000MS))
 80002aa:	4c0c      	ldr	r4, [pc, #48]	; (80002dc <WriteI2S+0x54>)
 80002ac:	1dbb      	adds	r3, r7, #6
 80002ae:	881a      	ldrh	r2, [r3, #0]
 80002b0:	68b9      	ldr	r1, [r7, #8]
 80002b2:	68f8      	ldr	r0, [r7, #12]
 80002b4:	0023      	movs	r3, r4
 80002b6:	f001 fee7 	bl	8002088 <HAL_I2S_Transmit>
 80002ba:	1e03      	subs	r3, r0, #0
 80002bc:	d107      	bne.n	80002ce <WriteI2S+0x46>
    	  Status=STATUS_OK;
 80002be:	197b      	adds	r3, r7, r5
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
      if (HAL_OK == HAL_I2S_Transmit(xPort, pData, Size, TIM_OUT_10000MS))
 80002c4:	e003      	b.n	80002ce <WriteI2S+0x46>

    }
  else
	  	  Status=STATUS_ERR;
 80002c6:	2317      	movs	r3, #23
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	22ff      	movs	r2, #255	; 0xff
 80002cc:	701a      	strb	r2, [r3, #0]

  return Status;
 80002ce:	2317      	movs	r3, #23
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	781b      	ldrb	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b006      	add	sp, #24
 80002da:	bdb0      	pop	{r4, r5, r7, pc}
 80002dc:	00002710 	.word	0x00002710

080002e0 <MAX9867_DigitalAudioInterfaceInit>:
Status_TypeDef MAX9867_DigitalAudioInterfaceInit(MAX9867_Master_Slave_Mode mode,
	MAX9867_L_R_Clk_Invert lrclk, MAX9867_Bit_Clk_Invert bclkMode, MAX9867_SDOUT_Delay sdoutDelay,
	MAX9867_Delay_Mode delayMode, MAX9867_SDOUT_Mode_High_Impedance_Mode sdoutMode,
	MAX9867_TDM_Mode tdmMode, MAX9867_BCLK_Select bclkSelect, MAX9867_Mono_Playback_Mode monoMode,
	MAX9867_Fix_Line_Input_Volume fixLineVol)
{
 80002e0:	b5b0      	push	{r4, r5, r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0005      	movs	r5, r0
 80002e8:	000c      	movs	r4, r1
 80002ea:	0010      	movs	r0, r2
 80002ec:	0019      	movs	r1, r3
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	1c2a      	adds	r2, r5, #0
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	1dbb      	adds	r3, r7, #6
 80002f6:	1c22      	adds	r2, r4, #0
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	1d7b      	adds	r3, r7, #5
 80002fc:	1c02      	adds	r2, r0, #0
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	1c0a      	adds	r2, r1, #0
 8000304:	701a      	strb	r2, [r3, #0]
	digAudReg1.MAS = mode;
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2201      	movs	r2, #1
 800030c:	4013      	ands	r3, r2
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b5a      	ldr	r3, [pc, #360]	; (800047c <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 8000312:	01d0      	lsls	r0, r2, #7
 8000314:	785a      	ldrb	r2, [r3, #1]
 8000316:	217f      	movs	r1, #127	; 0x7f
 8000318:	400a      	ands	r2, r1
 800031a:	1c11      	adds	r1, r2, #0
 800031c:	1c02      	adds	r2, r0, #0
 800031e:	430a      	orrs	r2, r1
 8000320:	705a      	strb	r2, [r3, #1]
	digAudReg1.WCI = lrclk;
 8000322:	1dbb      	adds	r3, r7, #6
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2201      	movs	r2, #1
 8000328:	4013      	ands	r3, r2
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b53      	ldr	r3, [pc, #332]	; (800047c <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800032e:	2101      	movs	r1, #1
 8000330:	400a      	ands	r2, r1
 8000332:	0190      	lsls	r0, r2, #6
 8000334:	785a      	ldrb	r2, [r3, #1]
 8000336:	2140      	movs	r1, #64	; 0x40
 8000338:	438a      	bics	r2, r1
 800033a:	1c11      	adds	r1, r2, #0
 800033c:	1c02      	adds	r2, r0, #0
 800033e:	430a      	orrs	r2, r1
 8000340:	705a      	strb	r2, [r3, #1]
	digAudReg1.BCI = bclkMode;
 8000342:	1d7b      	adds	r3, r7, #5
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2201      	movs	r2, #1
 8000348:	4013      	ands	r3, r2
 800034a:	b2da      	uxtb	r2, r3
 800034c:	4b4b      	ldr	r3, [pc, #300]	; (800047c <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800034e:	2101      	movs	r1, #1
 8000350:	400a      	ands	r2, r1
 8000352:	0150      	lsls	r0, r2, #5
 8000354:	785a      	ldrb	r2, [r3, #1]
 8000356:	2120      	movs	r1, #32
 8000358:	438a      	bics	r2, r1
 800035a:	1c11      	adds	r1, r2, #0
 800035c:	1c02      	adds	r2, r0, #0
 800035e:	430a      	orrs	r2, r1
 8000360:	705a      	strb	r2, [r3, #1]
	digAudReg1.DLY = sdoutDelay;
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2201      	movs	r2, #1
 8000368:	4013      	ands	r3, r2
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4b43      	ldr	r3, [pc, #268]	; (800047c <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800036e:	2101      	movs	r1, #1
 8000370:	400a      	ands	r2, r1
 8000372:	0110      	lsls	r0, r2, #4
 8000374:	785a      	ldrb	r2, [r3, #1]
 8000376:	2110      	movs	r1, #16
 8000378:	438a      	bics	r2, r1
 800037a:	1c11      	adds	r1, r2, #0
 800037c:	1c02      	adds	r2, r0, #0
 800037e:	430a      	orrs	r2, r1
 8000380:	705a      	strb	r2, [r3, #1]
	digAudReg1.HIZOFF = sdoutMode;
 8000382:	231c      	movs	r3, #28
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2201      	movs	r2, #1
 800038a:	4013      	ands	r3, r2
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b3b      	ldr	r3, [pc, #236]	; (800047c <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 8000390:	2101      	movs	r1, #1
 8000392:	400a      	ands	r2, r1
 8000394:	00d0      	lsls	r0, r2, #3
 8000396:	785a      	ldrb	r2, [r3, #1]
 8000398:	2108      	movs	r1, #8
 800039a:	438a      	bics	r2, r1
 800039c:	1c11      	adds	r1, r2, #0
 800039e:	1c02      	adds	r2, r0, #0
 80003a0:	430a      	orrs	r2, r1
 80003a2:	705a      	strb	r2, [r3, #1]
	digAudReg1.TDM = tdmMode;
 80003a4:	2320      	movs	r3, #32
 80003a6:	18fb      	adds	r3, r7, r3
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2201      	movs	r2, #1
 80003ac:	4013      	ands	r3, r2
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b32      	ldr	r3, [pc, #200]	; (800047c <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 80003b2:	2101      	movs	r1, #1
 80003b4:	400a      	ands	r2, r1
 80003b6:	0090      	lsls	r0, r2, #2
 80003b8:	785a      	ldrb	r2, [r3, #1]
 80003ba:	2104      	movs	r1, #4
 80003bc:	438a      	bics	r2, r1
 80003be:	1c11      	adds	r1, r2, #0
 80003c0:	1c02      	adds	r2, r0, #0
 80003c2:	430a      	orrs	r2, r1
 80003c4:	705a      	strb	r2, [r3, #1]

	digAudReg2.BSEL = bclkSelect;
 80003c6:	2324      	movs	r3, #36	; 0x24
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2207      	movs	r2, #7
 80003ce:	4013      	ands	r3, r2
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 80003d4:	2107      	movs	r1, #7
 80003d6:	400a      	ands	r2, r1
 80003d8:	0010      	movs	r0, r2
 80003da:	785a      	ldrb	r2, [r3, #1]
 80003dc:	2107      	movs	r1, #7
 80003de:	438a      	bics	r2, r1
 80003e0:	1c11      	adds	r1, r2, #0
 80003e2:	1c02      	adds	r2, r0, #0
 80003e4:	430a      	orrs	r2, r1
 80003e6:	705a      	strb	r2, [r3, #1]
	digAudReg2.DMONO = monoMode;
 80003e8:	2328      	movs	r3, #40	; 0x28
 80003ea:	18fb      	adds	r3, r7, r3
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2201      	movs	r2, #1
 80003f0:	4013      	ands	r3, r2
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	4b22      	ldr	r3, [pc, #136]	; (8000480 <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 80003f6:	2101      	movs	r1, #1
 80003f8:	400a      	ands	r2, r1
 80003fa:	00d0      	lsls	r0, r2, #3
 80003fc:	785a      	ldrb	r2, [r3, #1]
 80003fe:	2108      	movs	r1, #8
 8000400:	438a      	bics	r2, r1
 8000402:	1c11      	adds	r1, r2, #0
 8000404:	1c02      	adds	r2, r0, #0
 8000406:	430a      	orrs	r2, r1
 8000408:	705a      	strb	r2, [r3, #1]
	digAudReg2.LVOLFIX = fixLineVol;
 800040a:	232c      	movs	r3, #44	; 0x2c
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2201      	movs	r2, #1
 8000412:	4013      	ands	r3, r2
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 8000418:	2101      	movs	r1, #1
 800041a:	400a      	ands	r2, r1
 800041c:	0110      	lsls	r0, r2, #4
 800041e:	785a      	ldrb	r2, [r3, #1]
 8000420:	2110      	movs	r1, #16
 8000422:	438a      	bics	r2, r1
 8000424:	1c11      	adds	r1, r2, #0
 8000426:	1c02      	adds	r2, r0, #0
 8000428:	430a      	orrs	r2, r1
 800042a:	705a      	strb	r2, [r3, #1]

	tDataCodec[0] = MAX9867_REG_INTERFACE_MODE1;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 800042e:	2208      	movs	r2, #8
 8000430:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = digAudReg1.digAudReg1;
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 8000438:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 800043c:	4812      	ldr	r0, [pc, #72]	; (8000488 <MAX9867_DigitalAudioInterfaceInit+0x1a8>)
 800043e:	2302      	movs	r3, #2
 8000440:	2130      	movs	r1, #48	; 0x30
 8000442:	f7ff feeb 	bl	800021c <WriteI2C>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MAX9867_DigitalAudioInterfaceInit+0x16e>
			return STATUS_ERR;
 800044a:	23ff      	movs	r3, #255	; 0xff
 800044c:	e011      	b.n	8000472 <MAX9867_DigitalAudioInterfaceInit+0x192>

	tDataCodec[0] = MAX9867_REG_INTERFACE_MODE2;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 8000450:	2209      	movs	r2, #9
 8000452:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = digAudReg2.digAudReg2;
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 8000456:	781a      	ldrb	r2, [r3, #0]
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 800045a:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 800045c:	4a09      	ldr	r2, [pc, #36]	; (8000484 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 800045e:	480a      	ldr	r0, [pc, #40]	; (8000488 <MAX9867_DigitalAudioInterfaceInit+0x1a8>)
 8000460:	2302      	movs	r3, #2
 8000462:	2130      	movs	r1, #48	; 0x30
 8000464:	f7ff feda 	bl	800021c <WriteI2C>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <MAX9867_DigitalAudioInterfaceInit+0x190>
			return STATUS_ERR;
 800046c:	23ff      	movs	r3, #255	; 0xff
 800046e:	e000      	b.n	8000472 <MAX9867_DigitalAudioInterfaceInit+0x192>
	return STATUS_OK;
 8000470:	2300      	movs	r3, #0
}
 8000472:	0018      	movs	r0, r3
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bdb0      	pop	{r4, r5, r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000034 	.word	0x20000034
 8000480:	20000038 	.word	0x20000038
 8000484:	20000054 	.word	0x20000054
 8000488:	20000058 	.word	0x20000058

0800048c <MAX9867_DigitalFilterInit>:

static Status_TypeDef MAX9867_DigitalFilterInit(Digital_Audio_Filter_Mode mode, ADC_DAC_Digital_Audio_Filter_Sٍpecifications ADC_Specifications,ADC_DAC_Digital_Audio_Filter_Sٍpecifications DAC_Specifications)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	0004      	movs	r4, r0
 8000494:	0008      	movs	r0, r1
 8000496:	0011      	movs	r1, r2
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	1c22      	adds	r2, r4, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	1c02      	adds	r2, r0, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	1d7b      	adds	r3, r7, #5
 80004a6:	1c0a      	adds	r2, r1, #0
 80004a8:	701a      	strb	r2, [r3, #0]

	codecFilterReg.MODE = mode;
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2201      	movs	r2, #1
 80004b0:	4013      	ands	r3, r2
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MAX9867_DigitalFilterInit+0xa8>)
 80004b6:	01d0      	lsls	r0, r2, #7
 80004b8:	785a      	ldrb	r2, [r3, #1]
 80004ba:	217f      	movs	r1, #127	; 0x7f
 80004bc:	400a      	ands	r2, r1
 80004be:	1c11      	adds	r1, r2, #0
 80004c0:	1c02      	adds	r2, r0, #0
 80004c2:	430a      	orrs	r2, r1
 80004c4:	705a      	strb	r2, [r3, #1]
	codecFilterReg.AVFLT = ADC_Specifications;
 80004c6:	1dbb      	adds	r3, r7, #6
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2207      	movs	r2, #7
 80004cc:	4013      	ands	r3, r2
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	4b18      	ldr	r3, [pc, #96]	; (8000534 <MAX9867_DigitalFilterInit+0xa8>)
 80004d2:	2107      	movs	r1, #7
 80004d4:	400a      	ands	r2, r1
 80004d6:	0110      	lsls	r0, r2, #4
 80004d8:	785a      	ldrb	r2, [r3, #1]
 80004da:	2170      	movs	r1, #112	; 0x70
 80004dc:	438a      	bics	r2, r1
 80004de:	1c11      	adds	r1, r2, #0
 80004e0:	1c02      	adds	r2, r0, #0
 80004e2:	430a      	orrs	r2, r1
 80004e4:	705a      	strb	r2, [r3, #1]
	codecFilterReg.DVFLT = DAC_Specifications;
 80004e6:	1d7b      	adds	r3, r7, #5
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2207      	movs	r2, #7
 80004ec:	4013      	ands	r3, r2
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MAX9867_DigitalFilterInit+0xa8>)
 80004f2:	2107      	movs	r1, #7
 80004f4:	400a      	ands	r2, r1
 80004f6:	0010      	movs	r0, r2
 80004f8:	785a      	ldrb	r2, [r3, #1]
 80004fa:	2107      	movs	r1, #7
 80004fc:	438a      	bics	r2, r1
 80004fe:	1c11      	adds	r1, r2, #0
 8000500:	1c02      	adds	r2, r0, #0
 8000502:	430a      	orrs	r2, r1
 8000504:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_CODEC_FILTERS;
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MAX9867_DigitalFilterInit+0xac>)
 8000508:	220a      	movs	r2, #10
 800050a:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = codecFilterReg.digtlFltrReg;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MAX9867_DigitalFilterInit+0xa8>)
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MAX9867_DigitalFilterInit+0xac>)
 8000512:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <MAX9867_DigitalFilterInit+0xac>)
 8000516:	4809      	ldr	r0, [pc, #36]	; (800053c <MAX9867_DigitalFilterInit+0xb0>)
 8000518:	2302      	movs	r3, #2
 800051a:	2130      	movs	r1, #48	; 0x30
 800051c:	f7ff fe7e 	bl	800021c <WriteI2C>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <MAX9867_DigitalFilterInit+0x9c>
			return STATUS_ERR;
 8000524:	23ff      	movs	r3, #255	; 0xff
 8000526:	e000      	b.n	800052a <MAX9867_DigitalFilterInit+0x9e>
	return STATUS_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	0018      	movs	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	b003      	add	sp, #12
 8000530:	bd90      	pop	{r4, r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	2000003c 	.word	0x2000003c
 8000538:	20000054 	.word	0x20000054
 800053c:	20000058 	.word	0x20000058

08000540 <MAX9867_ClockControlInit>:

Status_TypeDef MAX9867_ClockControlInit(MCLK_Prescaler mclkPresclr, Exact_Integer_Modes exactIntMode,
		PLL_Mode_En_Dis pllMode, uint32_t NI, bool NI0)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	0004      	movs	r4, r0
 8000548:	0008      	movs	r0, r1
 800054a:	0011      	movs	r1, r2
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	1c22      	adds	r2, r4, #0
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	1dbb      	adds	r3, r7, #6
 8000556:	1c02      	adds	r2, r0, #0
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	1d7b      	adds	r3, r7, #5
 800055c:	1c0a      	adds	r2, r1, #0
 800055e:	701a      	strb	r2, [r3, #0]
	sysClkReg.PSCLK = mclkPresclr;
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2203      	movs	r2, #3
 8000566:	4013      	ands	r3, r2
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b47      	ldr	r3, [pc, #284]	; (8000688 <MAX9867_ClockControlInit+0x148>)
 800056c:	2103      	movs	r1, #3
 800056e:	400a      	ands	r2, r1
 8000570:	00d0      	lsls	r0, r2, #3
 8000572:	785a      	ldrb	r2, [r3, #1]
 8000574:	2118      	movs	r1, #24
 8000576:	438a      	bics	r2, r1
 8000578:	1c11      	adds	r1, r2, #0
 800057a:	1c02      	adds	r2, r0, #0
 800057c:	430a      	orrs	r2, r1
 800057e:	705a      	strb	r2, [r3, #1]
	sysClkReg.FREQ = exactIntMode;
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2207      	movs	r2, #7
 8000586:	4013      	ands	r3, r2
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b3f      	ldr	r3, [pc, #252]	; (8000688 <MAX9867_ClockControlInit+0x148>)
 800058c:	2107      	movs	r1, #7
 800058e:	400a      	ands	r2, r1
 8000590:	0010      	movs	r0, r2
 8000592:	785a      	ldrb	r2, [r3, #1]
 8000594:	2107      	movs	r1, #7
 8000596:	438a      	bics	r2, r1
 8000598:	1c11      	adds	r1, r2, #0
 800059a:	1c02      	adds	r2, r0, #0
 800059c:	430a      	orrs	r2, r1
 800059e:	705a      	strb	r2, [r3, #1]

	stereoAudClkRegH.PLL = pllMode;
 80005a0:	1d7b      	adds	r3, r7, #5
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4013      	ands	r3, r2
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b38      	ldr	r3, [pc, #224]	; (800068c <MAX9867_ClockControlInit+0x14c>)
 80005ac:	01d0      	lsls	r0, r2, #7
 80005ae:	785a      	ldrb	r2, [r3, #1]
 80005b0:	217f      	movs	r1, #127	; 0x7f
 80005b2:	400a      	ands	r2, r1
 80005b4:	1c11      	adds	r1, r2, #0
 80005b6:	1c02      	adds	r2, r0, #0
 80005b8:	430a      	orrs	r2, r1
 80005ba:	705a      	strb	r2, [r3, #1]
	stereoAudClkRegH.NI = NI >> 8;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	1c1a      	adds	r2, r3, #0
 80005c2:	237f      	movs	r3, #127	; 0x7f
 80005c4:	4013      	ands	r3, r2
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <MAX9867_ClockControlInit+0x14c>)
 80005ca:	217f      	movs	r1, #127	; 0x7f
 80005cc:	400a      	ands	r2, r1
 80005ce:	0010      	movs	r0, r2
 80005d0:	785a      	ldrb	r2, [r3, #1]
 80005d2:	217f      	movs	r1, #127	; 0x7f
 80005d4:	438a      	bics	r2, r1
 80005d6:	1c11      	adds	r1, r2, #0
 80005d8:	1c02      	adds	r2, r0, #0
 80005da:	430a      	orrs	r2, r1
 80005dc:	705a      	strb	r2, [r3, #1]

	stereoAudClkRegL.NI0 = NI0;
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <MAX9867_ClockControlInit+0x150>)
 80005e0:	2218      	movs	r2, #24
 80005e2:	18ba      	adds	r2, r7, r2
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	2101      	movs	r1, #1
 80005e8:	0010      	movs	r0, r2
 80005ea:	4008      	ands	r0, r1
 80005ec:	785a      	ldrb	r2, [r3, #1]
 80005ee:	2101      	movs	r1, #1
 80005f0:	438a      	bics	r2, r1
 80005f2:	1c11      	adds	r1, r2, #0
 80005f4:	1c02      	adds	r2, r0, #0
 80005f6:	430a      	orrs	r2, r1
 80005f8:	705a      	strb	r2, [r3, #1]
	stereoAudClkRegL.NI = NI;
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	1c1a      	adds	r2, r3, #0
 80005fe:	237f      	movs	r3, #127	; 0x7f
 8000600:	4013      	ands	r3, r2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MAX9867_ClockControlInit+0x150>)
 8000606:	1890      	adds	r0, r2, r2
 8000608:	785a      	ldrb	r2, [r3, #1]
 800060a:	2101      	movs	r1, #1
 800060c:	400a      	ands	r2, r1
 800060e:	1c11      	adds	r1, r2, #0
 8000610:	1c02      	adds	r2, r0, #0
 8000612:	430a      	orrs	r2, r1
 8000614:	705a      	strb	r2, [r3, #1]

	tDataCodec[0] = MAX9867_REG_SYSTEM_CLK;
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 8000618:	2205      	movs	r2, #5
 800061a:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = sysClkReg.sysClkReg;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MAX9867_ClockControlInit+0x148>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 8000622:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <MAX9867_ClockControlInit+0x158>)
 8000628:	2302      	movs	r3, #2
 800062a:	2130      	movs	r1, #48	; 0x30
 800062c:	f7ff fdf6 	bl	800021c <WriteI2C>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MAX9867_ClockControlInit+0xf8>
			return STATUS_ERR;
 8000634:	23ff      	movs	r3, #255	; 0xff
 8000636:	e022      	b.n	800067e <MAX9867_ClockControlInit+0x13e>

	tDataCodec[0] = MAX9867_REG_STEREO_AUD_CLK_CTRL_H;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 800063a:	2206      	movs	r2, #6
 800063c:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = stereoAudClkRegH.stereoAudClkRegH;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MAX9867_ClockControlInit+0x14c>)
 8000640:	781a      	ldrb	r2, [r3, #0]
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 8000644:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <MAX9867_ClockControlInit+0x158>)
 800064a:	2302      	movs	r3, #2
 800064c:	2130      	movs	r1, #48	; 0x30
 800064e:	f7ff fde5 	bl	800021c <WriteI2C>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MAX9867_ClockControlInit+0x11a>
			return STATUS_ERR;
 8000656:	23ff      	movs	r3, #255	; 0xff
 8000658:	e011      	b.n	800067e <MAX9867_ClockControlInit+0x13e>

	tDataCodec[0] = MAX9867_REG_STEREO_AUD_CLK_CTRL_L;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 800065c:	2207      	movs	r2, #7
 800065e:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = stereoAudClkRegL.stereoAudClkRegL;
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MAX9867_ClockControlInit+0x150>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 8000666:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <MAX9867_ClockControlInit+0x154>)
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <MAX9867_ClockControlInit+0x158>)
 800066c:	2302      	movs	r3, #2
 800066e:	2130      	movs	r1, #48	; 0x30
 8000670:	f7ff fdd4 	bl	800021c <WriteI2C>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MAX9867_ClockControlInit+0x13c>
			return STATUS_ERR;
 8000678:	23ff      	movs	r3, #255	; 0xff
 800067a:	e000      	b.n	800067e <MAX9867_ClockControlInit+0x13e>

	return STATUS_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	0018      	movs	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	b003      	add	sp, #12
 8000684:	bd90      	pop	{r4, r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	20000028 	.word	0x20000028
 800068c:	2000002c 	.word	0x2000002c
 8000690:	20000030 	.word	0x20000030
 8000694:	20000054 	.word	0x20000054
 8000698:	20000058 	.word	0x20000058

0800069c <MAX9867_Shoutdown>:
			return STATUS_ERR;
	return STATUS_OK;
}

Status_TypeDef MAX9867_Shoutdown(Shoutdown shtdown)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0002      	movs	r2, r0
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	701a      	strb	r2, [r3, #0]
	powerMangReg.SHDN = shtdown;
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2201      	movs	r2, #1
 80006ae:	4013      	ands	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MAX9867_Shoutdown+0x54>)
 80006b4:	01d0      	lsls	r0, r2, #7
 80006b6:	785a      	ldrb	r2, [r3, #1]
 80006b8:	217f      	movs	r1, #127	; 0x7f
 80006ba:	400a      	ands	r2, r1
 80006bc:	1c11      	adds	r1, r2, #0
 80006be:	1c02      	adds	r2, r0, #0
 80006c0:	430a      	orrs	r2, r1
 80006c2:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_SYS_SHUTDOWN;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MAX9867_Shoutdown+0x58>)
 80006c6:	2217      	movs	r2, #23
 80006c8:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = powerMangReg.pwrManagReg;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MAX9867_Shoutdown+0x54>)
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MAX9867_Shoutdown+0x58>)
 80006d0:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <MAX9867_Shoutdown+0x58>)
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <MAX9867_Shoutdown+0x5c>)
 80006d6:	2302      	movs	r3, #2
 80006d8:	2130      	movs	r1, #48	; 0x30
 80006da:	f7ff fd9f 	bl	800021c <WriteI2C>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MAX9867_Shoutdown+0x4a>
			return STATUS_ERR;
 80006e2:	23ff      	movs	r3, #255	; 0xff
 80006e4:	e000      	b.n	80006e8 <MAX9867_Shoutdown+0x4c>
	return STATUS_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000050 	.word	0x20000050
 80006f4:	20000054 	.word	0x20000054
 80006f8:	20000058 	.word	0x20000058

080006fc <MAX9867_HeadphoneAmpMode>:

Status_TypeDef MAX9867_HeadphoneAmpMode(Headphone_Amp_Mode ampMode)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	0002      	movs	r2, r0
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	701a      	strb	r2, [r3, #0]
	configModeReg.HPMODE = ampMode;
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2207      	movs	r2, #7
 800070e:	4013      	ands	r3, r2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MAX9867_HeadphoneAmpMode+0x58>)
 8000714:	2107      	movs	r1, #7
 8000716:	400a      	ands	r2, r1
 8000718:	0010      	movs	r0, r2
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	2107      	movs	r1, #7
 800071e:	438a      	bics	r2, r1
 8000720:	1c11      	adds	r1, r2, #0
 8000722:	1c02      	adds	r2, r0, #0
 8000724:	430a      	orrs	r2, r1
 8000726:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_MODE;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MAX9867_HeadphoneAmpMode+0x5c>)
 800072a:	2216      	movs	r2, #22
 800072c:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = configModeReg.configModeReg;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MAX9867_HeadphoneAmpMode+0x58>)
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MAX9867_HeadphoneAmpMode+0x5c>)
 8000734:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <MAX9867_HeadphoneAmpMode+0x5c>)
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <MAX9867_HeadphoneAmpMode+0x60>)
 800073a:	2302      	movs	r3, #2
 800073c:	2130      	movs	r1, #48	; 0x30
 800073e:	f7ff fd6d 	bl	800021c <WriteI2C>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MAX9867_HeadphoneAmpMode+0x4e>
			return STATUS_ERR;
 8000746:	23ff      	movs	r3, #255	; 0xff
 8000748:	e000      	b.n	800074c <MAX9867_HeadphoneAmpMode+0x50>
	return STATUS_OK;
 800074a:	2300      	movs	r3, #0
}
 800074c:	0018      	movs	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	b002      	add	sp, #8
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000004c 	.word	0x2000004c
 8000758:	20000054 	.word	0x20000054
 800075c:	20000058 	.word	0x20000058

08000760 <MAX9867_DAC_EnableDisable>:

Status_TypeDef MAX9867_DAC_EnableDisable(DAC_En_Dis dac)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	701a      	strb	r2, [r3, #0]
		powerMangReg.DALEN = dac;
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	4013      	ands	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MAX9867_DAC_EnableDisable+0x78>)
 8000778:	2101      	movs	r1, #1
 800077a:	400a      	ands	r2, r1
 800077c:	00d0      	lsls	r0, r2, #3
 800077e:	785a      	ldrb	r2, [r3, #1]
 8000780:	2108      	movs	r1, #8
 8000782:	438a      	bics	r2, r1
 8000784:	1c11      	adds	r1, r2, #0
 8000786:	1c02      	adds	r2, r0, #0
 8000788:	430a      	orrs	r2, r1
 800078a:	705a      	strb	r2, [r3, #1]
		powerMangReg.DAREN = dac;
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2201      	movs	r2, #1
 8000792:	4013      	ands	r3, r2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MAX9867_DAC_EnableDisable+0x78>)
 8000798:	2101      	movs	r1, #1
 800079a:	400a      	ands	r2, r1
 800079c:	0090      	lsls	r0, r2, #2
 800079e:	785a      	ldrb	r2, [r3, #1]
 80007a0:	2104      	movs	r1, #4
 80007a2:	438a      	bics	r2, r1
 80007a4:	1c11      	adds	r1, r2, #0
 80007a6:	1c02      	adds	r2, r0, #0
 80007a8:	430a      	orrs	r2, r1
 80007aa:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_CODEC_FILTERS;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MAX9867_DAC_EnableDisable+0x7c>)
 80007ae:	220a      	movs	r2, #10
 80007b0:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = powerMangReg.pwrManagReg;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MAX9867_DAC_EnableDisable+0x78>)
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MAX9867_DAC_EnableDisable+0x7c>)
 80007b8:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <MAX9867_DAC_EnableDisable+0x7c>)
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <MAX9867_DAC_EnableDisable+0x80>)
 80007be:	2302      	movs	r3, #2
 80007c0:	2130      	movs	r1, #48	; 0x30
 80007c2:	f7ff fd2b 	bl	800021c <WriteI2C>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MAX9867_DAC_EnableDisable+0x6e>
				return STATUS_ERR;
 80007ca:	23ff      	movs	r3, #255	; 0xff
 80007cc:	e000      	b.n	80007d0 <MAX9867_DAC_EnableDisable+0x70>
	return STATUS_OK;
 80007ce:	2300      	movs	r3, #0
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b002      	add	sp, #8
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000050 	.word	0x20000050
 80007dc:	20000054 	.word	0x20000054
 80007e0:	20000058 	.word	0x20000058

080007e4 <MAX9867_DAC_Gain>:

Status_TypeDef MAX9867_DAC_Gain(DAC_Gain firstAmp, DAC_Level_Ctrl progAmp)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	1dbb      	adds	r3, r7, #6
 80007f2:	1c0a      	adds	r2, r1, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	DAC_LevelReg.DACG = firstAmp;
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2203      	movs	r2, #3
 80007fc:	4013      	ands	r3, r2
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MAX9867_DAC_Gain+0x80>)
 8000802:	2103      	movs	r1, #3
 8000804:	400a      	ands	r2, r1
 8000806:	0110      	lsls	r0, r2, #4
 8000808:	785a      	ldrb	r2, [r3, #1]
 800080a:	2130      	movs	r1, #48	; 0x30
 800080c:	438a      	bics	r2, r1
 800080e:	1c11      	adds	r1, r2, #0
 8000810:	1c02      	adds	r2, r0, #0
 8000812:	430a      	orrs	r2, r1
 8000814:	705a      	strb	r2, [r3, #1]
	DAC_LevelReg.DACA = progAmp;
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	220f      	movs	r2, #15
 800081c:	4013      	ands	r3, r2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MAX9867_DAC_Gain+0x80>)
 8000822:	210f      	movs	r1, #15
 8000824:	400a      	ands	r2, r1
 8000826:	0010      	movs	r0, r2
 8000828:	785a      	ldrb	r2, [r3, #1]
 800082a:	210f      	movs	r1, #15
 800082c:	438a      	bics	r2, r1
 800082e:	1c11      	adds	r1, r2, #0
 8000830:	1c02      	adds	r2, r0, #0
 8000832:	430a      	orrs	r2, r1
 8000834:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_DAC_LVL;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MAX9867_DAC_Gain+0x84>)
 8000838:	220c      	movs	r2, #12
 800083a:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = DAC_LevelReg.DACLvlReg;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MAX9867_DAC_Gain+0x80>)
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MAX9867_DAC_Gain+0x84>)
 8000842:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 8000844:	4a08      	ldr	r2, [pc, #32]	; (8000868 <MAX9867_DAC_Gain+0x84>)
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <MAX9867_DAC_Gain+0x88>)
 8000848:	2302      	movs	r3, #2
 800084a:	2130      	movs	r1, #48	; 0x30
 800084c:	f7ff fce6 	bl	800021c <WriteI2C>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MAX9867_DAC_Gain+0x74>
			return STATUS_ERR;
 8000854:	23ff      	movs	r3, #255	; 0xff
 8000856:	e000      	b.n	800085a <MAX9867_DAC_Gain+0x76>
	return STATUS_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000040 	.word	0x20000040
 8000868:	20000054 	.word	0x20000054
 800086c:	20000058 	.word	0x20000058

08000870 <MAX9867_AudioLevel>:
	}
	return STATUS_OK;
}

Status_TypeDef MAX9867_AudioLevel(L_R_Playback_Volume_Channel channel, L_R_Playback_Volume rPlaybackVol, L_R_Playback_Volume lPlaybackVol)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	0004      	movs	r4, r0
 8000878:	0008      	movs	r0, r1
 800087a:	0011      	movs	r1, r2
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	1c22      	adds	r2, r4, #0
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	1c02      	adds	r2, r0, #0
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	1d7b      	adds	r3, r7, #5
 800088a:	1c0a      	adds	r2, r1, #0
 800088c:	701a      	strb	r2, [r3, #0]
	if(channel == LEFT_VOLUME_CHA)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d120      	bne.n	80008d8 <MAX9867_AudioLevel+0x68>
	{
		lVolumeCtrlReg.VOLL = rPlaybackVol;
 8000896:	1dbb      	adds	r3, r7, #6
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	223f      	movs	r2, #63	; 0x3f
 800089c:	4013      	ands	r3, r2
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <MAX9867_AudioLevel+0x148>)
 80008a2:	213f      	movs	r1, #63	; 0x3f
 80008a4:	400a      	ands	r2, r1
 80008a6:	0010      	movs	r0, r2
 80008a8:	785a      	ldrb	r2, [r3, #1]
 80008aa:	213f      	movs	r1, #63	; 0x3f
 80008ac:	438a      	bics	r2, r1
 80008ae:	1c11      	adds	r1, r2, #0
 80008b0:	1c02      	adds	r2, r0, #0
 80008b2:	430a      	orrs	r2, r1
 80008b4:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_R_VOL_CTRL;
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 80008b8:	2211      	movs	r2, #17
 80008ba:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = lVolumeCtrlReg.LVolCtrlReg;
 80008bc:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <MAX9867_AudioLevel+0x148>)
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 80008c2:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 80008c4:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 80008c6:	483e      	ldr	r0, [pc, #248]	; (80009c0 <MAX9867_AudioLevel+0x150>)
 80008c8:	2302      	movs	r3, #2
 80008ca:	2130      	movs	r1, #48	; 0x30
 80008cc:	f7ff fca6 	bl	800021c <WriteI2C>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d06c      	beq.n	80009ae <MAX9867_AudioLevel+0x13e>
				return STATUS_ERR;
 80008d4:	23ff      	movs	r3, #255	; 0xff
 80008d6:	e06b      	b.n	80009b0 <MAX9867_AudioLevel+0x140>
	}
	else if(channel == RIGHT_VOLUME_CHA)
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d120      	bne.n	8000922 <MAX9867_AudioLevel+0xb2>
	{
		rVolumeCtrlReg.VOLR = rPlaybackVol;
 80008e0:	1dbb      	adds	r3, r7, #6
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	223f      	movs	r2, #63	; 0x3f
 80008e6:	4013      	ands	r3, r2
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MAX9867_AudioLevel+0x154>)
 80008ec:	213f      	movs	r1, #63	; 0x3f
 80008ee:	400a      	ands	r2, r1
 80008f0:	0010      	movs	r0, r2
 80008f2:	785a      	ldrb	r2, [r3, #1]
 80008f4:	213f      	movs	r1, #63	; 0x3f
 80008f6:	438a      	bics	r2, r1
 80008f8:	1c11      	adds	r1, r2, #0
 80008fa:	1c02      	adds	r2, r0, #0
 80008fc:	430a      	orrs	r2, r1
 80008fe:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_L_VOL_CTRL;
 8000900:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 8000902:	2210      	movs	r2, #16
 8000904:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = rVolumeCtrlReg.RVolCtrlReg;
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <MAX9867_AudioLevel+0x154>)
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 800090c:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 800090e:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 8000910:	482b      	ldr	r0, [pc, #172]	; (80009c0 <MAX9867_AudioLevel+0x150>)
 8000912:	2302      	movs	r3, #2
 8000914:	2130      	movs	r1, #48	; 0x30
 8000916:	f7ff fc81 	bl	800021c <WriteI2C>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d047      	beq.n	80009ae <MAX9867_AudioLevel+0x13e>
				return STATUS_ERR;
 800091e:	23ff      	movs	r3, #255	; 0xff
 8000920:	e046      	b.n	80009b0 <MAX9867_AudioLevel+0x140>
	}
	else if(channel == LEFT_RIGHT_VOLUME_CHA)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d141      	bne.n	80009ae <MAX9867_AudioLevel+0x13e>
	{
		rVolumeCtrlReg.VOLR = rPlaybackVol;
 800092a:	1dbb      	adds	r3, r7, #6
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	223f      	movs	r2, #63	; 0x3f
 8000930:	4013      	ands	r3, r2
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MAX9867_AudioLevel+0x154>)
 8000936:	213f      	movs	r1, #63	; 0x3f
 8000938:	400a      	ands	r2, r1
 800093a:	0010      	movs	r0, r2
 800093c:	785a      	ldrb	r2, [r3, #1]
 800093e:	213f      	movs	r1, #63	; 0x3f
 8000940:	438a      	bics	r2, r1
 8000942:	1c11      	adds	r1, r2, #0
 8000944:	1c02      	adds	r2, r0, #0
 8000946:	430a      	orrs	r2, r1
 8000948:	705a      	strb	r2, [r3, #1]
		lVolumeCtrlReg.VOLL = rPlaybackVol;
 800094a:	1dbb      	adds	r3, r7, #6
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	223f      	movs	r2, #63	; 0x3f
 8000950:	4013      	ands	r3, r2
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MAX9867_AudioLevel+0x148>)
 8000956:	213f      	movs	r1, #63	; 0x3f
 8000958:	400a      	ands	r2, r1
 800095a:	0010      	movs	r0, r2
 800095c:	785a      	ldrb	r2, [r3, #1]
 800095e:	213f      	movs	r1, #63	; 0x3f
 8000960:	438a      	bics	r2, r1
 8000962:	1c11      	adds	r1, r2, #0
 8000964:	1c02      	adds	r2, r0, #0
 8000966:	430a      	orrs	r2, r1
 8000968:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_L_VOL_CTRL;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 800096c:	2210      	movs	r2, #16
 800096e:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = rVolumeCtrlReg.RVolCtrlReg;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MAX9867_AudioLevel+0x154>)
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 8000976:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 8000978:	4a10      	ldr	r2, [pc, #64]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <MAX9867_AudioLevel+0x150>)
 800097c:	2302      	movs	r3, #2
 800097e:	2130      	movs	r1, #48	; 0x30
 8000980:	f7ff fc4c 	bl	800021c <WriteI2C>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MAX9867_AudioLevel+0x11c>
				return STATUS_ERR;
 8000988:	23ff      	movs	r3, #255	; 0xff
 800098a:	e011      	b.n	80009b0 <MAX9867_AudioLevel+0x140>
		tDataCodec[0] = MAX9867_REG_R_VOL_CTRL;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 800098e:	2211      	movs	r2, #17
 8000990:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = lVolumeCtrlReg.LVolCtrlReg;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MAX9867_AudioLevel+0x148>)
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 8000998:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS_W, tDataCodec, 2) )
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <MAX9867_AudioLevel+0x14c>)
 800099c:	4808      	ldr	r0, [pc, #32]	; (80009c0 <MAX9867_AudioLevel+0x150>)
 800099e:	2302      	movs	r3, #2
 80009a0:	2130      	movs	r1, #48	; 0x30
 80009a2:	f7ff fc3b 	bl	800021c <WriteI2C>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MAX9867_AudioLevel+0x13e>
				return STATUS_ERR;
 80009aa:	23ff      	movs	r3, #255	; 0xff
 80009ac:	e000      	b.n	80009b0 <MAX9867_AudioLevel+0x140>
	}
	return STATUS_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b003      	add	sp, #12
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	20000044 	.word	0x20000044
 80009bc:	20000054 	.word	0x20000054
 80009c0:	20000058 	.word	0x20000058
 80009c4:	20000048 	.word	0x20000048

080009c8 <DigitalAudioInit>:
	return STATUS_OK;
}

Status_TypeDef DigitalAudioInit(L_R_Playback_Volume_Channel channel, DAC_Level_Ctrl progAmp,
		L_R_Playback_Volume rPlaybackVol, L_R_Playback_Volume lPlaybackVol)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	0010      	movs	r0, r2
 80009d4:	0019      	movs	r1, r3
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	1c2a      	adds	r2, r5, #0
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	1c22      	adds	r2, r4, #0
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	1d7b      	adds	r3, r7, #5
 80009e4:	1c02      	adds	r2, r0, #0
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	1c0a      	adds	r2, r1, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	/* in audio application we must set only programmable amplifier, and set preamplifier to 0 because it
	 * espicial with microphone voice gain */
	if( STATUS_OK != MAX9867_DAC_Gain(DAC_GAIN_0dB, progAmp))
 80009ee:	1dbb      	adds	r3, r7, #6
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0019      	movs	r1, r3
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fef5 	bl	80007e4 <MAX9867_DAC_Gain>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <DigitalAudioInit+0x3a>
			return STATUS_ERR;
 80009fe:	23ff      	movs	r3, #255	; 0xff
 8000a00:	e01d      	b.n	8000a3e <DigitalAudioInit+0x76>
	/* Audio level control */
	if( STATUS_OK != MAX9867_AudioLevel(channel, rPlaybackVol, lPlaybackVol))
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	1d7b      	adds	r3, r7, #5
 8000a08:	7819      	ldrb	r1, [r3, #0]
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff ff2e 	bl	8000870 <MAX9867_AudioLevel>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <DigitalAudioInit+0x54>
			return STATUS_ERR;
 8000a18:	23ff      	movs	r3, #255	; 0xff
 8000a1a:	e010      	b.n	8000a3e <DigitalAudioInit+0x76>
	/* Enable DC-blocking just in Audio mode */
	/* Note : we can enable DC-blocking by set AVFLT and DVFLT with any value */
	if( STATUS_OK != MAX9867_DigitalFilterInit(FIR_AUDIO_FILTER,DISABLED,TYPE1))
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fd33 	bl	800048c <MAX9867_DigitalFilterInit>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <DigitalAudioInit+0x66>
			return STATUS_ERR;
 8000a2a:	23ff      	movs	r3, #255	; 0xff
 8000a2c:	e007      	b.n	8000a3e <DigitalAudioInit+0x76>
	if( STATUS_OK != MAX9867_DAC_EnableDisable(DAC_ENABLE))
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe96 	bl	8000760 <MAX9867_DAC_EnableDisable>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <DigitalAudioInit+0x74>
			return STATUS_ERR;
 8000a38:	23ff      	movs	r3, #255	; 0xff
 8000a3a:	e000      	b.n	8000a3e <DigitalAudioInit+0x76>
	return STATUS_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f000 fac1 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f85b 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 f90b 	bl	8000c70 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000a5a:	f000 f89f 	bl	8000b9c <MX_I2C2_Init>
  MX_I2S1_Init();
 8000a5e:	f000 f8dd 	bl	8000c1c <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  MAX9867_Shoutdown(SHOUTDOWN_ENABLE);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff fe1a 	bl	800069c <MAX9867_Shoutdown>

  MAX9867_ClockControlInit(MCLK_BETWEEN_10_20_MHZ, NORMAL_OR_PLL_MODE,
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fd64 	bl	8000540 <MAX9867_ClockControlInit>
  		PLL_DISABLE, 0, 0);

  MAX9867_DigitalAudioInterfaceInit(MAX9867_SLAVE_MODE,
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9305      	str	r3, [sp, #20]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	9304      	str	r3, [sp, #16]
 8000a80:	2300      	movs	r3, #0
 8000a82:	9303      	str	r3, [sp, #12]
 8000a84:	2300      	movs	r3, #0
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fc22 	bl	80002e0 <MAX9867_DigitalAudioInterfaceInit>
		  LEFT_CHN_DATA_IN_OUT, SDIN_LATCHED_RISING_EDGE_BCLK, SDOUT_TRANS_AFTER_SDIN_LATCHED,
		  SDIN_SDOUT_LATCHED_SECOND_BCLK_EDGE, SDOUT_HIGH_IMPEDANCE_AFTER_DATA_TRANS,
		  LRCLK_INDICATE_L_R_AUDIO, OFF, SDIN_PROCESS_SEPARATELY,
		  TRACKS_VOLL_VOLR_BITS);

  DigitalAudioInit(LEFT_RIGHT_VOLUME_CHA, DAC_LVL_GAIN_MINUS_15dB,
 8000a9c:	231c      	movs	r3, #28
 8000a9e:	221c      	movs	r2, #28
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff ff90 	bl	80009c8 <DigitalAudioInit>
		  PLAYBACK_VOLUME_GAIN_MINUS_38dB, PLAYBACK_VOLUME_GAIN_MINUS_38dB);

  MAX9867_HeadphoneAmpMode(STEREO_DIFF_CLICKLESS);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fe27 	bl	80006fc <MAX9867_HeadphoneAmpMode>

  MAX9867_Shoutdown(SHOUTDOWN_DISABLE);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff fdf4 	bl	800069c <MAX9867_Shoutdown>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  WriteI2S(MAX9867_I2S_HANDLE, (uint16_t *)kick_data, 13000-1);
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <main+0xac>)
 8000ab6:	4910      	ldr	r1, [pc, #64]	; (8000af8 <main+0xb0>)
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <main+0xb4>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fbe4 	bl	8000288 <WriteI2S>
	  _DELAY_MS(5000);
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <main+0xb8>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 fb0c 	bl	80010e0 <HAL_Delay>
	  WriteI2S(MAX9867_I2S_HANDLE, (uint16_t *)inhale_data, 13000-1);
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <main+0xac>)
 8000aca:	490e      	ldr	r1, [pc, #56]	; (8000b04 <main+0xbc>)
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <main+0xb4>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fbda 	bl	8000288 <WriteI2S>
	  _DELAY_MS(5000);
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <main+0xb8>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fb02 	bl	80010e0 <HAL_Delay>
	  WriteI2S(MAX9867_I2S_HANDLE, (uint16_t *)exhale_data, 13000-1);
 8000adc:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <main+0xac>)
 8000ade:	490a      	ldr	r1, [pc, #40]	; (8000b08 <main+0xc0>)
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <main+0xb4>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff fbd0 	bl	8000288 <WriteI2S>
	  _DELAY_MS(5000);
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <main+0xb8>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 faf8 	bl	80010e0 <HAL_Delay>
	  WriteI2S(MAX9867_I2S_HANDLE, (uint16_t *)kick_data, 13000-1);
 8000af0:	e7e0      	b.n	8000ab4 <main+0x6c>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	000032c7 	.word	0x000032c7
 8000af8:	08003cc4 	.word	0x08003cc4
 8000afc:	200000a4 	.word	0x200000a4
 8000b00:	00001388 	.word	0x00001388
 8000b04:	08010c58 	.word	0x08010c58
 8000b08:	0800a470 	.word	0x0800a470

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b095      	sub	sp, #84	; 0x54
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	2414      	movs	r4, #20
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	0018      	movs	r0, r3
 8000b18:	233c      	movs	r3, #60	; 0x3c
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f003 f8bd 	bl	8003c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	2310      	movs	r3, #16
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f003 f8b6 	bl	8003c9c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 fbd9 	bl	80022ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	0052      	lsls	r2, r2, #1
 8000b46:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 fc11 	bl	8002384 <HAL_RCC_OscConfig>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b66:	f000 f8fd 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2100      	movs	r1, #0
 8000b86:	0018      	movs	r0, r3
 8000b88:	f001 ff5c 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000b8c:	1e03      	subs	r3, r0, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b90:	f000 f8e8 	bl	8000d64 <Error_Handler>
  }
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b015      	add	sp, #84	; 0x54
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <MX_I2C2_Init+0x78>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <MX_I2C2_Init+0x7c>)
 8000baa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fcf9 	bl	80015d0 <HAL_I2C_Init>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000be2:	f000 f8bf 	bl	8000d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 f8b0 	bl	8001d50 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bf4:	f000 f8b6 	bl	8000d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <MX_I2C2_Init+0x74>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 f8f3 	bl	8001de8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c06:	f000 f8ad 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000058 	.word	0x20000058
 8000c14:	40005800 	.word	0x40005800
 8000c18:	00303d5b 	.word	0x00303d5b

08000c1c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_I2S1_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c44:	22fa      	movs	r2, #250	; 0xfa
 8000c46:	0152      	lsls	r2, r2, #5
 8000c48:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <MX_I2S1_Init+0x4c>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 f914 	bl	8001e80 <HAL_I2S_Init>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000c5c:	f000 f882 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	200000a4 	.word	0x200000a4
 8000c6c:	40013000 	.word	0x40013000

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	240c      	movs	r4, #12
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	2314      	movs	r3, #20
 8000c7e:	001a      	movs	r2, r3
 8000c80:	2100      	movs	r1, #0
 8000c82:	f003 f80b 	bl	8003c9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34
 8000c92:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c96:	2201      	movs	r2, #1
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <MX_GPIO_Init+0xe8>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	2208      	movs	r2, #8
 8000cc8:	4013      	ands	r3, r2
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_MUTE_GPIO_Port, AMP_MUTE_Pin, GPIO_PIN_RESET);
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fc5d 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_FS2_Pin|AMP_FS1_Pin|AMP_GAIN2_Pin|AMP_GAIN1_Pin
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_GPIO_Init+0xf0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	21f8      	movs	r1, #248	; 0xf8
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fc57 	bl	8001594 <HAL_GPIO_WritePin>
                          |AMP_SHUTDOWN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CODEC_IRQN_OUT_Pin */
  GPIO_InitStruct.Pin = CODEC_IRQN_OUT_Pin;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2202      	movs	r2, #2
 8000cea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2288      	movs	r2, #136	; 0x88
 8000cf0:	0352      	lsls	r2, r2, #13
 8000cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CODEC_IRQN_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <MX_GPIO_Init+0xf0>)
 8000cfe:	0019      	movs	r1, r3
 8000d00:	0010      	movs	r0, r2
 8000d02:	f000 fadb 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_MUTE_Pin */
  GPIO_InitStruct.Pin = AMP_MUTE_Pin;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2202      	movs	r2, #2
 8000d0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2201      	movs	r2, #1
 8000d10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AMP_MUTE_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <MX_GPIO_Init+0xec>)
 8000d22:	0019      	movs	r1, r3
 8000d24:	0010      	movs	r0, r2
 8000d26:	f000 fac9 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_FS2_Pin AMP_FS1_Pin AMP_GAIN2_Pin AMP_GAIN1_Pin
                           AMP_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = AMP_FS2_Pin|AMP_FS1_Pin|AMP_GAIN2_Pin|AMP_GAIN1_Pin
 8000d2a:	0021      	movs	r1, r4
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	22f8      	movs	r2, #248	; 0xf8
 8000d30:	601a      	str	r2, [r3, #0]
                          |AMP_SHUTDOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2201      	movs	r2, #1
 8000d36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <MX_GPIO_Init+0xf0>)
 8000d48:	0019      	movs	r1, r3
 8000d4a:	0010      	movs	r0, r2
 8000d4c:	f000 fab6 	bl	80012bc <HAL_GPIO_Init>

}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b009      	add	sp, #36	; 0x24
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	50000c00 	.word	0x50000c00
 8000d60:	50000400 	.word	0x50000400

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	2201      	movs	r2, #1
 8000d88:	4013      	ands	r3, r2
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0549      	lsls	r1, r1, #21
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_MspInit+0x4c>)
 8000d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	055b      	lsls	r3, r3, #21
 8000da4:	4013      	ands	r3, r2
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000daa:	23c0      	movs	r3, #192	; 0xc0
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f9ba 	bl	8001128 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b09d      	sub	sp, #116	; 0x74
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	235c      	movs	r3, #92	; 0x5c
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	0018      	movs	r0, r3
 8000dce:	2314      	movs	r3, #20
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f002 ff62 	bl	8003c9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	2410      	movs	r4, #16
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	234c      	movs	r3, #76	; 0x4c
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f002 ff5a 	bl	8003c9c <memset>
  if(hi2c->Instance==I2C2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <HAL_I2C_MspInit+0xb8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d13e      	bne.n	8000e70 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2240      	movs	r2, #64	; 0x40
 8000df6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 ffc9 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e0a:	f7ff ffab 	bl	8000d64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_I2C_MspInit+0xbc>)
 8000e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_I2C_MspInit+0xbc>)
 8000e14:	2102      	movs	r1, #2
 8000e16:	430a      	orrs	r2, r1
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_I2C_MspInit+0xbc>)
 8000e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e26:	215c      	movs	r1, #92	; 0x5c
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	22c0      	movs	r2, #192	; 0xc0
 8000e2c:	01d2      	lsls	r2, r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2212      	movs	r2, #18
 8000e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2206      	movs	r2, #6
 8000e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_I2C_MspInit+0xc0>)
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	0010      	movs	r0, r2
 8000e50:	f000 fa34 	bl	80012bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_I2C_MspInit+0xbc>)
 8000e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_I2C_MspInit+0xbc>)
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	03c9      	lsls	r1, r1, #15
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_I2C_MspInit+0xbc>)
 8000e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	03db      	lsls	r3, r3, #15
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b01d      	add	sp, #116	; 0x74
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	40005800 	.word	0x40005800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	50000400 	.word	0x50000400

08000e84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b09d      	sub	sp, #116	; 0x74
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	235c      	movs	r3, #92	; 0x5c
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	0018      	movs	r0, r3
 8000e92:	2314      	movs	r3, #20
 8000e94:	001a      	movs	r2, r3
 8000e96:	2100      	movs	r1, #0
 8000e98:	f002 ff00 	bl	8003c9c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	2410      	movs	r4, #16
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	234c      	movs	r3, #76	; 0x4c
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	f002 fef8 	bl	8003c9c <memset>
  if(hi2s->Instance==SPI1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <HAL_I2S_MspInit+0xbc>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d13f      	bne.n	8000f36 <HAL_I2S_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f001 ff66 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ed0:	f7ff ff48 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_I2S_MspInit+0xc0>)
 8000ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_I2S_MspInit+0xc0>)
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	0149      	lsls	r1, r1, #5
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_I2S_MspInit+0xc0>)
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	4013      	ands	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_I2S_MspInit+0xc0>)
 8000ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_I2S_MspInit+0xc0>)
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_I2S_MspInit+0xc0>)
 8000efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_MCK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f08:	215c      	movs	r1, #92	; 0x5c
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	22f0      	movs	r2, #240	; 0xf0
 8000f0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2202      	movs	r2, #2
 8000f14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	187a      	adds	r2, r7, r1
 8000f2a:	23a0      	movs	r3, #160	; 0xa0
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f000 f9c3 	bl	80012bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b01d      	add	sp, #116	; 0x74
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f89c 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f84:	f7ff fff7 	bl	8000f76 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopForever+0xe>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopForever+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fae:	f002 fe51 	bl	8003c54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fb2:	f7ff fd49 	bl	8000a48 <main>

08000fb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
  ldr   r0, =_estack
 8000fb8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fc4:	0801749c 	.word	0x0801749c
  ldr r2, =_sbss
 8000fc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fcc:	200000e4 	.word	0x200000e4

08000fd0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_COMP_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_Init+0x3c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_Init+0x3c>)
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	0049      	lsls	r1, r1, #1
 8000fea:	430a      	orrs	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f000 f810 	bl	8001014 <HAL_InitTick>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff feb6 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40022000 	.word	0x40022000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	230f      	movs	r3, #15
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_InitTick+0x88>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d02b      	beq.n	8001084 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_InitTick+0x8c>)
 800102e:	681c      	ldr	r4, [r3, #0]
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <HAL_InitTick+0x88>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	0019      	movs	r1, r3
 8001036:	23fa      	movs	r3, #250	; 0xfa
 8001038:	0098      	lsls	r0, r3, #2
 800103a:	f7ff f863 	bl	8000104 <__udivsi3>
 800103e:	0003      	movs	r3, r0
 8001040:	0019      	movs	r1, r3
 8001042:	0020      	movs	r0, r4
 8001044:	f7ff f85e 	bl	8000104 <__udivsi3>
 8001048:	0003      	movs	r3, r0
 800104a:	0018      	movs	r0, r3
 800104c:	f000 f929 	bl	80012a2 <HAL_SYSTICK_Config>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d112      	bne.n	800107a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d80a      	bhi.n	8001070 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f908 	bl	8001278 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_InitTick+0x90>)
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e00d      	b.n	800108c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	e008      	b.n	800108c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800107a:	230f      	movs	r3, #15
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e003      	b.n	800108c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	781b      	ldrb	r3, [r3, #0]
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b005      	add	sp, #20
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_IncTick+0x1c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	001a      	movs	r2, r3
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_IncTick+0x20>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	18d2      	adds	r2, r2, r3
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_IncTick+0x20>)
 80010ba:	601a      	str	r2, [r3, #0]
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	20000008 	.word	0x20000008
 80010c8:	200000e0 	.word	0x200000e0

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <HAL_GetTick+0x10>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	200000e0 	.word	0x200000e0

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff fff0 	bl	80010cc <HAL_GetTick>
 80010ec:	0003      	movs	r3, r0
 80010ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	001a      	movs	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	189b      	adds	r3, r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	f7ff ffe0 	bl	80010cc <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b004      	add	sp, #16
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	40010000 	.word	0x40010000
 8001150:	fffff9ff 	.word	0xfffff9ff

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b7f      	cmp	r3, #127	; 0x7f
 8001168:	d828      	bhi.n	80011bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116a:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <__NVIC_SetPriority+0xd4>)
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b25b      	sxtb	r3, r3
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	33c0      	adds	r3, #192	; 0xc0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	589b      	ldr	r3, [r3, r2]
 800117a:	1dfa      	adds	r2, r7, #7
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	0011      	movs	r1, r2
 8001180:	2203      	movs	r2, #3
 8001182:	400a      	ands	r2, r1
 8001184:	00d2      	lsls	r2, r2, #3
 8001186:	21ff      	movs	r1, #255	; 0xff
 8001188:	4091      	lsls	r1, r2
 800118a:	000a      	movs	r2, r1
 800118c:	43d2      	mvns	r2, r2
 800118e:	401a      	ands	r2, r3
 8001190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	019b      	lsls	r3, r3, #6
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	401a      	ands	r2, r3
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	0018      	movs	r0, r3
 80011a0:	2303      	movs	r3, #3
 80011a2:	4003      	ands	r3, r0
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a8:	481f      	ldr	r0, [pc, #124]	; (8001228 <__NVIC_SetPriority+0xd4>)
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	430a      	orrs	r2, r1
 80011b4:	33c0      	adds	r3, #192	; 0xc0
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ba:	e031      	b.n	8001220 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <__NVIC_SetPriority+0xd8>)
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	0019      	movs	r1, r3
 80011c4:	230f      	movs	r3, #15
 80011c6:	400b      	ands	r3, r1
 80011c8:	3b08      	subs	r3, #8
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3306      	adds	r3, #6
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	3304      	adds	r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1dfa      	adds	r2, r7, #7
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	0011      	movs	r1, r2
 80011dc:	2203      	movs	r2, #3
 80011de:	400a      	ands	r2, r1
 80011e0:	00d2      	lsls	r2, r2, #3
 80011e2:	21ff      	movs	r1, #255	; 0xff
 80011e4:	4091      	lsls	r1, r2
 80011e6:	000a      	movs	r2, r1
 80011e8:	43d2      	mvns	r2, r2
 80011ea:	401a      	ands	r2, r3
 80011ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	019b      	lsls	r3, r3, #6
 80011f2:	22ff      	movs	r2, #255	; 0xff
 80011f4:	401a      	ands	r2, r3
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	2303      	movs	r3, #3
 80011fe:	4003      	ands	r3, r0
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <__NVIC_SetPriority+0xd8>)
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	001c      	movs	r4, r3
 800120c:	230f      	movs	r3, #15
 800120e:	4023      	ands	r3, r4
 8001210:	3b08      	subs	r3, #8
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	430a      	orrs	r2, r1
 8001216:	3306      	adds	r3, #6
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	18c3      	adds	r3, r0, r3
 800121c:	3304      	adds	r3, #4
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b003      	add	sp, #12
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1e5a      	subs	r2, r3, #1
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	045b      	lsls	r3, r3, #17
 8001240:	429a      	cmp	r2, r3
 8001242:	d301      	bcc.n	8001248 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001244:	2301      	movs	r3, #1
 8001246:	e010      	b.n	800126a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <SysTick_Config+0x44>)
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	3a01      	subs	r2, #1
 800124e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001250:	2301      	movs	r3, #1
 8001252:	425b      	negs	r3, r3
 8001254:	2103      	movs	r1, #3
 8001256:	0018      	movs	r0, r3
 8001258:	f7ff ff7c 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x44>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x44>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	210f      	movs	r1, #15
 8001284:	187b      	adds	r3, r7, r1
 8001286:	1c02      	adds	r2, r0, #0
 8001288:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	187b      	adds	r3, r7, r1
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b25b      	sxtb	r3, r3
 8001292:	0011      	movs	r1, r2
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b004      	add	sp, #16
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff ffbf 	bl	8001230 <SysTick_Config>
 80012b2:	0003      	movs	r3, r0
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e14d      	b.n	8001568 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d100      	bne.n	80012e4 <HAL_GPIO_Init+0x28>
 80012e2:	e13e      	b.n	8001562 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d005      	beq.n	80012fc <HAL_GPIO_Init+0x40>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d130      	bne.n	800135e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	409a      	lsls	r2, r3
 800130a:	0013      	movs	r3, r2
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001332:	2201      	movs	r2, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	2201      	movs	r2, #1
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2203      	movs	r2, #3
 8001364:	4013      	ands	r3, r2
 8001366:	2b03      	cmp	r3, #3
 8001368:	d017      	beq.n	800139a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d123      	bne.n	80013ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	58d3      	ldr	r3, [r2, r3]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2207      	movs	r2, #7
 80013b8:	4013      	ands	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2107      	movs	r1, #7
 80013d2:	400b      	ands	r3, r1
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	0092      	lsls	r2, r2, #2
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	401a      	ands	r2, r3
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	23c0      	movs	r3, #192	; 0xc0
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_GPIO_Init+0x174>
 800142e:	e098      	b.n	8001562 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001430:	4a53      	ldr	r2, [pc, #332]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3318      	adds	r3, #24
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	589b      	ldr	r3, [r3, r2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2203      	movs	r2, #3
 8001442:	4013      	ands	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	220f      	movs	r2, #15
 8001448:	409a      	lsls	r2, r3
 800144a:	0013      	movs	r3, r2
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	429a      	cmp	r2, r3
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x1d6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a48      	ldr	r2, [pc, #288]	; (8001584 <HAL_GPIO_Init+0x2c8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x1d2>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a47      	ldr	r2, [pc, #284]	; (8001588 <HAL_GPIO_Init+0x2cc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x1ce>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a46      	ldr	r2, [pc, #280]	; (800158c <HAL_GPIO_Init+0x2d0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x1ca>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a45      	ldr	r2, [pc, #276]	; (8001590 <HAL_GPIO_Init+0x2d4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x1c6>
 800147e:	2304      	movs	r3, #4
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 8001482:	2305      	movs	r3, #5
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x1d8>
 8001492:	2300      	movs	r3, #0
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	2103      	movs	r1, #3
 8001498:	400a      	ands	r2, r1
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	4093      	lsls	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014a4:	4936      	ldr	r1, [pc, #216]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3318      	adds	r3, #24
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	035b      	lsls	r3, r3, #13
 80014ca:	4013      	ands	r3, r2
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43da      	mvns	r2, r3
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	039b      	lsls	r3, r3, #14
 80014f4:	4013      	ands	r3, r2
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 8001508:	2384      	movs	r3, #132	; 0x84
 800150a:	58d3      	ldr	r3, [r2, r3]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800152c:	4914      	ldr	r1, [pc, #80]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 800152e:	2284      	movs	r2, #132	; 0x84
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	58d3      	ldr	r3, [r2, r3]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	4013      	ands	r3, r2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155a:	4909      	ldr	r1, [pc, #36]	; (8001580 <HAL_GPIO_Init+0x2c4>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	40da      	lsrs	r2, r3
 8001570:	1e13      	subs	r3, r2, #0
 8001572:	d000      	beq.n	8001576 <HAL_GPIO_Init+0x2ba>
 8001574:	e6aa      	b.n	80012cc <HAL_GPIO_Init+0x10>
  }
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b006      	add	sp, #24
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021800 	.word	0x40021800
 8001584:	50000400 	.word	0x50000400
 8001588:	50000800 	.word	0x50000800
 800158c:	50000c00 	.word	0x50000c00
 8001590:	50001000 	.word	0x50001000

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	0008      	movs	r0, r1
 800159e:	0011      	movs	r1, r2
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	1c02      	adds	r2, r0, #0
 80015a4:	801a      	strh	r2, [r3, #0]
 80015a6:	1c7b      	adds	r3, r7, #1
 80015a8:	1c0a      	adds	r2, r1, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ac:	1c7b      	adds	r3, r7, #1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b4:	1cbb      	adds	r3, r7, #2
 80015b6:	881a      	ldrh	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015be:	1cbb      	adds	r3, r7, #2
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e082      	b.n	80016e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2241      	movs	r2, #65	; 0x41
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d107      	bne.n	80015fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2240      	movs	r2, #64	; 0x40
 80015f2:	2100      	movs	r1, #0
 80015f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff fbe1 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2241      	movs	r2, #65	; 0x41
 8001602:	2124      	movs	r1, #36	; 0x24
 8001604:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	438a      	bics	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4934      	ldr	r1, [pc, #208]	; (80016f0 <HAL_I2C_Init+0x120>)
 8001620:	400a      	ands	r2, r1
 8001622:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4931      	ldr	r1, [pc, #196]	; (80016f4 <HAL_I2C_Init+0x124>)
 8001630:	400a      	ands	r2, r1
 8001632:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0209      	lsls	r1, r1, #8
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e007      	b.n	800165e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2184      	movs	r1, #132	; 0x84
 8001658:	0209      	lsls	r1, r1, #8
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d104      	bne.n	8001670 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	491f      	ldr	r1, [pc, #124]	; (80016f8 <HAL_I2C_Init+0x128>)
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	491a      	ldr	r1, [pc, #104]	; (80016f4 <HAL_I2C_Init+0x124>)
 800168c:	400a      	ands	r2, r1
 800168e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	431a      	orrs	r2, r3
 800169a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69d9      	ldr	r1, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1a      	ldr	r2, [r3, #32]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2241      	movs	r2, #65	; 0x41
 80016d4:	2120      	movs	r1, #32
 80016d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2242      	movs	r2, #66	; 0x42
 80016e2:	2100      	movs	r1, #0
 80016e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	0018      	movs	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b002      	add	sp, #8
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	f0ffffff 	.word	0xf0ffffff
 80016f4:	ffff7fff 	.word	0xffff7fff
 80016f8:	02008000 	.word	0x02008000

080016fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	0008      	movs	r0, r1
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	0019      	movs	r1, r3
 800170a:	230a      	movs	r3, #10
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	1c02      	adds	r2, r0, #0
 8001710:	801a      	strh	r2, [r3, #0]
 8001712:	2308      	movs	r3, #8
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	1c0a      	adds	r2, r1, #0
 8001718:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2241      	movs	r2, #65	; 0x41
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b20      	cmp	r3, #32
 8001724:	d000      	beq.n	8001728 <HAL_I2C_Master_Transmit+0x2c>
 8001726:	e0e7      	b.n	80018f8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	5c9b      	ldrb	r3, [r3, r2]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_I2C_Master_Transmit+0x3a>
 8001732:	2302      	movs	r3, #2
 8001734:	e0e1      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1fe>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	2101      	movs	r1, #1
 800173c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800173e:	f7ff fcc5 	bl	80010cc <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	0219      	lsls	r1, r3, #8
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2319      	movs	r3, #25
 8001752:	2201      	movs	r2, #1
 8001754:	f000 f8fc 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2241      	movs	r2, #65	; 0x41
 8001764:	2121      	movs	r1, #33	; 0x21
 8001766:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2242      	movs	r2, #66	; 0x42
 800176c:	2110      	movs	r1, #16
 800176e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2208      	movs	r2, #8
 8001780:	18ba      	adds	r2, r7, r2
 8001782:	8812      	ldrh	r2, [r2, #0]
 8001784:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2bff      	cmp	r3, #255	; 0xff
 8001794:	d911      	bls.n	80017ba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	22ff      	movs	r2, #255	; 0xff
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	045c      	lsls	r4, r3, #17
 80017a6:	230a      	movs	r3, #10
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	8819      	ldrh	r1, [r3, #0]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_I2C_Master_Transmit+0x208>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	0023      	movs	r3, r4
 80017b4:	f000 fa92 	bl	8001cdc <I2C_TransferConfig>
 80017b8:	e075      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	049c      	lsls	r4, r3, #18
 80017ce:	230a      	movs	r3, #10
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	8819      	ldrh	r1, [r3, #0]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <HAL_I2C_Master_Transmit+0x208>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	0023      	movs	r3, r4
 80017dc:	f000 fa7e 	bl	8001cdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017e0:	e061      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f000 f8f0 	bl	80019ce <I2C_WaitOnTXISFlagUntilTimeout>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e081      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d03a      	beq.n	80018a6 <HAL_I2C_Master_Transmit+0x1aa>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	2b00      	cmp	r3, #0
 8001836:	d136      	bne.n	80018a6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	0013      	movs	r3, r2
 8001842:	2200      	movs	r2, #0
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	f000 f883 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d001      	beq.n	8001852 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e053      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001856:	b29b      	uxth	r3, r3
 8001858:	2bff      	cmp	r3, #255	; 0xff
 800185a:	d911      	bls.n	8001880 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	045c      	lsls	r4, r3, #17
 800186c:	230a      	movs	r3, #10
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	8819      	ldrh	r1, [r3, #0]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	0023      	movs	r3, r4
 800187a:	f000 fa2f 	bl	8001cdc <I2C_TransferConfig>
 800187e:	e012      	b.n	80018a6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	b2da      	uxtb	r2, r3
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	049c      	lsls	r4, r3, #18
 8001894:	230a      	movs	r3, #10
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	8819      	ldrh	r1, [r3, #0]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	0023      	movs	r3, r4
 80018a2:	f000 fa1b 	bl	8001cdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d198      	bne.n	80017e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 f8c8 	bl	8001a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e01a      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2220      	movs	r2, #32
 80018ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	490c      	ldr	r1, [pc, #48]	; (8001908 <HAL_I2C_Master_Transmit+0x20c>)
 80018d8:	400a      	ands	r2, r1
 80018da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2241      	movs	r2, #65	; 0x41
 80018e0:	2120      	movs	r1, #32
 80018e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2242      	movs	r2, #66	; 0x42
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b007      	add	sp, #28
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	80002000 	.word	0x80002000
 8001908:	fe00e800 	.word	0xfe00e800

0800190c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d103      	bne.n	800192a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	2b01      	cmp	r3, #1
 8001936:	d007      	beq.n	8001948 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2101      	movs	r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	619a      	str	r2, [r3, #24]
  }
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001960:	e021      	b.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	d01e      	beq.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001968:	f7ff fbb0 	bl	80010cc <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d302      	bcc.n	800197e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d113      	bne.n	80019a6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	2220      	movs	r2, #32
 8001984:	431a      	orrs	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2241      	movs	r2, #65	; 0x41
 800198e:	2120      	movs	r1, #32
 8001990:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2242      	movs	r2, #66	; 0x42
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	4013      	ands	r3, r2
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	425a      	negs	r2, r3
 80019b6:	4153      	adcs	r3, r2
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	001a      	movs	r2, r3
 80019bc:	1dfb      	adds	r3, r7, #7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d0ce      	beq.n	8001962 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b004      	add	sp, #16
 80019cc:	bd80      	pop	{r7, pc}

080019ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019da:	e02b      	b.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f86e 	bl	8001ac4 <I2C_IsErrorOccurred>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d001      	beq.n	80019f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e029      	b.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	3301      	adds	r3, #1
 80019f4:	d01e      	beq.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f6:	f7ff fb69 	bl	80010cc <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d302      	bcc.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d113      	bne.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	2220      	movs	r2, #32
 8001a12:	431a      	orrs	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2241      	movs	r2, #65	; 0x41
 8001a1c:	2120      	movs	r1, #32
 8001a1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2242      	movs	r2, #66	; 0x42
 8001a24:	2100      	movs	r1, #0
 8001a26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e007      	b.n	8001a44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d1cc      	bne.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b004      	add	sp, #16
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a58:	e028      	b.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 f82f 	bl	8001ac4 <I2C_IsErrorOccurred>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e026      	b.n	8001abc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6e:	f7ff fb2d 	bl	80010cc <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d302      	bcc.n	8001a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d113      	bne.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	2220      	movs	r2, #32
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2241      	movs	r2, #65	; 0x41
 8001a94:	2120      	movs	r1, #32
 8001a96:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2242      	movs	r2, #66	; 0x42
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e007      	b.n	8001abc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	d1cf      	bne.n	8001a5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b08b      	sub	sp, #44	; 0x2c
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad0:	2327      	movs	r3, #39	; 0x27
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2210      	movs	r2, #16
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <I2C_IsErrorOccurred+0x2e>
 8001af0:	e08e      	b.n	8001c10 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2210      	movs	r2, #16
 8001af8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001afa:	e06c      	b.n	8001bd6 <I2C_IsErrorOccurred+0x112>
 8001afc:	2427      	movs	r4, #39	; 0x27
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	193a      	adds	r2, r7, r4
 8001b02:	7812      	ldrb	r2, [r2, #0]
 8001b04:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	d064      	beq.n	8001bd6 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b0c:	f7ff fade 	bl	80010cc <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d306      	bcc.n	8001b2a <I2C_IsErrorOccurred+0x66>
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	193a      	adds	r2, r7, r4
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d155      	bne.n	8001bd6 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	01db      	lsls	r3, r3, #7
 8001b34:	4013      	ands	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b38:	2013      	movs	r0, #19
 8001b3a:	183b      	adds	r3, r7, r0
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	2142      	movs	r1, #66	; 0x42
 8001b40:	5c52      	ldrb	r2, [r2, r1]
 8001b42:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	401a      	ands	r2, r3
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d137      	bne.n	8001bc8 <I2C_IsErrorOccurred+0x104>
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	01db      	lsls	r3, r3, #7
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d032      	beq.n	8001bc8 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8001b62:	183b      	adds	r3, r7, r0
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b20      	cmp	r3, #32
 8001b68:	d02e      	beq.n	8001bc8 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	01c9      	lsls	r1, r1, #7
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b7c:	f7ff faa6 	bl	80010cc <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b84:	e020      	b.n	8001bc8 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b86:	f7ff faa1 	bl	80010cc <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2027      	movs	r0, #39	; 0x27
 8001b92:	183a      	adds	r2, r7, r0
 8001b94:	1839      	adds	r1, r7, r0
 8001b96:	7809      	ldrb	r1, [r1, #0]
 8001b98:	7011      	strb	r1, [r2, #0]
 8001b9a:	2b19      	cmp	r3, #25
 8001b9c:	d914      	bls.n	8001bc8 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2241      	movs	r2, #65	; 0x41
 8001bae:	2120      	movs	r1, #32
 8001bb0:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2242      	movs	r2, #66	; 0x42
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8001bc2:	183b      	adds	r3, r7, r0
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d1d7      	bne.n	8001b86 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d004      	beq.n	8001bee <I2C_IsErrorOccurred+0x12a>
 8001be4:	2327      	movs	r3, #39	; 0x27
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d086      	beq.n	8001afc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001bee:	2327      	movs	r3, #39	; 0x27
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d103      	bne.n	8001c00 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4313      	orrs	r3, r2
 8001c06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c08:	2327      	movs	r3, #39	; 0x27
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d00c      	beq.n	8001c3c <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4313      	orrs	r3, r2
 8001c28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	0052      	lsls	r2, r2, #1
 8001c32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c34:	2327      	movs	r3, #39	; 0x27
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4013      	ands	r3, r2
 8001c44:	d00c      	beq.n	8001c60 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c58:	2327      	movs	r3, #39	; 0x27
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d00c      	beq.n	8001c84 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c7c:	2327      	movs	r3, #39	; 0x27
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001c84:	2327      	movs	r3, #39	; 0x27
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01d      	beq.n	8001cca <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff fe3b 	bl	800190c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	490d      	ldr	r1, [pc, #52]	; (8001cd8 <I2C_IsErrorOccurred+0x214>)
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2241      	movs	r2, #65	; 0x41
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2242      	movs	r2, #66	; 0x42
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001cca:	2327      	movs	r3, #39	; 0x27
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	781b      	ldrb	r3, [r3, #0]
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b00b      	add	sp, #44	; 0x2c
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	fe00e800 	.word	0xfe00e800

08001cdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	0008      	movs	r0, r1
 8001ce6:	0011      	movs	r1, r2
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	240a      	movs	r4, #10
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	1c02      	adds	r2, r0, #0
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	2009      	movs	r0, #9
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	1c0a      	adds	r2, r1, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	059b      	lsls	r3, r3, #22
 8001d00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d02:	183b      	adds	r3, r7, r0
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	0419      	lsls	r1, r3, #16
 8001d08:	23ff      	movs	r3, #255	; 0xff
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	4313      	orrs	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	0d51      	lsrs	r1, r2, #21
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	00d2      	lsls	r2, r2, #3
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	4907      	ldr	r1, [pc, #28]	; (8001d4c <I2C_TransferConfig+0x70>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	43d2      	mvns	r2, r2
 8001d34:	401a      	ands	r2, r3
 8001d36:	0011      	movs	r1, r2
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b007      	add	sp, #28
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	03ff63ff 	.word	0x03ff63ff

08001d50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2241      	movs	r2, #65	; 0x41
 8001d5e:	5c9b      	ldrb	r3, [r3, r2]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d138      	bne.n	8001dd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	5c9b      	ldrb	r3, [r3, r2]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e032      	b.n	8001dda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2240      	movs	r2, #64	; 0x40
 8001d78:	2101      	movs	r1, #1
 8001d7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2241      	movs	r2, #65	; 0x41
 8001d80:	2124      	movs	r1, #36	; 0x24
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	438a      	bics	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4911      	ldr	r1, [pc, #68]	; (8001de4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2241      	movs	r2, #65	; 0x41
 8001dc8:	2120      	movs	r1, #32
 8001dca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
  }
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	ffffefff 	.word	0xffffefff

08001de8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2241      	movs	r2, #65	; 0x41
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d139      	bne.n	8001e72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2240      	movs	r2, #64	; 0x40
 8001e02:	5c9b      	ldrb	r3, [r3, r2]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e033      	b.n	8001e74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2241      	movs	r2, #65	; 0x41
 8001e18:	2124      	movs	r1, #36	; 0x24
 8001e1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2101      	movs	r1, #1
 8001e28:	438a      	bics	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2101      	movs	r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2241      	movs	r2, #65	; 0x41
 8001e62:	2120      	movs	r1, #32
 8001e64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	fffff0ff 	.word	0xfffff0ff

08001e80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0f2      	b.n	8002078 <HAL_I2S_Init+0x1f8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2235      	movs	r2, #53	; 0x35
 8001e96:	5c9b      	ldrb	r3, [r3, r2]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2234      	movs	r2, #52	; 0x34
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7fe ffeb 	bl	8000e84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2235      	movs	r2, #53	; 0x35
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69da      	ldr	r2, [r3, #28]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	496f      	ldr	r1, [pc, #444]	; (8002080 <HAL_I2S_Init+0x200>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_I2S_Init+0x58>
 8001ed6:	e083      	b.n	8001fe0 <HAL_I2S_Init+0x160>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e001      	b.n	8001eea <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d802      	bhi.n	8001ef8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
    }

#if defined (RCC_PERIPHCLK_I2S2)
    if (hi2s->Instance == SPI1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a61      	ldr	r2, [pc, #388]	; (8002084 <HAL_I2S_Init+0x204>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d107      	bne.n	8001f12 <HAL_I2S_Init+0x92>
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 f982 	bl	8003210 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e006      	b.n	8001f20 <HAL_I2S_Init+0xa0>
    }
    else /* SPI2 case */
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	0018      	movs	r0, r3
 8001f18:	f001 f97a 	bl	8003210 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d131      	bne.n	8001f90 <HAL_I2S_Init+0x110>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d016      	beq.n	8001f62 <HAL_I2S_Init+0xe2>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7fe f8e2 	bl	8000104 <__udivsi3>
 8001f40:	0003      	movs	r3, r0
 8001f42:	001a      	movs	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	189b      	adds	r3, r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	0019      	movs	r1, r3
 8001f54:	0010      	movs	r0, r2
 8001f56:	f7fe f8d5 	bl	8000104 <__udivsi3>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	3305      	adds	r3, #5
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	e02a      	b.n	8001fb8 <HAL_I2S_Init+0x138>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	0019      	movs	r1, r3
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7fe f8cb 	bl	8000104 <__udivsi3>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	001a      	movs	r2, r3
 8001f72:	0013      	movs	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	0019      	movs	r1, r3
 8001f82:	0010      	movs	r0, r2
 8001f84:	f7fe f8be 	bl	8000104 <__udivsi3>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	3305      	adds	r3, #5
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e013      	b.n	8001fb8 <HAL_I2S_Init+0x138>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f90:	6979      	ldr	r1, [r7, #20]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7fe f8b6 	bl	8000104 <__udivsi3>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	189b      	adds	r3, r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f7fe f8a9 	bl	8000104 <__udivsi3>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	3305      	adds	r3, #5
 8001fb6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	210a      	movs	r1, #10
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7fe f8a1 	bl	8000104 <__udivsi3>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_I2S_Init+0x168>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d902      	bls.n	8001ff4 <HAL_I2S_Init+0x174>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	d907      	bls.n	8002004 <HAL_I2S_Init+0x184>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e039      	b.n	8002078 <HAL_I2S_Init+0x1f8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	431a      	orrs	r2, r3
 800200c:	0011      	movs	r1, r2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	430a      	orrs	r2, r1
 8002016:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_I2S_Init+0x200>)
 8002020:	401a      	ands	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6859      	ldr	r1, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	4319      	orrs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4319      	orrs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	430b      	orrs	r3, r1
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	0109      	lsls	r1, r1, #4
 8002042:	430a      	orrs	r2, r1
 8002044:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b30      	cmp	r3, #48	; 0x30
 800204c:	d003      	beq.n	8002056 <HAL_I2S_Init+0x1d6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2bb0      	cmp	r3, #176	; 0xb0
 8002054:	d108      	bne.n	8002068 <HAL_I2S_Init+0x1e8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69da      	ldr	r2, [r3, #28]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0149      	lsls	r1, r1, #5
 8002064:	430a      	orrs	r2, r1
 8002066:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2235      	movs	r2, #53	; 0x35
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b008      	add	sp, #32
 800207e:	bd80      	pop	{r7, pc}
 8002080:	fffff040 	.word	0xfffff040
 8002084:	40013000 	.word	0x40013000

08002088 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_I2S_Transmit+0x1e>
 800209e:	1dbb      	adds	r3, r7, #6
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e0e2      	b.n	8002270 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2234      	movs	r2, #52	; 0x34
 80020ae:	5c9b      	ldrb	r3, [r3, r2]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_I2S_Transmit+0x32>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e0da      	b.n	8002270 <HAL_I2S_Transmit+0x1e8>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2234      	movs	r2, #52	; 0x34
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2235      	movs	r2, #53	; 0x35
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2234      	movs	r2, #52	; 0x34
 80020d2:	2100      	movs	r1, #0
 80020d4:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0ca      	b.n	8002270 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2235      	movs	r2, #53	; 0x35
 80020de:	2103      	movs	r1, #3
 80020e0:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2207      	movs	r2, #7
 80020f6:	4013      	ands	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d002      	beq.n	8002106 <HAL_I2S_Transmit+0x7e>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b05      	cmp	r3, #5
 8002104:	d10c      	bne.n	8002120 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	18db      	adds	r3, r3, r3
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002112:	1dbb      	adds	r3, r7, #6
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	18db      	adds	r3, r3, r3
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	845a      	strh	r2, [r3, #34]	; 0x22
 800211e:	e007      	b.n	8002130 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1dba      	adds	r2, r7, #6
 8002124:	8812      	ldrh	r2, [r2, #0]
 8002126:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1dba      	adds	r2, r7, #6
 800212c:	8812      	ldrh	r2, [r2, #0]
 800212e:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	401a      	ands	r2, r3
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	429a      	cmp	r2, r3
 800214a:	d008      	beq.n	800215e <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	00c9      	lsls	r1, r1, #3
 800215a:	430a      	orrs	r2, r1
 800215c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	2102      	movs	r1, #2
 8002166:	f000 f887 	bl	8002278 <I2S_WaitFlagStateUntilTimeout>
 800216a:	1e03      	subs	r3, r0, #0
 800216c:	d04d      	beq.n	800220a <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	2201      	movs	r2, #1
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2235      	movs	r2, #53	; 0x35
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2234      	movs	r2, #52	; 0x34
 8002186:	2100      	movs	r1, #0
 8002188:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e070      	b.n	8002270 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	881a      	ldrh	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	1c9a      	adds	r2, r3, #2
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	2102      	movs	r1, #2
 80021ba:	f000 f85d 	bl	8002278 <I2S_WaitFlagStateUntilTimeout>
 80021be:	1e03      	subs	r3, r0, #0
 80021c0:	d00f      	beq.n	80021e2 <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	2201      	movs	r2, #1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2235      	movs	r2, #53	; 0x35
 80021d2:	2101      	movs	r1, #1
 80021d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2234      	movs	r2, #52	; 0x34
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e046      	b.n	8002270 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2208      	movs	r2, #8
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d10c      	bne.n	800220a <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	2204      	movs	r2, #4
 8002204:	431a      	orrs	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1bc      	bne.n	800218e <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	23c0      	movs	r3, #192	; 0xc0
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4013      	ands	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	23c0      	movs	r3, #192	; 0xc0
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	401a      	ands	r2, r3
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	429a      	cmp	r2, r3
 800222c:	d117      	bne.n	800225e <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	f000 f81f 	bl	8002278 <I2S_WaitFlagStateUntilTimeout>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d00f      	beq.n	800225e <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	2201      	movs	r2, #1
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2235      	movs	r2, #53	; 0x35
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2234      	movs	r2, #52	; 0x34
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e008      	b.n	8002270 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2235      	movs	r2, #53	; 0x35
 8002262:	2101      	movs	r1, #1
 8002264:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2234      	movs	r2, #52	; 0x34
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b006      	add	sp, #24
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	1dfb      	adds	r3, r7, #7
 8002286:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002288:	f7fe ff20 	bl	80010cc <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002290:	e017      	b.n	80022c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	d014      	beq.n	80022c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002298:	f7fe ff18 	bl	80010cc <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d902      	bls.n	80022ae <I2S_WaitFlagStateUntilTimeout+0x36>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2235      	movs	r2, #53	; 0x35
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2234      	movs	r2, #52	; 0x34
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e00f      	b.n	80022e2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	425a      	negs	r2, r3
 80022d2:	4153      	adcs	r3, r2
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	001a      	movs	r2, r3
 80022d8:	1dfb      	adds	r3, r7, #7
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1d8      	bne.n	8002292 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b006      	add	sp, #24
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a19      	ldr	r2, [pc, #100]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d11f      	bne.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	0013      	movs	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	189b      	adds	r3, r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4912      	ldr	r1, [pc, #72]	; (8002368 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800231e:	0018      	movs	r0, r3
 8002320:	f7fd fef0 	bl	8000104 <__udivsi3>
 8002324:	0003      	movs	r3, r0
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800232a:	e008      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3b01      	subs	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e001      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e009      	b.n	8002352 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	401a      	ands	r2, r3
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	429a      	cmp	r2, r3
 800234e:	d0ed      	beq.n	800232c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40007000 	.word	0x40007000
 8002360:	fffff9ff 	.word	0xfffff9ff
 8002364:	20000000 	.word	0x20000000
 8002368:	000f4240 	.word	0x000f4240

0800236c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	23e0      	movs	r3, #224	; 0xe0
 8002376:	01db      	lsls	r3, r3, #7
 8002378:	4013      	ands	r3, r2
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000

08002384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	f000 fb50 	bl	8002a38 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	d100      	bne.n	80023a4 <HAL_RCC_OscConfig+0x20>
 80023a2:	e07c      	b.n	800249e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a4:	4bc3      	ldr	r3, [pc, #780]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2238      	movs	r2, #56	; 0x38
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ae:	4bc1      	ldr	r3, [pc, #772]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2203      	movs	r2, #3
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_OscConfig+0x40>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d002      	beq.n	80023ca <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d10b      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ca:	4bba      	ldr	r3, [pc, #744]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	029b      	lsls	r3, r3, #10
 80023d2:	4013      	ands	r3, r2
 80023d4:	d062      	beq.n	800249c <HAL_RCC_OscConfig+0x118>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d15e      	bne.n	800249c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e32a      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_OscConfig+0x7a>
 80023ee:	4bb1      	ldr	r3, [pc, #708]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4bb0      	ldr	r3, [pc, #704]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	0249      	lsls	r1, r1, #9
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e020      	b.n	8002440 <HAL_RCC_OscConfig+0xbc>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	23a0      	movs	r3, #160	; 0xa0
 8002404:	02db      	lsls	r3, r3, #11
 8002406:	429a      	cmp	r2, r3
 8002408:	d10e      	bne.n	8002428 <HAL_RCC_OscConfig+0xa4>
 800240a:	4baa      	ldr	r3, [pc, #680]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4ba9      	ldr	r3, [pc, #676]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	02c9      	lsls	r1, r1, #11
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	4ba6      	ldr	r3, [pc, #664]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4ba5      	ldr	r3, [pc, #660]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0249      	lsls	r1, r1, #9
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xbc>
 8002428:	4ba2      	ldr	r3, [pc, #648]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4ba1      	ldr	r3, [pc, #644]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800242e:	49a2      	ldr	r1, [pc, #648]	; (80026b8 <HAL_RCC_OscConfig+0x334>)
 8002430:	400a      	ands	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	4b9f      	ldr	r3, [pc, #636]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b9e      	ldr	r3, [pc, #632]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800243a:	49a0      	ldr	r1, [pc, #640]	; (80026bc <HAL_RCC_OscConfig+0x338>)
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d014      	beq.n	8002472 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fe40 	bl	80010cc <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002452:	f7fe fe3b 	bl	80010cc <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e2e9      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002464:	4b93      	ldr	r3, [pc, #588]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	4013      	ands	r3, r2
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0xce>
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fe2b 	bl	80010cc <HAL_GetTick>
 8002476:	0003      	movs	r3, r0
 8002478:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fe26 	bl	80010cc <HAL_GetTick>
 8002480:	0002      	movs	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e2d4      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	029b      	lsls	r3, r3, #10
 8002496:	4013      	ands	r3, r2
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0xf8>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2202      	movs	r2, #2
 80024a4:	4013      	ands	r3, r2
 80024a6:	d100      	bne.n	80024aa <HAL_RCC_OscConfig+0x126>
 80024a8:	e099      	b.n	80025de <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2238      	movs	r2, #56	; 0x38
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b4:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2203      	movs	r2, #3
 80024ba:	4013      	ands	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0x146>
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d135      	bne.n	800253c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d0:	4b78      	ldr	r3, [pc, #480]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	; 0x80
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4013      	ands	r3, r2
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_OscConfig+0x164>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e2a7      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a74      	ldr	r2, [pc, #464]	; (80026c0 <HAL_RCC_OscConfig+0x33c>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	021a      	lsls	r2, r3, #8
 80024f8:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d112      	bne.n	800252a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002504:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6e      	ldr	r2, [pc, #440]	; (80026c4 <HAL_RCC_OscConfig+0x340>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002518:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0adb      	lsrs	r3, r3, #11
 800251e:	2207      	movs	r2, #7
 8002520:	4013      	ands	r3, r2
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x344>)
 8002524:	40da      	lsrs	r2, r3
 8002526:	4b69      	ldr	r3, [pc, #420]	; (80026cc <HAL_RCC_OscConfig+0x348>)
 8002528:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800252a:	4b69      	ldr	r3, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x34c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	f7fe fd70 	bl	8001014 <HAL_InitTick>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d051      	beq.n	80025dc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e27d      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d030      	beq.n	80025a6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002544:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5e      	ldr	r2, [pc, #376]	; (80026c4 <HAL_RCC_OscConfig+0x340>)
 800254a:	4013      	ands	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	0049      	lsls	r1, r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fdb1 	bl	80010cc <HAL_GetTick>
 800256a:	0003      	movs	r3, r0
 800256c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe fdac 	bl	80010cc <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e25a      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002582:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4013      	ands	r3, r2
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a4b      	ldr	r2, [pc, #300]	; (80026c0 <HAL_RCC_OscConfig+0x33c>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	021a      	lsls	r2, r3, #8
 800259e:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	e01b      	b.n	80025de <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80025ac:	4949      	ldr	r1, [pc, #292]	; (80026d4 <HAL_RCC_OscConfig+0x350>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fd8b 	bl	80010cc <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fd86 	bl	80010cc <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e234      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4013      	ands	r3, r2
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x238>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2208      	movs	r2, #8
 80025e4:	4013      	ands	r3, r2
 80025e6:	d047      	beq.n	8002678 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2238      	movs	r2, #56	; 0x38
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b18      	cmp	r3, #24
 80025f2:	d10a      	bne.n	800260a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025f4:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d03c      	beq.n	8002678 <HAL_RCC_OscConfig+0x2f4>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d138      	bne.n	8002678 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e216      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d019      	beq.n	8002646 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002612:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002614:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fd55 	bl	80010cc <HAL_GetTick>
 8002622:	0003      	movs	r3, r0
 8002624:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7fe fd50 	bl	80010cc <HAL_GetTick>
 800262c:	0002      	movs	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1fe      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800263c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263e:	2202      	movs	r2, #2
 8002640:	4013      	ands	r3, r2
 8002642:	d0f1      	beq.n	8002628 <HAL_RCC_OscConfig+0x2a4>
 8002644:	e018      	b.n	8002678 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800264c:	2101      	movs	r1, #1
 800264e:	438a      	bics	r2, r1
 8002650:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7fe fd3b 	bl	80010cc <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe fd36 	bl	80010cc <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1e4      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	d1f1      	bne.n	800265c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2204      	movs	r2, #4
 800267e:	4013      	ands	r3, r2
 8002680:	d100      	bne.n	8002684 <HAL_RCC_OscConfig+0x300>
 8002682:	e0c7      	b.n	8002814 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002684:	231f      	movs	r3, #31
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2238      	movs	r2, #56	; 0x38
 8002692:	4013      	ands	r3, r2
 8002694:	2b20      	cmp	r3, #32
 8002696:	d11f      	bne.n	80026d8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x330>)
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d100      	bne.n	80026a4 <HAL_RCC_OscConfig+0x320>
 80026a2:	e0b7      	b.n	8002814 <HAL_RCC_OscConfig+0x490>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d000      	beq.n	80026ae <HAL_RCC_OscConfig+0x32a>
 80026ac:	e0b2      	b.n	8002814 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1c2      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	40021000 	.word	0x40021000
 80026b8:	fffeffff 	.word	0xfffeffff
 80026bc:	fffbffff 	.word	0xfffbffff
 80026c0:	ffff80ff 	.word	0xffff80ff
 80026c4:	ffffc7ff 	.word	0xffffc7ff
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000004 	.word	0x20000004
 80026d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026d8:	4bb5      	ldr	r3, [pc, #724]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80026da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	055b      	lsls	r3, r3, #21
 80026e0:	4013      	ands	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_OscConfig+0x364>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x366>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	4bb0      	ldr	r3, [pc, #704]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80026f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f2:	4baf      	ldr	r3, [pc, #700]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0549      	lsls	r1, r1, #21
 80026f8:	430a      	orrs	r2, r1
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80026fc:	4bac      	ldr	r3, [pc, #688]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80026fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	055b      	lsls	r3, r3, #21
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800270a:	231f      	movs	r3, #31
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002712:	4ba8      	ldr	r3, [pc, #672]	; (80029b4 <HAL_RCC_OscConfig+0x630>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d11a      	bne.n	8002754 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271e:	4ba5      	ldr	r3, [pc, #660]	; (80029b4 <HAL_RCC_OscConfig+0x630>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4ba4      	ldr	r3, [pc, #656]	; (80029b4 <HAL_RCC_OscConfig+0x630>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0049      	lsls	r1, r1, #1
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800272c:	f7fe fcce 	bl	80010cc <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe fcc9 	bl	80010cc <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e177      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	4b9a      	ldr	r3, [pc, #616]	; (80029b4 <HAL_RCC_OscConfig+0x630>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x3e6>
 800275c:	4b94      	ldr	r3, [pc, #592]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800275e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002760:	4b93      	ldr	r3, [pc, #588]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002762:	2101      	movs	r1, #1
 8002764:	430a      	orrs	r2, r1
 8002766:	65da      	str	r2, [r3, #92]	; 0x5c
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x420>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x408>
 8002772:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002774:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002776:	4b8e      	ldr	r3, [pc, #568]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002778:	2104      	movs	r1, #4
 800277a:	430a      	orrs	r2, r1
 800277c:	65da      	str	r2, [r3, #92]	; 0x5c
 800277e:	4b8c      	ldr	r3, [pc, #560]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002784:	2101      	movs	r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	65da      	str	r2, [r3, #92]	; 0x5c
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x420>
 800278c:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800278e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002790:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002792:	2101      	movs	r1, #1
 8002794:	438a      	bics	r2, r1
 8002796:	65da      	str	r2, [r3, #92]	; 0x5c
 8002798:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800279a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800279c:	4b84      	ldr	r3, [pc, #528]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800279e:	2104      	movs	r1, #4
 80027a0:	438a      	bics	r2, r1
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d014      	beq.n	80027d6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fc8e 	bl	80010cc <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fc89 	bl	80010cc <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	4a7d      	ldr	r2, [pc, #500]	; (80029b8 <HAL_RCC_OscConfig+0x634>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e136      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x432>
 80027d4:	e013      	b.n	80027fe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fc79 	bl	80010cc <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027de:	e009      	b.n	80027f4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fc74 	bl	80010cc <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x634>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e121      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	4b6e      	ldr	r3, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027fe:	231f      	movs	r3, #31
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b69      	ldr	r3, [pc, #420]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800280a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800280e:	496b      	ldr	r1, [pc, #428]	; (80029bc <HAL_RCC_OscConfig+0x638>)
 8002810:	400a      	ands	r2, r1
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2220      	movs	r2, #32
 800281a:	4013      	ands	r3, r2
 800281c:	d039      	beq.n	8002892 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01b      	beq.n	800285e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002826:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b61      	ldr	r3, [pc, #388]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	03c9      	lsls	r1, r1, #15
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe fc4a 	bl	80010cc <HAL_GetTick>
 8002838:	0003      	movs	r3, r0
 800283a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283e:	f7fe fc45 	bl	80010cc <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0f3      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	4013      	ands	r3, r2
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x4ba>
 800285c:	e019      	b.n	8002892 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002864:	4956      	ldr	r1, [pc, #344]	; (80029c0 <HAL_RCC_OscConfig+0x63c>)
 8002866:	400a      	ands	r2, r1
 8002868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286a:	f7fe fc2f 	bl	80010cc <HAL_GetTick>
 800286e:	0003      	movs	r3, r0
 8002870:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002874:	f7fe fc2a 	bl	80010cc <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e0d8      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002886:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	4013      	ands	r3, r2
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d100      	bne.n	800289c <HAL_RCC_OscConfig+0x518>
 800289a:	e0cc      	b.n	8002a36 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289c:	4b44      	ldr	r3, [pc, #272]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2238      	movs	r2, #56	; 0x38
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d100      	bne.n	80028aa <HAL_RCC_OscConfig+0x526>
 80028a8:	e07b      	b.n	80029a2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d156      	bne.n	8002960 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80028b8:	4942      	ldr	r1, [pc, #264]	; (80029c4 <HAL_RCC_OscConfig+0x640>)
 80028ba:	400a      	ands	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fc05 	bl	80010cc <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fc00 	bl	80010cc <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0ae      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	049b      	lsls	r3, r3, #18
 80028e2:	4013      	ands	r3, r2
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e6:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4a37      	ldr	r2, [pc, #220]	; (80029c8 <HAL_RCC_OscConfig+0x644>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	431a      	orrs	r2, r3
 8002914:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002916:	430a      	orrs	r2, r1
 8002918:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800291a:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0449      	lsls	r1, r1, #17
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002928:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	0549      	lsls	r1, r1, #21
 8002932:	430a      	orrs	r2, r1
 8002934:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7fe fbc9 	bl	80010cc <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fbc4 	bl	80010cc <HAL_GetTick>
 8002944:	0002      	movs	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e072      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	049b      	lsls	r3, r3, #18
 800295a:	4013      	ands	r3, r2
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x5bc>
 800295e:	e06a      	b.n	8002a36 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002966:	4917      	ldr	r1, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x640>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fbae 	bl	80010cc <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002976:	f7fe fba9 	bl	80010cc <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e057      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	049b      	lsls	r3, r3, #18
 8002990:	4013      	ands	r3, r2
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_OscConfig+0x62c>)
 800299a:	490c      	ldr	r1, [pc, #48]	; (80029cc <HAL_RCC_OscConfig+0x648>)
 800299c:	400a      	ands	r2, r1
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	e049      	b.n	8002a36 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e044      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	00001388 	.word	0x00001388
 80029bc:	efffffff 	.word	0xefffffff
 80029c0:	ffbfffff 	.word	0xffbfffff
 80029c4:	feffffff 	.word	0xfeffffff
 80029c8:	11c1808c 	.word	0x11c1808c
 80029cc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x6bc>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2203      	movs	r2, #3
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d126      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2270      	movs	r2, #112	; 0x70
 80029e8:	401a      	ands	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11f      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	23fe      	movs	r3, #254	; 0xfe
 80029f6:	01db      	lsls	r3, r3, #7
 80029f8:	401a      	ands	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d116      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	23f8      	movs	r3, #248	; 0xf8
 8002a08:	039b      	lsls	r3, r3, #14
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d10e      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	23e0      	movs	r3, #224	; 0xe0
 8002a18:	051b      	lsls	r3, r3, #20
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	0f5b      	lsrs	r3, r3, #29
 8002a28:	075a      	lsls	r2, r3, #29
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b008      	add	sp, #32
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0e9      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d91e      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fb28 	bl	80010cc <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a80:	e009      	b.n	8002a96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a82:	f7fe fb23 	bl	80010cc <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	; (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0ca      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2207      	movs	r2, #7
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1ee      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d015      	beq.n	8002ada <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d006      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ab8:	4b60      	ldr	r3, [pc, #384]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	21e0      	movs	r1, #224	; 0xe0
 8002ac0:	01c9      	lsls	r1, r1, #7
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	4a5d      	ldr	r2, [pc, #372]	; (8002c40 <HAL_RCC_ClockConfig+0x1fc>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b59      	ldr	r3, [pc, #356]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d057      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	4013      	ands	r3, r2
 8002af6:	d12b      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e097      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b04:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	049b      	lsls	r3, r3, #18
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d11f      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e08b      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1c:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	d113      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e07f      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b34:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	2202      	movs	r2, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e074      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e06d      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b50:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2207      	movs	r2, #7
 8002b56:	4393      	bics	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fab2 	bl	80010cc <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6c:	e009      	b.n	8002b82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7fe faad 	bl	80010cc <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e054      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2238      	movs	r2, #56	; 0x38
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1ec      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d21e      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	4393      	bics	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fa8a 	bl	80010cc <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbe:	f7fe fa85 	bl	80010cc <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e02c      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1ee      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2204      	movs	r2, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <HAL_RCC_ClockConfig+0x200>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bfe:	f000 f829 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c02:	0001      	movs	r1, r0
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x204>)
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	58d3      	ldr	r3, [r2, r3]
 8002c14:	221f      	movs	r2, #31
 8002c16:	4013      	ands	r3, r2
 8002c18:	000a      	movs	r2, r1
 8002c1a:	40da      	lsrs	r2, r3
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x208>)
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_ClockConfig+0x20c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7fe f9f5 	bl	8001014 <HAL_InitTick>
 8002c2a:	0003      	movs	r3, r0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40022000 	.word	0x40022000
 8002c38:	00001388 	.word	0x00001388
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	fffff0ff 	.word	0xfffff0ff
 8002c44:	ffff8fff 	.word	0xffff8fff
 8002c48:	080173b0 	.word	0x080173b0
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5a:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2238      	movs	r2, #56	; 0x38
 8002c60:	4013      	ands	r3, r2
 8002c62:	d10f      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0adb      	lsrs	r3, r3, #11
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	0013      	movs	r3, r2
 8002c74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	4835      	ldr	r0, [pc, #212]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c7a:	f7fd fa43 	bl	8000104 <__udivsi3>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e05d      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2238      	movs	r2, #56	; 0x38
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e054      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2238      	movs	r2, #56	; 0x38
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d138      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ca2:	4b2a      	ldr	r3, [pc, #168]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d10d      	bne.n	8002cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4824      	ldr	r0, [pc, #144]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cc4:	f7fd fa1e 	bl	8000104 <__udivsi3>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	0019      	movs	r1, r3
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	227f      	movs	r2, #127	; 0x7f
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	434b      	muls	r3, r1
 8002cd8:	617b      	str	r3, [r7, #20]
        break;
 8002cda:	e00d      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	481c      	ldr	r0, [pc, #112]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ce0:	f7fd fa10 	bl	8000104 <__udivsi3>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	227f      	movs	r2, #127	; 0x7f
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	434b      	muls	r3, r1
 8002cf4:	617b      	str	r3, [r7, #20]
        break;
 8002cf6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0f5b      	lsrs	r3, r3, #29
 8002cfe:	2207      	movs	r2, #7
 8002d00:	4013      	ands	r3, r2
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7fd f9fb 	bl	8000104 <__udivsi3>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e015      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2238      	movs	r2, #56	; 0x38
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d103      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2238      	movs	r2, #56	; 0x38
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b18      	cmp	r3, #24
 8002d32:	d103      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d34:	23fa      	movs	r3, #250	; 0xfa
 8002d36:	01db      	lsls	r3, r3, #7
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	e001      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d40:	693b      	ldr	r3, [r7, #16]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b006      	add	sp, #24
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	007a1200 	.word	0x007a1200

08002d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	20000000 	.word	0x20000000

08002d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d70:	f7ff fff2 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d74:	0004      	movs	r4, r0
 8002d76:	f7ff faf9 	bl	800236c <LL_RCC_GetAPB1Prescaler>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	0b1a      	lsrs	r2, r3, #12
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	58d3      	ldr	r3, [r2, r3]
 8002d84:	221f      	movs	r2, #31
 8002d86:	4013      	ands	r3, r2
 8002d88:	40dc      	lsrs	r4, r3
 8002d8a:	0023      	movs	r3, r4
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bdb0      	pop	{r4, r5, r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	080173f0 	.word	0x080173f0

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002da0:	2313      	movs	r3, #19
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da8:	2312      	movs	r3, #18
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	4013      	ands	r3, r2
 8002dba:	d100      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002dbc:	e0ad      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2011      	movs	r0, #17
 8002dc0:	183b      	adds	r3, r7, r0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	055b      	lsls	r3, r3, #21
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d110      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd6:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	0549      	lsls	r1, r1, #21
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	055b      	lsls	r3, r3, #21
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df4:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002dfa:	2180      	movs	r1, #128	; 0x80
 8002dfc:	0049      	lsls	r1, r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e02:	f7fe f963 	bl	80010cc <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe f95e 	bl	80010cc <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d904      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e1a:	2313      	movs	r3, #19
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2203      	movs	r2, #3
 8002e20:	701a      	strb	r2, [r3, #0]
        break;
 8002e22:	e005      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d0ed      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e30:	2313      	movs	r3, #19
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d15e      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e3e:	23c0      	movs	r3, #192	; 0xc0
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d019      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d014      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	4a24      	ldr	r2, [pc, #144]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	0249      	lsls	r1, r1, #9
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e72:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e74:	491e      	ldr	r1, [pc, #120]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002e76:	400a      	ands	r2, r1
 8002e78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d016      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f920 	bl	80010cc <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e90:	e00c      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe f91b 	bl	80010cc <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d904      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ea2:	2313      	movs	r3, #19
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	701a      	strb	r2, [r3, #0]
            break;
 8002eaa:	e004      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eac:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d0ed      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002eb6:	2313      	movs	r3, #19
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ed4:	e016      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed6:	2312      	movs	r3, #18
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2213      	movs	r2, #19
 8002edc:	18ba      	adds	r2, r7, r2
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e00f      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	fffffcff 	.word	0xfffffcff
 8002ef0:	fffeffff 	.word	0xfffeffff
 8002ef4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2213      	movs	r2, #19
 8002efe:	18ba      	adds	r2, r7, r2
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f04:	2311      	movs	r3, #17
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0e:	4bb6      	ldr	r3, [pc, #728]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f12:	4bb5      	ldr	r3, [pc, #724]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f14:	49b5      	ldr	r1, [pc, #724]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f24:	4bb0      	ldr	r3, [pc, #704]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4bad      	ldr	r3, [pc, #692]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f42:	4ba9      	ldr	r3, [pc, #676]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	220c      	movs	r2, #12
 8002f48:	4393      	bics	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4ba5      	ldr	r3, [pc, #660]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f60:	4ba1      	ldr	r3, [pc, #644]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	2230      	movs	r2, #48	; 0x30
 8002f66:	4393      	bics	r3, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	4b9e      	ldr	r3, [pc, #632]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f70:	430a      	orrs	r2, r1
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f7e:	4b9a      	ldr	r3, [pc, #616]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	4a9b      	ldr	r2, [pc, #620]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	4b96      	ldr	r3, [pc, #600]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	015b      	lsls	r3, r3, #5
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002f9e:	4b92      	ldr	r3, [pc, #584]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	4a94      	ldr	r2, [pc, #592]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	4b8e      	ldr	r3, [pc, #568]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fbe:	4b8a      	ldr	r3, [pc, #552]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	4a8d      	ldr	r2, [pc, #564]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fcc:	4b86      	ldr	r3, [pc, #536]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fde:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	4a86      	ldr	r2, [pc, #536]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	4b7e      	ldr	r3, [pc, #504]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ffc:	4b7a      	ldr	r3, [pc, #488]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	4a7f      	ldr	r2, [pc, #508]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	4b77      	ldr	r3, [pc, #476]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800300c:	430a      	orrs	r2, r1
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800301a:	4b73      	ldr	r3, [pc, #460]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	4a79      	ldr	r2, [pc, #484]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	4b6f      	ldr	r3, [pc, #444]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800302a:	430a      	orrs	r2, r1
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	01db      	lsls	r3, r3, #7
 8003036:	4013      	ands	r3, r2
 8003038:	d015      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800303a:	4b6b      	ldr	r3, [pc, #428]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	0899      	lsrs	r1, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003046:	4b68      	ldr	r3, [pc, #416]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003048:	430a      	orrs	r2, r1
 800304a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	05db      	lsls	r3, r3, #23
 8003054:	429a      	cmp	r2, r3
 8003056:	d106      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003058:	4b63      	ldr	r3, [pc, #396]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	0249      	lsls	r1, r1, #9
 8003062:	430a      	orrs	r2, r1
 8003064:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	031b      	lsls	r3, r3, #12
 800306e:	4013      	ands	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003072:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	4393      	bics	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003082:	430a      	orrs	r2, r1
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	039b      	lsls	r3, r3, #14
 800308e:	4013      	ands	r3, r2
 8003090:	d016      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003092:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003098:	4013      	ands	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a0:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a2:	430a      	orrs	r2, r1
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	03db      	lsls	r3, r3, #15
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d106      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030b2:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	0449      	lsls	r1, r1, #17
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	03db      	lsls	r3, r3, #15
 80030c8:	4013      	ands	r3, r2
 80030ca:	d016      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030cc:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	4a4e      	ldr	r2, [pc, #312]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030da:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030dc:	430a      	orrs	r2, r1
 80030de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	045b      	lsls	r3, r3, #17
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d106      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030ec:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	0449      	lsls	r1, r1, #17
 80030f6:	430a      	orrs	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4013      	ands	r3, r2
 8003104:	d014      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003106:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	2203      	movs	r2, #3
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003116:	430a      	orrs	r2, r1
 8003118:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	0249      	lsls	r1, r1, #9
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	019b      	lsls	r3, r3, #6
 8003138:	4013      	ands	r3, r2
 800313a:	d014      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	220c      	movs	r2, #12
 8003142:	4393      	bics	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800314c:	430a      	orrs	r2, r1
 800314e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b04      	cmp	r3, #4
 8003156:	d106      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003158:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	0249      	lsls	r1, r1, #9
 8003162:	430a      	orrs	r2, r1
 8003164:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	045b      	lsls	r3, r3, #17
 800316e:	4013      	ands	r3, r2
 8003170:	d016      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003182:	430a      	orrs	r2, r1
 8003184:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	429a      	cmp	r2, r3
 8003190:	d106      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003198:	2180      	movs	r1, #128	; 0x80
 800319a:	0449      	lsls	r1, r1, #17
 800319c:	430a      	orrs	r2, r1
 800319e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	049b      	lsls	r3, r3, #18
 80031a8:	4013      	ands	r3, r2
 80031aa:	d016      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031bc:	430a      	orrs	r2, r1
 80031be:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d106      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	0449      	lsls	r1, r1, #17
 80031d6:	430a      	orrs	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031da:	2312      	movs	r3, #18
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	781b      	ldrb	r3, [r3, #0]
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b006      	add	sp, #24
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	efffffff 	.word	0xefffffff
 80031f0:	fffff3ff 	.word	0xfffff3ff
 80031f4:	fffffcff 	.word	0xfffffcff
 80031f8:	fff3ffff 	.word	0xfff3ffff
 80031fc:	ffcfffff 	.word	0xffcfffff
 8003200:	ffffcfff 	.word	0xffffcfff
 8003204:	ffff3fff 	.word	0xffff3fff
 8003208:	ffbfffff 	.word	0xffbfffff
 800320c:	feffffff 	.word	0xfeffffff

08003210 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	029b      	lsls	r3, r3, #10
 8003222:	429a      	cmp	r2, r3
 8003224:	d13b      	bne.n	800329e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003226:	4be2      	ldr	r3, [pc, #904]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800322a:	23c0      	movs	r3, #192	; 0xc0
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003232:	4bdf      	ldr	r3, [pc, #892]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2202      	movs	r2, #2
 8003238:	4013      	ands	r3, r2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d109      	bne.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	429a      	cmp	r2, r3
 8003246:	d104      	bne.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	f000 fcfc 	bl	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003252:	4bd7      	ldr	r3, [pc, #860]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	2202      	movs	r2, #2
 8003258:	4013      	ands	r3, r2
 800325a:	2b02      	cmp	r3, #2
 800325c:	d109      	bne.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	429a      	cmp	r2, r3
 8003266:	d104      	bne.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    {
      frequency = LSI_VALUE;
 8003268:	23fa      	movs	r3, #250	; 0xfa
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	f000 fcec 	bl	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003272:	4bcf      	ldr	r3, [pc, #828]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	029b      	lsls	r3, r3, #10
 800327a:	401a      	ands	r2, r3
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	029b      	lsls	r3, r3, #10
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8003284:	f000 fce1 	bl	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8003292:	f000 fcda 	bl	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    {
      frequency = HSE_VALUE / 32U;
 8003296:	4bc7      	ldr	r3, [pc, #796]	; (80035b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>)
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	f000 fcd6 	bl	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800329e:	4bc4      	ldr	r3, [pc, #784]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2203      	movs	r2, #3
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d102      	bne.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    {
      pllvco = HSI_VALUE;
 80032aa:	4bc3      	ldr	r3, [pc, #780]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e00a      	b.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80032b0:	4bbf      	ldr	r3, [pc, #764]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2203      	movs	r2, #3
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d102      	bne.n	80032c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
      pllvco = HSE_VALUE;
 80032bc:	4bbf      	ldr	r3, [pc, #764]	; (80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>)
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	e001      	b.n	80032c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
    }
    else /* No source */
    {
      pllvco = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80032c6:	4bba      	ldr	r3, [pc, #744]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	2207      	movs	r2, #7
 80032ce:	4013      	ands	r3, r2
 80032d0:	3301      	adds	r3, #1
 80032d2:	0019      	movs	r1, r3
 80032d4:	6938      	ldr	r0, [r7, #16]
 80032d6:	f7fc ff15 	bl	8000104 <__udivsi3>
 80032da:	0003      	movs	r3, r0
 80032dc:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	049b      	lsls	r3, r3, #18
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d101      	bne.n	80032ec <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80032e8:	f000 fc43 	bl	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	049b      	lsls	r3, r3, #18
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d901      	bls.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 80032f6:	f000 fc7c 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	045b      	lsls	r3, r3, #17
 8003300:	429a      	cmp	r2, r3
 8003302:	d101      	bne.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8003304:	f000 fbe0 	bl	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	045b      	lsls	r3, r3, #17
 800330e:	429a      	cmp	r2, r3
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8003312:	f000 fc6e 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	03db      	lsls	r3, r3, #15
 800331c:	429a      	cmp	r2, r3
 800331e:	d101      	bne.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8003320:	f000 fba1 	bl	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	03db      	lsls	r3, r3, #15
 800332a:	429a      	cmp	r2, r3
 800332c:	d901      	bls.n	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800332e:	f000 fc60 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	039b      	lsls	r3, r3, #14
 8003338:	429a      	cmp	r2, r3
 800333a:	d101      	bne.n	8003340 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800333c:	f000 fb62 	bl	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	039b      	lsls	r3, r3, #14
 8003346:	429a      	cmp	r2, r3
 8003348:	d901      	bls.n	800334e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800334a:	f000 fc52 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	031b      	lsls	r3, r3, #12
 8003354:	429a      	cmp	r2, r3
 8003356:	d100      	bne.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003358:	e115      	b.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	031b      	lsls	r3, r3, #12
 8003360:	429a      	cmp	r2, r3
 8003362:	d901      	bls.n	8003368 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003364:	f000 fc45 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	01db      	lsls	r3, r3, #7
 800336e:	429a      	cmp	r2, r3
 8003370:	d100      	bne.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8003372:	e1ac      	b.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	01db      	lsls	r3, r3, #7
 800337a:	429a      	cmp	r2, r3
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 800337e:	f000 fc38 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	019b      	lsls	r3, r3, #6
 8003388:	429a      	cmp	r2, r3
 800338a:	d100      	bne.n	800338e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800338c:	e270      	b.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	019b      	lsls	r3, r3, #6
 8003394:	429a      	cmp	r2, r3
 8003396:	d901      	bls.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003398:	f000 fc2b 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	015b      	lsls	r3, r3, #5
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d100      	bne.n	80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80033a6:	e158      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	015b      	lsls	r3, r3, #5
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d901      	bls.n	80033b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80033b2:	f000 fc1e 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	429a      	cmp	r2, r3
 80033be:	d100      	bne.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80033c0:	e213      	b.n	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d901      	bls.n	80033d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 80033cc:	f000 fc11 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d100      	bne.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
 80033da:	e2d3      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 80033e6:	f000 fc04 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d100      	bne.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80033f4:	e286      	b.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d901      	bls.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003400:	f000 fbf7 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b20      	cmp	r3, #32
 8003408:	d80f      	bhi.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8003410:	f000 fbef 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b20      	cmp	r3, #32
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800341a:	f000 fbea 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	469f      	mov	pc, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d100      	bne.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8003430:	e1b0      	b.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8003432:	f000 fbde 	bl	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003436:	4b5e      	ldr	r3, [pc, #376]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	2203      	movs	r2, #3
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d105      	bne.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003446:	f7ff fc91 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 800344a:	0003      	movs	r3, r0
 800344c:	617b      	str	r3, [r7, #20]
        break;
 800344e:	f000 fbd2 	bl	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = HAL_RCC_GetSysClockFreq();
 8003458:	f7ff fbfc 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 800345c:	0003      	movs	r3, r0
 800345e:	617b      	str	r3, [r7, #20]
        break;
 8003460:	f000 fbc9 	bl	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003464:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	401a      	ands	r2, r3
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	429a      	cmp	r2, r3
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d103      	bne.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          frequency = HSI_VALUE;
 800347c:	4b4e      	ldr	r3, [pc, #312]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 800347e:	617b      	str	r3, [r7, #20]
        break;
 8003480:	f000 fbb9 	bl	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	2202      	movs	r2, #2
 800348a:	4013      	ands	r3, r2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d001      	beq.n	8003494 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 8003490:	f000 fbb1 	bl	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d001      	beq.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800349a:	f000 fbac 	bl	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
          frequency = LSE_VALUE;
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	617b      	str	r3, [r7, #20]
        break;
 80034a4:	f000 fba7 	bl	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80034a8:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	220c      	movs	r2, #12
 80034ae:	4013      	ands	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80034b8:	f7ff fc58 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 80034bc:	0003      	movs	r3, r0
 80034be:	617b      	str	r3, [r7, #20]
        break;
 80034c0:	f000 fb9b 	bl	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d105      	bne.n	80034d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
          frequency = HAL_RCC_GetSysClockFreq();
 80034ca:	f7ff fbc3 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80034ce:	0003      	movs	r3, r0
 80034d0:	617b      	str	r3, [r7, #20]
        break;
 80034d2:	f000 fb92 	bl	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	401a      	ands	r2, r3
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d106      	bne.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d103      	bne.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          frequency = HSI_VALUE;
 80034ee:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 80034f0:	617b      	str	r3, [r7, #20]
        break;
 80034f2:	f000 fb82 	bl	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	2202      	movs	r2, #2
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d001      	beq.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8003502:	f000 fb7a 	bl	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d001      	beq.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800350c:	f000 fb75 	bl	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
          frequency = LSE_VALUE;
 8003510:	2380      	movs	r3, #128	; 0x80
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	617b      	str	r3, [r7, #20]
        break;
 8003516:	f000 fb70 	bl	8003bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	2230      	movs	r2, #48	; 0x30
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
          frequency = HAL_RCC_GetPCLK1Freq();
 800352a:	f7ff fc1f 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 800352e:	0003      	movs	r3, r0
 8003530:	617b      	str	r3, [r7, #20]
        break;
 8003532:	f000 fb64 	bl	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b10      	cmp	r3, #16
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          frequency = HAL_RCC_GetSysClockFreq();
 800353c:	f7ff fb8a 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8003540:	0003      	movs	r3, r0
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	f000 fb5b 	bl	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	401a      	ands	r2, r3
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	429a      	cmp	r2, r3
 8003558:	d106      	bne.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b20      	cmp	r3, #32
 800355e:	d103      	bne.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          frequency = HSI_VALUE;
 8003560:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 8003562:	617b      	str	r3, [r7, #20]
        break;
 8003564:	f000 fb4b 	bl	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d000      	beq.n	8003576 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8003574:	e343      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b30      	cmp	r3, #48	; 0x30
 800357a:	d000      	beq.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800357c:	e33f      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          frequency = LSE_VALUE;
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	617b      	str	r3, [r7, #20]
        break;
 8003584:	e33b      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	401a      	ands	r2, r3
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	429a      	cmp	r2, r3
 80035a0:	d112      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10f      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = (HSI_VALUE / 488U);
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 80035aa:	617b      	str	r3, [r7, #20]
        break;
 80035ac:	e329      	b.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	40021000 	.word	0x40021000
 80035b4:	0003d090 	.word	0x0003d090
 80035b8:	00f42400 	.word	0x00f42400
 80035bc:	007a1200 	.word	0x007a1200
 80035c0:	08017410 	.word	0x08017410
 80035c4:	00008012 	.word	0x00008012
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80035c8:	4bcb      	ldr	r3, [pc, #812]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	2202      	movs	r2, #2
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d000      	beq.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80035d4:	e315      	b.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d000      	beq.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80035dc:	e311      	b.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = LSE_VALUE;
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	617b      	str	r3, [r7, #20]
        break;
 80035e4:	e30d      	b.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80035e6:	4bc4      	ldr	r3, [pc, #784]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80035e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ea:	23c0      	movs	r3, #192	; 0xc0
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4013      	ands	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80035f8:	f7ff fbb8 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 80035fc:	0003      	movs	r3, r0
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e301      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	429a      	cmp	r2, r3
 800360a:	d104      	bne.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          frequency = HAL_RCC_GetSysClockFreq();
 800360c:	f7ff fb22 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8003610:	0003      	movs	r3, r0
 8003612:	617b      	str	r3, [r7, #20]
        break;
 8003614:	e2f7      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003616:	4bb8      	ldr	r3, [pc, #736]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	401a      	ands	r2, r3
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	429a      	cmp	r2, r3
 8003630:	d102      	bne.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          frequency = HSI_VALUE;
 8003632:	4bb2      	ldr	r3, [pc, #712]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003634:	617b      	str	r3, [r7, #20]
        break;
 8003636:	e2e6      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003638:	4baf      	ldr	r3, [pc, #700]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	2202      	movs	r2, #2
 800363e:	4013      	ands	r3, r2
 8003640:	2b02      	cmp	r3, #2
 8003642:	d000      	beq.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003644:	e2df      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	23c0      	movs	r3, #192	; 0xc0
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	429a      	cmp	r2, r3
 800364e:	d000      	beq.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8003650:	e2d9      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = LSE_VALUE;
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	617b      	str	r3, [r7, #20]
        break;
 8003658:	e2d5      	b.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 800365a:	4ba7      	ldr	r3, [pc, #668]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800365c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800365e:	23c0      	movs	r3, #192	; 0xc0
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4013      	ands	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART2CLKSOURCE_PCLK1)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          frequency = HAL_RCC_GetPCLK1Freq();
 800366c:	f7ff fb7e 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003670:	0003      	movs	r3, r0
 8003672:	617b      	str	r3, [r7, #20]
        break;
 8003674:	e2c9      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if (srcclk == RCC_LPUART2CLKSOURCE_SYSCLK)
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	429a      	cmp	r2, r3
 800367e:	d104      	bne.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003680:	f7ff fae8 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8003684:	0003      	movs	r3, r0
 8003686:	617b      	str	r3, [r7, #20]
        break;
 8003688:	e2bf      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART2CLKSOURCE_HSI))
 800368a:	4b9b      	ldr	r3, [pc, #620]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	401a      	ands	r2, r3
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	429a      	cmp	r2, r3
 800369a:	d107      	bne.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d102      	bne.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          frequency = HSI_VALUE;
 80036a6:	4b95      	ldr	r3, [pc, #596]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80036a8:	617b      	str	r3, [r7, #20]
        break;
 80036aa:	e2ae      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART2CLKSOURCE_LSE))
 80036ac:	4b92      	ldr	r3, [pc, #584]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	2202      	movs	r2, #2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d000      	beq.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 80036b8:	e2a7      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	23c0      	movs	r3, #192	; 0xc0
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d000      	beq.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80036c4:	e2a1      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          frequency = LSE_VALUE;
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	617b      	str	r3, [r7, #20]
        break;
 80036cc:	e29d      	b.n	8003c0a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80036ce:	4b8a      	ldr	r3, [pc, #552]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	0f9b      	lsrs	r3, r3, #30
 80036d4:	079b      	lsls	r3, r3, #30
 80036d6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = HAL_RCC_GetSysClockFreq();
 80036de:	f7ff fab9 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80036e2:	0003      	movs	r3, r0
 80036e4:	617b      	str	r3, [r7, #20]
        break;
 80036e6:	e292      	b.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d102      	bne.n	80036f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HSI_VALUE;
 80036f2:	4b82      	ldr	r3, [pc, #520]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80036f4:	617b      	str	r3, [r7, #20]
        break;
 80036f6:	e28a      	b.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	05db      	lsls	r3, r3, #23
 80036fe:	429a      	cmp	r2, r3
 8003700:	d000      	beq.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8003702:	e284      	b.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8003704:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	025b      	lsls	r3, r3, #9
 800370c:	4013      	ands	r3, r2
 800370e:	d100      	bne.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8003710:	e27d      	b.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003712:	4b79      	ldr	r3, [pc, #484]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	227f      	movs	r2, #127	; 0x7f
 800371a:	4013      	ands	r3, r2
 800371c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	435a      	muls	r2, r3
 8003724:	4b74      	ldr	r3, [pc, #464]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	0c5b      	lsrs	r3, r3, #17
 800372a:	211f      	movs	r1, #31
 800372c:	400b      	ands	r3, r1
 800372e:	3301      	adds	r3, #1
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f7fc fce6 	bl	8000104 <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	617b      	str	r3, [r7, #20]
        break;
 800373c:	e267      	b.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800373e:	4b6e      	ldr	r3, [pc, #440]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003742:	23c0      	movs	r3, #192	; 0xc0
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	4013      	ands	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003750:	f7ff fb0c 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003754:	0003      	movs	r3, r0
 8003756:	617b      	str	r3, [r7, #20]
        break;
 8003758:	e25b      	b.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	429a      	cmp	r2, r3
 8003762:	d104      	bne.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003764:	f7ff fa76 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8003768:	0003      	movs	r3, r0
 800376a:	617b      	str	r3, [r7, #20]
        break;
 800376c:	e251      	b.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800376e:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	401a      	ands	r2, r3
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	429a      	cmp	r2, r3
 800377e:	d000      	beq.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8003780:	e247      	b.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	019b      	lsls	r3, r3, #6
 8003788:	429a      	cmp	r2, r3
 800378a:	d000      	beq.n	800378e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800378c:	e241      	b.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = HSI_VALUE;
 800378e:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003790:	617b      	str	r3, [r7, #20]
        break;
 8003792:	e23e      	b.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003796:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003798:	23c0      	movs	r3, #192	; 0xc0
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80037a6:	f7ff fae1 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 80037aa:	0003      	movs	r3, r0
 80037ac:	617b      	str	r3, [r7, #20]
        break;
 80037ae:	e232      	b.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	01db      	lsls	r3, r3, #7
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d104      	bne.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = HAL_RCC_GetSysClockFreq();
 80037ba:	f7ff fa4b 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80037be:	0003      	movs	r3, r0
 80037c0:	617b      	str	r3, [r7, #20]
        break;
 80037c2:	e228      	b.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80037c4:	4b4c      	ldr	r3, [pc, #304]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	401a      	ands	r2, r3
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d000      	beq.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 80037d6:	e21e      	b.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	429a      	cmp	r2, r3
 80037e0:	d000      	beq.n	80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80037e2:	e218      	b.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          frequency = HSI_VALUE;
 80037e4:	4b45      	ldr	r3, [pc, #276]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80037e6:	617b      	str	r3, [r7, #20]
        break;
 80037e8:	e215      	b.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	2203      	movs	r2, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d11c      	bne.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80037fa:	4b3f      	ldr	r3, [pc, #252]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	025b      	lsls	r3, r3, #9
 8003802:	4013      	ands	r3, r2
 8003804:	d100      	bne.n	8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8003806:	e208      	b.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	227f      	movs	r2, #127	; 0x7f
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	435a      	muls	r2, r3
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	0c5b      	lsrs	r3, r3, #17
 8003820:	211f      	movs	r1, #31
 8003822:	400b      	ands	r3, r1
 8003824:	3301      	adds	r3, #1
 8003826:	0019      	movs	r1, r3
 8003828:	0010      	movs	r0, r2
 800382a:	f7fc fc6b 	bl	8000104 <__udivsi3>
 800382e:	0003      	movs	r3, r0
 8003830:	617b      	str	r3, [r7, #20]
        break;
 8003832:	e1f2      	b.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          frequency = HAL_RCC_GetSysClockFreq();
 800383a:	f7ff fa0b 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 800383e:	0003      	movs	r3, r0
 8003840:	617b      	str	r3, [r7, #20]
        break;
 8003842:	e1ea      	b.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	401a      	ands	r2, r3
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	429a      	cmp	r2, r3
 8003854:	d105      	bne.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d102      	bne.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          frequency = HSI_VALUE;
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 800385e:	617b      	str	r3, [r7, #20]
        break;
 8003860:	e1db      	b.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d000      	beq.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003868:	e1d7      	b.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 800386c:	617b      	str	r3, [r7, #20]
        break;
 800386e:	e1d4      	b.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        srcclk = __HAL_RCC_GET_I2S2_SOURCE();
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	220c      	movs	r2, #12
 8003876:	4013      	ands	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S2CLKSOURCE_PLL)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11c      	bne.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8003880:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	4013      	ands	r3, r2
 800388a:	d100      	bne.n	800388e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800388c:	e1c7      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	227f      	movs	r2, #127	; 0x7f
 8003896:	4013      	ands	r3, r2
 8003898:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	435a      	muls	r2, r3
 80038a0:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0c5b      	lsrs	r3, r3, #17
 80038a6:	211f      	movs	r1, #31
 80038a8:	400b      	ands	r3, r1
 80038aa:	3301      	adds	r3, #1
 80038ac:	0019      	movs	r1, r3
 80038ae:	0010      	movs	r0, r2
 80038b0:	f7fc fc28 	bl	8000104 <__udivsi3>
 80038b4:	0003      	movs	r3, r0
 80038b6:	617b      	str	r3, [r7, #20]
        break;
 80038b8:	e1b1      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if (srcclk == RCC_I2S2CLKSOURCE_SYSCLK)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
          frequency = HAL_RCC_GetSysClockFreq();
 80038c0:	f7ff f9c8 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 80038c4:	0003      	movs	r3, r0
 80038c6:	617b      	str	r3, [r7, #20]
        break;
 80038c8:	e1a9      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S2CLKSOURCE_HSI))
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	401a      	ands	r2, r3
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	429a      	cmp	r2, r3
 80038da:	d105      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d102      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = HSI_VALUE;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80038e4:	617b      	str	r3, [r7, #20]
        break;
 80038e6:	e19a      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if (srcclk == RCC_I2S2CLKSOURCE_EXT)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d000      	beq.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80038ee:	e196      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
          frequency = EXTERNAL_I2S2_CLOCK_VALUE;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 80038f2:	617b      	str	r3, [r7, #20]
        break;
 80038f4:	e193      	b.n	8003c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	40021000 	.word	0x40021000
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	0000bb80 	.word	0x0000bb80
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003904:	4bcc      	ldr	r3, [pc, #816]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003906:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003908:	23c0      	movs	r3, #192	; 0xc0
 800390a:	031b      	lsls	r3, r3, #12
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003916:	f7ff fa29 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 800391a:	0003      	movs	r3, r0
 800391c:	617b      	str	r3, [r7, #20]
        break;
 800391e:	e180      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8003920:	4bc5      	ldr	r3, [pc, #788]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	2b02      	cmp	r3, #2
 800392a:	d108      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	02db      	lsls	r3, r3, #11
 8003932:	429a      	cmp	r2, r3
 8003934:	d103      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          frequency = LSI_VALUE;
 8003936:	23fa      	movs	r3, #250	; 0xfa
 8003938:	01db      	lsls	r3, r3, #7
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e021      	b.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800393e:	4bbe      	ldr	r3, [pc, #760]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	401a      	ands	r2, r3
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	429a      	cmp	r2, r3
 800394e:	d107      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	031b      	lsls	r3, r3, #12
 8003956:	429a      	cmp	r2, r3
 8003958:	d102      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
          frequency = HSI_VALUE;
 800395a:	4bb8      	ldr	r3, [pc, #736]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>)
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e010      	b.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8003960:	4bb5      	ldr	r3, [pc, #724]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d000      	beq.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 800396c:	e159      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	23c0      	movs	r3, #192	; 0xc0
 8003972:	031b      	lsls	r3, r3, #12
 8003974:	429a      	cmp	r2, r3
 8003976:	d000      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003978:	e153      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = LSE_VALUE;
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	617b      	str	r3, [r7, #20]
        break;
 8003980:	e14f      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8003982:	e14e      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003984:	4bac      	ldr	r3, [pc, #688]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003988:	23c0      	movs	r3, #192	; 0xc0
 800398a:	039b      	lsls	r3, r3, #14
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003996:	f7ff f9e9 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 800399a:	0003      	movs	r3, r0
 800399c:	617b      	str	r3, [r7, #20]
        break;
 800399e:	e142      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80039a0:	4ba5      	ldr	r3, [pc, #660]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	2202      	movs	r2, #2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d108      	bne.n	80039be <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	035b      	lsls	r3, r3, #13
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d103      	bne.n	80039be <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
          frequency = LSI_VALUE;
 80039b6:	23fa      	movs	r3, #250	; 0xfa
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e021      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80039be:	4b9e      	ldr	r3, [pc, #632]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	401a      	ands	r2, r3
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d107      	bne.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	039b      	lsls	r3, r3, #14
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d102      	bne.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          frequency = HSI_VALUE;
 80039da:	4b98      	ldr	r3, [pc, #608]	; (8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>)
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e010      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80039e0:	4b95      	ldr	r3, [pc, #596]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d000      	beq.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80039ec:	e11b      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	23c0      	movs	r3, #192	; 0xc0
 80039f2:	039b      	lsls	r3, r3, #14
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d000      	beq.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80039f8:	e115      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
          frequency = LSE_VALUE;
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	617b      	str	r3, [r7, #20]
        break;
 8003a00:	e111      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003a02:	e110      	b.n	8003c26 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8003a04:	4b8c      	ldr	r3, [pc, #560]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	03db      	lsls	r3, r3, #15
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	03db      	lsls	r3, r3, #15
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003a1a:	4b87      	ldr	r3, [pc, #540]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	045b      	lsls	r3, r3, #17
 8003a22:	4013      	ands	r3, r2
 8003a24:	d100      	bne.n	8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8003a26:	e100      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003a28:	4b83      	ldr	r3, [pc, #524]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	0a1b      	lsrs	r3, r3, #8
 8003a2e:	227f      	movs	r2, #127	; 0x7f
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	435a      	muls	r2, r3
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	0e5b      	lsrs	r3, r3, #25
 8003a40:	2107      	movs	r1, #7
 8003a42:	400b      	ands	r3, r1
 8003a44:	3301      	adds	r3, #1
 8003a46:	0019      	movs	r1, r3
 8003a48:	0010      	movs	r0, r2
 8003a4a:	f7fc fb5b 	bl	8000104 <__udivsi3>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	617b      	str	r3, [r7, #20]
        break;
 8003a52:	e0ea      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d000      	beq.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8003a5a:	e0e6      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7ff f986 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003a60:	0003      	movs	r3, r0
 8003a62:	617b      	str	r3, [r7, #20]
        break;
 8003a64:	e0e1      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8003a66:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	045b      	lsls	r3, r3, #17
 8003a6e:	4013      	ands	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	045b      	lsls	r3, r3, #17
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d11c      	bne.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003a7c:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	045b      	lsls	r3, r3, #17
 8003a84:	4013      	ands	r3, r2
 8003a86:	d100      	bne.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8003a88:	e0d1      	b.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003a8a:	4b6b      	ldr	r3, [pc, #428]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	227f      	movs	r2, #127	; 0x7f
 8003a92:	4013      	ands	r3, r2
 8003a94:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	435a      	muls	r2, r3
 8003a9c:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0e5b      	lsrs	r3, r3, #25
 8003aa2:	2107      	movs	r1, #7
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	0010      	movs	r0, r2
 8003aac:	f7fc fb2a 	bl	8000104 <__udivsi3>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e0bb      	b.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d000      	beq.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8003abc:	e0b7      	b.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7ff f955 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	617b      	str	r3, [r7, #20]
        break;
 8003ac6:	e0b2      	b.n	8003c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        srcclk = READ_BIT(RCC->CCIPR2, RCC_CCIPR2_USBSEL);
 8003ac8:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003aca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003acc:	23c0      	movs	r3, #192	; 0xc0
 8003ace:	019b      	lsls	r3, r3, #6
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USBCLKSOURCE_PLL) /* PLL ? */
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	019b      	lsls	r3, r3, #6
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003ade:	4b56      	ldr	r3, [pc, #344]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	045b      	lsls	r3, r3, #17
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d100      	bne.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 8003aea:	e0a2      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003aec:	4b52      	ldr	r3, [pc, #328]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	227f      	movs	r2, #127	; 0x7f
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	435a      	muls	r2, r3
 8003afe:	4b4e      	ldr	r3, [pc, #312]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	0e5b      	lsrs	r3, r3, #25
 8003b04:	2107      	movs	r1, #7
 8003b06:	400b      	ands	r3, r1
 8003b08:	3301      	adds	r3, #1
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	0010      	movs	r0, r2
 8003b0e:	f7fc faf9 	bl	8000104 <__udivsi3>
 8003b12:	0003      	movs	r3, r0
 8003b14:	617b      	str	r3, [r7, #20]
        break;
 8003b16:	e08c      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        else if (srcclk == RCC_USBCLKSOURCE_HSI48) /* HSI48 ? */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d110      	bne.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8003b1e:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	401a      	ands	r2, r3
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d000      	beq.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
 8003b30:	e07f      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d000      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
 8003b38:	e07b      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            frequency = HSI48_VALUE;
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8003b3c:	617b      	str	r3, [r7, #20]
        break;
 8003b3e:	e078      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        else if (srcclk == RCC_USBCLKSOURCE_HSE)
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	015b      	lsls	r3, r3, #5
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d000      	beq.n	8003b4c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
 8003b4a:	e072      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBCLKSOURCE_HSE))
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	029b      	lsls	r3, r3, #10
 8003b54:	401a      	ands	r2, r3
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	029b      	lsls	r3, r3, #10
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d000      	beq.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8003b5e:	e068      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	015b      	lsls	r3, r3, #5
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d000      	beq.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8003b6a:	e062      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            frequency = HSE_VALUE;
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8003b6e:	617b      	str	r3, [r7, #20]
        break;
 8003b70:	e05f      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        srcclk = READ_BIT(RCC->CCIPR2, RCC_CCIPR2_FDCANSEL);
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b76:	23c0      	movs	r3, #192	; 0xc0
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_FDCANCLKSOURCE_PLL) /* PLL ? */
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d11b      	bne.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	045b      	lsls	r3, r3, #17
 8003b90:	4013      	ands	r3, r2
 8003b92:	d059      	beq.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	227f      	movs	r2, #127	; 0x7f
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	435a      	muls	r2, r3
 8003ba6:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	0e5b      	lsrs	r3, r3, #25
 8003bac:	2107      	movs	r1, #7
 8003bae:	400b      	ands	r3, r1
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	0010      	movs	r0, r2
 8003bb6:	f7fc faa5 	bl	8000104 <__udivsi3>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	617b      	str	r3, [r7, #20]
        break;
 8003bbe:	e043      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        else if (srcclk == RCC_FDCANCLKSOURCE_PCLK1) /* PCLK1 ? */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003bc6:	f7ff f8d1 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	617b      	str	r3, [r7, #20]
        break;
 8003bce:	e03b      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	401a      	ands	r2, r3
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	029b      	lsls	r3, r3, #10
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d132      	bne.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d12d      	bne.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
          frequency = HSE_VALUE;
 8003bec:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8003bee:	617b      	str	r3, [r7, #20]
        break;
 8003bf0:	e02a      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        break;
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	e029      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	e027      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	e025      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	e023      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	e021      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	e01f      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	e01d      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	e01b      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	e019      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	e017      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	e015      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	e013      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	e011      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	e00f      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	e00d      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	e00b      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	e009      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	00f42400 	.word	0x00f42400
 8003c40:	02dc6c00 	.word	0x02dc6c00
 8003c44:	007a1200 	.word	0x007a1200
        break;
 8003c48:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8003c4a:	697b      	ldr	r3, [r7, #20]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <__libc_init_array>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	2600      	movs	r6, #0
 8003c58:	4d0c      	ldr	r5, [pc, #48]	; (8003c8c <__libc_init_array+0x38>)
 8003c5a:	4c0d      	ldr	r4, [pc, #52]	; (8003c90 <__libc_init_array+0x3c>)
 8003c5c:	1b64      	subs	r4, r4, r5
 8003c5e:	10a4      	asrs	r4, r4, #2
 8003c60:	42a6      	cmp	r6, r4
 8003c62:	d109      	bne.n	8003c78 <__libc_init_array+0x24>
 8003c64:	2600      	movs	r6, #0
 8003c66:	f000 f821 	bl	8003cac <_init>
 8003c6a:	4d0a      	ldr	r5, [pc, #40]	; (8003c94 <__libc_init_array+0x40>)
 8003c6c:	4c0a      	ldr	r4, [pc, #40]	; (8003c98 <__libc_init_array+0x44>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	42a6      	cmp	r6, r4
 8003c74:	d105      	bne.n	8003c82 <__libc_init_array+0x2e>
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	00b3      	lsls	r3, r6, #2
 8003c7a:	58eb      	ldr	r3, [r5, r3]
 8003c7c:	4798      	blx	r3
 8003c7e:	3601      	adds	r6, #1
 8003c80:	e7ee      	b.n	8003c60 <__libc_init_array+0xc>
 8003c82:	00b3      	lsls	r3, r6, #2
 8003c84:	58eb      	ldr	r3, [r5, r3]
 8003c86:	4798      	blx	r3
 8003c88:	3601      	adds	r6, #1
 8003c8a:	e7f2      	b.n	8003c72 <__libc_init_array+0x1e>
 8003c8c:	08017494 	.word	0x08017494
 8003c90:	08017494 	.word	0x08017494
 8003c94:	08017494 	.word	0x08017494
 8003c98:	08017498 	.word	0x08017498

08003c9c <memset>:
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	1882      	adds	r2, r0, r2
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d100      	bne.n	8003ca6 <memset+0xa>
 8003ca4:	4770      	bx	lr
 8003ca6:	7019      	strb	r1, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	e7f9      	b.n	8003ca0 <memset+0x4>

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
