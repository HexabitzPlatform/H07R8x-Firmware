
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000137d0  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016664  08016664  0003000c  2**0
                  CONTENTS
  4 .ARM          00000000  08016664  08016664  0003000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016664  08016664  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016664  08016664  00026664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016668  08016668  00026668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0801666c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08016678  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08016678  000300b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9c2  00000000  00000000  00030034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c60  00000000  00000000  0003a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0003c658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0003d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c5c  00000000  00000000  0003d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0ab  00000000  00000000  0003f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aac4e  00000000  00000000  0004b657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f62a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002254  00000000  00000000  000f62f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002e7c 	.word	0x08002e7c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002e7c 	.word	0x08002e7c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <WriteI2S>:

	return Status;
}

Status_TypeDef WriteI2S(I2S_HANDLE *xPort, uint16_t *pData, uint16_t Size)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	1dbb      	adds	r3, r7, #6
 8000228:	801a      	strh	r2, [r3, #0]
  Status_TypeDef Status=STATUS_ERR;
 800022a:	2417      	movs	r4, #23
 800022c:	193b      	adds	r3, r7, r4
 800022e:	22ff      	movs	r2, #255	; 0xff
 8000230:	701a      	strb	r2, [r3, #0]

  if (NULL!=xPort && NULL!=pData)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d00f      	beq.n	8000258 <WriteI2S+0x3c>
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d00c      	beq.n	8000258 <WriteI2S+0x3c>
    {
      if (HAL_OK == HAL_I2S_Transmit(xPort, pData, Size, TIM_OUT_1MS))
 800023e:	1dbb      	adds	r3, r7, #6
 8000240:	881a      	ldrh	r2, [r3, #0]
 8000242:	68b9      	ldr	r1, [r7, #8]
 8000244:	68f8      	ldr	r0, [r7, #12]
 8000246:	2332      	movs	r3, #50	; 0x32
 8000248:	f001 f806 	bl	8001258 <HAL_I2S_Transmit>
 800024c:	1e03      	subs	r3, r0, #0
 800024e:	d107      	bne.n	8000260 <WriteI2S+0x44>
    	  Status=STATUS_OK;
 8000250:	193b      	adds	r3, r7, r4
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
      if (HAL_OK == HAL_I2S_Transmit(xPort, pData, Size, TIM_OUT_1MS))
 8000256:	e003      	b.n	8000260 <WriteI2S+0x44>

    }
  else
	  	  Status=STATUS_ERR;
 8000258:	2317      	movs	r3, #23
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	22ff      	movs	r2, #255	; 0xff
 800025e:	701a      	strb	r2, [r3, #0]

  return Status;
 8000260:	2317      	movs	r3, #23
 8000262:	18fb      	adds	r3, r7, r3
 8000264:	781b      	ldrb	r3, [r3, #0]
}
 8000266:	0018      	movs	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	b007      	add	sp, #28
 800026c:	bd90      	pop	{r4, r7, pc}
	...

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fabf 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f859 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f909 	bl	8000494 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000282:	f000 f89d 	bl	80003c0 <MX_I2C2_Init>
  MX_I2S1_Init();
 8000286:	f000 f8db 	bl	8000440 <MX_I2S1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    for(int i=0; i<13000; i++) {
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e00b      	b.n	80002a8 <main+0x38>
	    	WriteI2S(MAX9867_I2S_HANDLE, (uint16_t *)&kick_data[i], 1);
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	005a      	lsls	r2, r3, #1
 8000294:	4b20      	ldr	r3, [pc, #128]	; (8000318 <main+0xa8>)
 8000296:	18d1      	adds	r1, r2, r3
 8000298:	4b20      	ldr	r3, [pc, #128]	; (800031c <main+0xac>)
 800029a:	2201      	movs	r2, #1
 800029c:	0018      	movs	r0, r3
 800029e:	f7ff ffbd 	bl	800021c <WriteI2S>
	    for(int i=0; i<13000; i++) {
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	3301      	adds	r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	4a1d      	ldr	r2, [pc, #116]	; (8000320 <main+0xb0>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	ddef      	ble.n	8000290 <main+0x20>
	    }
	  _DELAY_MS(5000);
 80002b0:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <main+0xb4>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fb26 	bl	8000904 <HAL_Delay>
	    for(int i=0; i<13000; i++) {
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	e00b      	b.n	80002d6 <main+0x66>
	    	WriteI2S(MAX9867_I2S_HANDLE, (uint16_t *)&inhale_data[i], 1);
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	005a      	lsls	r2, r3, #1
 80002c2:	4b19      	ldr	r3, [pc, #100]	; (8000328 <main+0xb8>)
 80002c4:	18d1      	adds	r1, r2, r3
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <main+0xac>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f7ff ffa6 	bl	800021c <WriteI2S>
	    for(int i=0; i<13000; i++) {
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	3301      	adds	r3, #1
 80002d4:	60bb      	str	r3, [r7, #8]
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <main+0xb0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	ddef      	ble.n	80002be <main+0x4e>
	    }
	  _DELAY_MS(5000);
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <main+0xb4>)
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fb0f 	bl	8000904 <HAL_Delay>
	    for(int i=0; i<13000; i++) {
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	e00b      	b.n	8000304 <main+0x94>
	    	WriteI2S(MAX9867_I2S_HANDLE, (uint16_t *)&exhale_data[i], 1);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	005a      	lsls	r2, r3, #1
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <main+0xbc>)
 80002f2:	18d1      	adds	r1, r2, r3
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <main+0xac>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f7ff ff8f 	bl	800021c <WriteI2S>
	    for(int i=0; i<13000; i++) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3301      	adds	r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a06      	ldr	r2, [pc, #24]	; (8000320 <main+0xb0>)
 8000308:	4293      	cmp	r3, r2
 800030a:	ddef      	ble.n	80002ec <main+0x7c>
	    }
	  _DELAY_MS(5000);
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <main+0xb4>)
 800030e:	0018      	movs	r0, r3
 8000310:	f000 faf8 	bl	8000904 <HAL_Delay>
	    for(int i=0; i<13000; i++) {
 8000314:	e7b9      	b.n	800028a <main+0x1a>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	08002e94 	.word	0x08002e94
 800031c:	20000074 	.word	0x20000074
 8000320:	000032c7 	.word	0x000032c7
 8000324:	00001388 	.word	0x00001388
 8000328:	0800fe28 	.word	0x0800fe28
 800032c:	08009640 	.word	0x08009640

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b095      	sub	sp, #84	; 0x54
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	2414      	movs	r4, #20
 8000338:	193b      	adds	r3, r7, r4
 800033a:	0018      	movs	r0, r3
 800033c:	233c      	movs	r3, #60	; 0x3c
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f002 fd93 	bl	8002e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	2310      	movs	r3, #16
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f002 fd8c 	bl	8002e6c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000354:	2380      	movs	r3, #128	; 0x80
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	0018      	movs	r0, r3
 800035a:	f001 f8af 	bl	80014bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035e:	193b      	adds	r3, r7, r4
 8000360:	2202      	movs	r2, #2
 8000362:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	193b      	adds	r3, r7, r4
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	0052      	lsls	r2, r2, #1
 800036a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800036c:	193b      	adds	r3, r7, r4
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	193b      	adds	r3, r7, r4
 8000374:	2240      	movs	r2, #64	; 0x40
 8000376:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000378:	193b      	adds	r3, r7, r4
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	193b      	adds	r3, r7, r4
 8000380:	0018      	movs	r0, r3
 8000382:	f001 f8e7 	bl	8001554 <HAL_RCC_OscConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800038a:	f000 f8fd 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2207      	movs	r2, #7
 8000392:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2100      	movs	r1, #0
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fc32 	bl	8001c14 <HAL_RCC_ClockConfig>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003b4:	f000 f8e8 	bl	8000588 <Error_Handler>
  }
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b015      	add	sp, #84	; 0x54
 80003be:	bd90      	pop	{r4, r7, pc}

080003c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_I2C2_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_I2C2_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_I2C2_Init+0x74>)
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <MX_I2C2_Init+0x7c>)
 80003ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_I2C2_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_I2C2_Init+0x74>)
 80003d8:	2201      	movs	r2, #1
 80003da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_I2C2_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_I2C2_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_I2C2_Init+0x74>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_I2C2_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_I2C2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_I2C2_Init+0x74>)
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 fcf9 	bl	8000df4 <HAL_I2C_Init>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000406:	f000 f8bf 	bl	8000588 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <MX_I2C2_Init+0x74>)
 800040c:	2100      	movs	r1, #0
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fd86 	bl	8000f20 <HAL_I2CEx_ConfigAnalogFilter>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000418:	f000 f8b6 	bl	8000588 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <MX_I2C2_Init+0x74>)
 800041e:	2100      	movs	r1, #0
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fdc9 	bl	8000fb8 <HAL_I2CEx_ConfigDigitalFilter>
 8000426:	1e03      	subs	r3, r0, #0
 8000428:	d001      	beq.n	800042e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 f8ad 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000028 	.word	0x20000028
 8000438:	40005800 	.word	0x40005800
 800043c:	00303d5b 	.word	0x00303d5b

08000440 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_I2S1_Init+0x4c>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <MX_I2S1_Init+0x50>)
 8000448:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_I2S1_Init+0x4c>)
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0092      	lsls	r2, r2, #2
 8000450:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_I2S1_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_I2S1_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_I2S1_Init+0x4c>)
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	0092      	lsls	r2, r2, #2
 8000464:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_I2S1_Init+0x4c>)
 8000468:	22fa      	movs	r2, #250	; 0xfa
 800046a:	0152      	lsls	r2, r2, #5
 800046c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <MX_I2S1_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <MX_I2S1_Init+0x4c>)
 8000476:	0018      	movs	r0, r3
 8000478:	f000 fdea 	bl	8001050 <HAL_I2S_Init>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000480:	f000 f882 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	20000074 	.word	0x20000074
 8000490:	40013000 	.word	0x40013000

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b089      	sub	sp, #36	; 0x24
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	240c      	movs	r4, #12
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2314      	movs	r3, #20
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f002 fce1 	bl	8002e6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <MX_GPIO_Init+0xe8>)
 80004ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ae:	4b33      	ldr	r3, [pc, #204]	; (800057c <MX_GPIO_Init+0xe8>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
 80004b6:	4b31      	ldr	r3, [pc, #196]	; (800057c <MX_GPIO_Init+0xe8>)
 80004b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b2e      	ldr	r3, [pc, #184]	; (800057c <MX_GPIO_Init+0xe8>)
 80004c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c6:	4b2d      	ldr	r3, [pc, #180]	; (800057c <MX_GPIO_Init+0xe8>)
 80004c8:	2102      	movs	r1, #2
 80004ca:	430a      	orrs	r2, r1
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
 80004ce:	4b2b      	ldr	r3, [pc, #172]	; (800057c <MX_GPIO_Init+0xe8>)
 80004d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d2:	2202      	movs	r2, #2
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004da:	4b28      	ldr	r3, [pc, #160]	; (800057c <MX_GPIO_Init+0xe8>)
 80004dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <MX_GPIO_Init+0xe8>)
 80004e0:	2108      	movs	r1, #8
 80004e2:	430a      	orrs	r2, r1
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_GPIO_Init+0xe8>)
 80004e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ea:	2208      	movs	r2, #8
 80004ec:	4013      	ands	r3, r2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_MUTE_GPIO_Port, AMP_MUTE_Pin, GPIO_PIN_RESET);
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_GPIO_Init+0xec>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fc5d 	bl	8000db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_FS2_Pin|AMP_FS1_Pin|AMP_GAIN2_Pin|AMP_GAIN1_Pin
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <MX_GPIO_Init+0xf0>)
 8000500:	2200      	movs	r2, #0
 8000502:	21f8      	movs	r1, #248	; 0xf8
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fc57 	bl	8000db8 <HAL_GPIO_WritePin>
                          |AMP_SHUTDOWN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CODEC_IRQN_OUT_Pin */
  GPIO_InitStruct.Pin = CODEC_IRQN_OUT_Pin;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2288      	movs	r2, #136	; 0x88
 8000514:	0352      	lsls	r2, r2, #13
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CODEC_IRQN_OUT_GPIO_Port, &GPIO_InitStruct);
 800051e:	193b      	adds	r3, r7, r4
 8000520:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MX_GPIO_Init+0xf0>)
 8000522:	0019      	movs	r1, r3
 8000524:	0010      	movs	r0, r2
 8000526:	f000 fadb 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_MUTE_Pin */
  GPIO_InitStruct.Pin = AMP_MUTE_Pin;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2202      	movs	r2, #2
 800052e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2201      	movs	r2, #1
 8000534:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AMP_MUTE_GPIO_Port, &GPIO_InitStruct);
 8000542:	193b      	adds	r3, r7, r4
 8000544:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <MX_GPIO_Init+0xec>)
 8000546:	0019      	movs	r1, r3
 8000548:	0010      	movs	r0, r2
 800054a:	f000 fac9 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_FS2_Pin AMP_FS1_Pin AMP_GAIN2_Pin AMP_GAIN1_Pin
                           AMP_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = AMP_FS2_Pin|AMP_FS1_Pin|AMP_GAIN2_Pin|AMP_GAIN1_Pin
 800054e:	0021      	movs	r1, r4
 8000550:	187b      	adds	r3, r7, r1
 8000552:	22f8      	movs	r2, #248	; 0xf8
 8000554:	601a      	str	r2, [r3, #0]
                          |AMP_SHUTDOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2201      	movs	r2, #1
 800055a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	187b      	adds	r3, r7, r1
 800056a:	4a06      	ldr	r2, [pc, #24]	; (8000584 <MX_GPIO_Init+0xf0>)
 800056c:	0019      	movs	r1, r3
 800056e:	0010      	movs	r0, r2
 8000570:	f000 fab6 	bl	8000ae0 <HAL_GPIO_Init>

}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b009      	add	sp, #36	; 0x24
 800057a:	bd90      	pop	{r4, r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	50000c00 	.word	0x50000c00
 8000584:	50000400 	.word	0x50000400

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	e7fe      	b.n	8000590 <Error_Handler+0x8>
	...

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_MspInit+0x4c>)
 800059c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <HAL_MspInit+0x4c>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	430a      	orrs	r2, r1
 80005a4:	641a      	str	r2, [r3, #64]	; 0x40
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_MspInit+0x4c>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	2201      	movs	r2, #1
 80005ac:	4013      	ands	r3, r2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_MspInit+0x4c>)
 80005b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_MspInit+0x4c>)
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	0549      	lsls	r1, r1, #21
 80005bc:	430a      	orrs	r2, r1
 80005be:	63da      	str	r2, [r3, #60]	; 0x3c
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_MspInit+0x4c>)
 80005c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	055b      	lsls	r3, r3, #21
 80005c8:	4013      	ands	r3, r2
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80005ce:	23c0      	movs	r3, #192	; 0xc0
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f9ba 	bl	800094c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b09d      	sub	sp, #116	; 0x74
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	235c      	movs	r3, #92	; 0x5c
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	0018      	movs	r0, r3
 80005f2:	2314      	movs	r3, #20
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f002 fc38 	bl	8002e6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fc:	2410      	movs	r4, #16
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	0018      	movs	r0, r3
 8000602:	234c      	movs	r3, #76	; 0x4c
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f002 fc30 	bl	8002e6c <memset>
  if(hi2c->Instance==I2C2)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <HAL_I2C_MspInit+0xb8>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d13e      	bne.n	8000694 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2240      	movs	r2, #64	; 0x40
 800061a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000622:	193b      	adds	r3, r7, r4
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fc9f 	bl	8001f68 <HAL_RCCEx_PeriphCLKConfig>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800062e:	f7ff ffab 	bl	8000588 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <HAL_I2C_MspInit+0xbc>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_I2C_MspInit+0xbc>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <HAL_I2C_MspInit+0xbc>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800064a:	215c      	movs	r1, #92	; 0x5c
 800064c:	187b      	adds	r3, r7, r1
 800064e:	22c0      	movs	r2, #192	; 0xc0
 8000650:	01d2      	lsls	r2, r2, #7
 8000652:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2212      	movs	r2, #18
 8000658:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2206      	movs	r2, #6
 800066a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	187b      	adds	r3, r7, r1
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <HAL_I2C_MspInit+0xc0>)
 8000670:	0019      	movs	r1, r3
 8000672:	0010      	movs	r0, r2
 8000674:	f000 fa34 	bl	8000ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_I2C_MspInit+0xbc>)
 800067a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_I2C_MspInit+0xbc>)
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	03c9      	lsls	r1, r1, #15
 8000682:	430a      	orrs	r2, r1
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_I2C_MspInit+0xbc>)
 8000688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	03db      	lsls	r3, r3, #15
 800068e:	4013      	ands	r3, r2
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b01d      	add	sp, #116	; 0x74
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	40005800 	.word	0x40005800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	50000400 	.word	0x50000400

080006a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b09d      	sub	sp, #116	; 0x74
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	235c      	movs	r3, #92	; 0x5c
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f002 fbd6 	bl	8002e6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	2410      	movs	r4, #16
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0018      	movs	r0, r3
 80006c6:	234c      	movs	r3, #76	; 0x4c
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f002 fbce 	bl	8002e6c <memset>
  if(hi2s->Instance==SPI1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a23      	ldr	r2, [pc, #140]	; (8000764 <HAL_I2S_MspInit+0xbc>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d13f      	bne.n	800075a <HAL_I2S_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fc3c 	bl	8001f68 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80006f4:	f7ff ff48 	bl	8000588 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_I2S_MspInit+0xc0>)
 80006fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_I2S_MspInit+0xc0>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	0149      	lsls	r1, r1, #5
 8000702:	430a      	orrs	r2, r1
 8000704:	641a      	str	r2, [r3, #64]	; 0x40
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_I2S_MspInit+0xc0>)
 8000708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	015b      	lsls	r3, r3, #5
 800070e:	4013      	ands	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_I2S_MspInit+0xc0>)
 8000716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <HAL_I2S_MspInit+0xc0>)
 800071a:	2101      	movs	r1, #1
 800071c:	430a      	orrs	r2, r1
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_I2S_MspInit+0xc0>)
 8000722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000724:	2201      	movs	r2, #1
 8000726:	4013      	ands	r3, r2
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_MCK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800072c:	215c      	movs	r1, #92	; 0x5c
 800072e:	187b      	adds	r3, r7, r1
 8000730:	22f0      	movs	r2, #240	; 0xf0
 8000732:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2202      	movs	r2, #2
 8000738:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	187a      	adds	r2, r7, r1
 800074e:	23a0      	movs	r3, #160	; 0xa0
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 f9c3 	bl	8000ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b01d      	add	sp, #116	; 0x74
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40013000 	.word	0x40013000
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f89c 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a8:	f7ff fff7 	bl	800079a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	; (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d2:	f002 fb27 	bl	8002e24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007d6:	f7ff fd4b 	bl	8000270 <main>

080007da <LoopForever>:

LoopForever:
  b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   r0, =_estack
 80007dc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e8:	0801666c 	.word	0x0801666c
  ldr r2, =_sbss
 80007ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f0:	200000b4 	.word	0x200000b4

080007f4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_COMP_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_Init+0x3c>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_Init+0x3c>)
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0049      	lsls	r1, r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000812:	2003      	movs	r0, #3
 8000814:	f000 f810 	bl	8000838 <HAL_InitTick>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d003      	beq.n	8000824 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	2201      	movs	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e001      	b.n	8000828 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000824:	f7ff feb6 	bl	8000594 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40022000 	.word	0x40022000

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	230f      	movs	r3, #15
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <HAL_InitTick+0x88>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d02b      	beq.n	80008a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <HAL_InitTick+0x8c>)
 8000852:	681c      	ldr	r4, [r3, #0]
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_InitTick+0x88>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	0019      	movs	r1, r3
 800085a:	23fa      	movs	r3, #250	; 0xfa
 800085c:	0098      	lsls	r0, r3, #2
 800085e:	f7ff fc51 	bl	8000104 <__udivsi3>
 8000862:	0003      	movs	r3, r0
 8000864:	0019      	movs	r1, r3
 8000866:	0020      	movs	r0, r4
 8000868:	f7ff fc4c 	bl	8000104 <__udivsi3>
 800086c:	0003      	movs	r3, r0
 800086e:	0018      	movs	r0, r3
 8000870:	f000 f929 	bl	8000ac6 <HAL_SYSTICK_Config>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d112      	bne.n	800089e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d80a      	bhi.n	8000894 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	2301      	movs	r3, #1
 8000882:	425b      	negs	r3, r3
 8000884:	2200      	movs	r2, #0
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f908 	bl	8000a9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_InitTick+0x90>)
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	e00d      	b.n	80008b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000894:	230f      	movs	r3, #15
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e008      	b.n	80008b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800089e:	230f      	movs	r3, #15
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e003      	b.n	80008b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a8:	230f      	movs	r3, #15
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	781b      	ldrb	r3, [r3, #0]
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b005      	add	sp, #20
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x1c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001a      	movs	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x20>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	18d2      	adds	r2, r2, r3
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <HAL_IncTick+0x20>)
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000008 	.word	0x20000008
 80008ec:	200000b0 	.word	0x200000b0

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <HAL_GetTick+0x10>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	200000b0 	.word	0x200000b0

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	0003      	movs	r3, r0
 8000912:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3301      	adds	r3, #1
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_Delay+0x44>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	001a      	movs	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	189b      	adds	r3, r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	f7ff ffe0 	bl	80008f0 <HAL_GetTick>
 8000930:	0002      	movs	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b004      	add	sp, #16
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000008 	.word	0x20000008

0800094c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800095a:	4013      	ands	r3, r2
 800095c:	0019      	movs	r1, r3
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	430a      	orrs	r2, r1
 8000964:	601a      	str	r2, [r3, #0]
}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b002      	add	sp, #8
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	40010000 	.word	0x40010000
 8000974:	fffff9ff 	.word	0xfffff9ff

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	0002      	movs	r2, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b7f      	cmp	r3, #127	; 0x7f
 800098c:	d828      	bhi.n	80009e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <__NVIC_SetPriority+0xd4>)
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b25b      	sxtb	r3, r3
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	33c0      	adds	r3, #192	; 0xc0
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	589b      	ldr	r3, [r3, r2]
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	0011      	movs	r1, r2
 80009a4:	2203      	movs	r2, #3
 80009a6:	400a      	ands	r2, r1
 80009a8:	00d2      	lsls	r2, r2, #3
 80009aa:	21ff      	movs	r1, #255	; 0xff
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	401a      	ands	r2, r3
 80009b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	401a      	ands	r2, r3
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0018      	movs	r0, r3
 80009c4:	2303      	movs	r3, #3
 80009c6:	4003      	ands	r3, r0
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <__NVIC_SetPriority+0xd4>)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	430a      	orrs	r2, r1
 80009d8:	33c0      	adds	r3, #192	; 0xc0
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009de:	e031      	b.n	8000a44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <__NVIC_SetPriority+0xd8>)
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0019      	movs	r1, r3
 80009e8:	230f      	movs	r3, #15
 80009ea:	400b      	ands	r3, r1
 80009ec:	3b08      	subs	r3, #8
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3306      	adds	r3, #6
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	3304      	adds	r3, #4
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1dfa      	adds	r2, r7, #7
 80009fc:	7812      	ldrb	r2, [r2, #0]
 80009fe:	0011      	movs	r1, r2
 8000a00:	2203      	movs	r2, #3
 8000a02:	400a      	ands	r2, r1
 8000a04:	00d2      	lsls	r2, r2, #3
 8000a06:	21ff      	movs	r1, #255	; 0xff
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	000a      	movs	r2, r1
 8000a0c:	43d2      	mvns	r2, r2
 8000a0e:	401a      	ands	r2, r3
 8000a10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	019b      	lsls	r3, r3, #6
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	401a      	ands	r2, r3
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2303      	movs	r3, #3
 8000a22:	4003      	ands	r3, r0
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <__NVIC_SetPriority+0xd8>)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	001c      	movs	r4, r3
 8000a30:	230f      	movs	r3, #15
 8000a32:	4023      	ands	r3, r4
 8000a34:	3b08      	subs	r3, #8
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	3306      	adds	r3, #6
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	18c3      	adds	r3, r0, r3
 8000a40:	3304      	adds	r3, #4
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	045b      	lsls	r3, r3, #17
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d301      	bcc.n	8000a6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e010      	b.n	8000a8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <SysTick_Config+0x44>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	3a01      	subs	r2, #1
 8000a72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2103      	movs	r1, #3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff ff7c 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <SysTick_Config+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <SysTick_Config+0x44>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	1c02      	adds	r2, r0, #0
 8000aac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff5d 	bl	8000978 <__NVIC_SetPriority>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff ffbf 	bl	8000a54 <SysTick_Config>
 8000ad6:	0003      	movs	r3, r0
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aee:	e14d      	b.n	8000d8c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	4091      	lsls	r1, r2
 8000afa:	000a      	movs	r2, r1
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d100      	bne.n	8000b08 <HAL_GPIO_Init+0x28>
 8000b06:	e13e      	b.n	8000d86 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d005      	beq.n	8000b20 <HAL_GPIO_Init+0x40>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d130      	bne.n	8000b82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	0013      	movs	r3, r2
 8000b30:	43da      	mvns	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b56:	2201      	movs	r2, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2203      	movs	r2, #3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d017      	beq.n	8000bbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d123      	bne.n	8000c12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	08da      	lsrs	r2, r3, #3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3208      	adds	r2, #8
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	58d3      	ldr	r3, [r2, r3]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	2207      	movs	r2, #7
 8000bdc:	4013      	ands	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	220f      	movs	r2, #15
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	691a      	ldr	r2, [r3, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	2107      	movs	r1, #7
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	6939      	ldr	r1, [r7, #16]
 8000c10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	409a      	lsls	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	43da      	mvns	r2, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2203      	movs	r2, #3
 8000c30:	401a      	ands	r2, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	23c0      	movs	r3, #192	; 0xc0
 8000c4c:	029b      	lsls	r3, r3, #10
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d100      	bne.n	8000c54 <HAL_GPIO_Init+0x174>
 8000c52:	e098      	b.n	8000d86 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c54:	4a53      	ldr	r2, [pc, #332]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	589b      	ldr	r3, [r3, r2]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2203      	movs	r2, #3
 8000c66:	4013      	ands	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	220f      	movs	r2, #15
 8000c6c:	409a      	lsls	r2, r3
 8000c6e:	0013      	movs	r3, r2
 8000c70:	43da      	mvns	r2, r3
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d019      	beq.n	8000cb6 <HAL_GPIO_Init+0x1d6>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a48      	ldr	r2, [pc, #288]	; (8000da8 <HAL_GPIO_Init+0x2c8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d013      	beq.n	8000cb2 <HAL_GPIO_Init+0x1d2>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a47      	ldr	r2, [pc, #284]	; (8000dac <HAL_GPIO_Init+0x2cc>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d00d      	beq.n	8000cae <HAL_GPIO_Init+0x1ce>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d007      	beq.n	8000caa <HAL_GPIO_Init+0x1ca>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <HAL_GPIO_Init+0x2d4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_GPIO_Init+0x1c6>
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	e008      	b.n	8000cb8 <HAL_GPIO_Init+0x1d8>
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x1d8>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x1d8>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x1d8>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x1d8>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	2103      	movs	r1, #3
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	00d2      	lsls	r2, r2, #3
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000cc8:	4936      	ldr	r1, [pc, #216]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3318      	adds	r3, #24
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	035b      	lsls	r3, r3, #13
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	039b      	lsls	r3, r3, #14
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000d2c:	2384      	movs	r3, #132	; 0x84
 8000d2e:	58d3      	ldr	r3, [r2, r3]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	4013      	ands	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d50:	4914      	ldr	r1, [pc, #80]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000d52:	2284      	movs	r2, #132	; 0x84
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	58d3      	ldr	r3, [r2, r3]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	025b      	lsls	r3, r3, #9
 8000d72:	4013      	ands	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d7e:	4909      	ldr	r1, [pc, #36]	; (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	40da      	lsrs	r2, r3
 8000d94:	1e13      	subs	r3, r2, #0
 8000d96:	d000      	beq.n	8000d9a <HAL_GPIO_Init+0x2ba>
 8000d98:	e6aa      	b.n	8000af0 <HAL_GPIO_Init+0x10>
  }
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b006      	add	sp, #24
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021800 	.word	0x40021800
 8000da8:	50000400 	.word	0x50000400
 8000dac:	50000800 	.word	0x50000800
 8000db0:	50000c00 	.word	0x50000c00
 8000db4:	50001000 	.word	0x50001000

08000db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	0008      	movs	r0, r1
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	1cbb      	adds	r3, r7, #2
 8000dc6:	1c02      	adds	r2, r0, #0
 8000dc8:	801a      	strh	r2, [r3, #0]
 8000dca:	1c7b      	adds	r3, r7, #1
 8000dcc:	1c0a      	adds	r2, r1, #0
 8000dce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd0:	1c7b      	adds	r3, r7, #1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd8:	1cbb      	adds	r3, r7, #2
 8000dda:	881a      	ldrh	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de0:	e003      	b.n	8000dea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de2:	1cbb      	adds	r3, r7, #2
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e082      	b.n	8000f0c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2241      	movs	r2, #65	; 0x41
 8000e0a:	5c9b      	ldrb	r3, [r3, r2]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	2100      	movs	r1, #0
 8000e18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fbe1 	bl	80005e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2241      	movs	r2, #65	; 0x41
 8000e26:	2124      	movs	r1, #36	; 0x24
 8000e28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2101      	movs	r1, #1
 8000e36:	438a      	bics	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4934      	ldr	r1, [pc, #208]	; (8000f14 <HAL_I2C_Init+0x120>)
 8000e44:	400a      	ands	r2, r1
 8000e46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4931      	ldr	r1, [pc, #196]	; (8000f18 <HAL_I2C_Init+0x124>)
 8000e54:	400a      	ands	r2, r1
 8000e56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d108      	bne.n	8000e72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	0209      	lsls	r1, r1, #8
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e007      	b.n	8000e82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2184      	movs	r1, #132	; 0x84
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d104      	bne.n	8000e94 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	491f      	ldr	r1, [pc, #124]	; (8000f1c <HAL_I2C_Init+0x128>)
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	491a      	ldr	r1, [pc, #104]	; (8000f18 <HAL_I2C_Init+0x124>)
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69d9      	ldr	r1, [r3, #28]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2241      	movs	r2, #65	; 0x41
 8000ef8:	2120      	movs	r1, #32
 8000efa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2242      	movs	r2, #66	; 0x42
 8000f06:	2100      	movs	r1, #0
 8000f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	f0ffffff 	.word	0xf0ffffff
 8000f18:	ffff7fff 	.word	0xffff7fff
 8000f1c:	02008000 	.word	0x02008000

08000f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2241      	movs	r2, #65	; 0x41
 8000f2e:	5c9b      	ldrb	r3, [r3, r2]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	d138      	bne.n	8000fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2240      	movs	r2, #64	; 0x40
 8000f3a:	5c9b      	ldrb	r3, [r3, r2]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f40:	2302      	movs	r3, #2
 8000f42:	e032      	b.n	8000faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2240      	movs	r2, #64	; 0x40
 8000f48:	2101      	movs	r1, #1
 8000f4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2241      	movs	r2, #65	; 0x41
 8000f50:	2124      	movs	r1, #36	; 0x24
 8000f52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	438a      	bics	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4911      	ldr	r1, [pc, #68]	; (8000fb4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6819      	ldr	r1, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2241      	movs	r2, #65	; 0x41
 8000f98:	2120      	movs	r1, #32
 8000f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2240      	movs	r2, #64	; 0x40
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e000      	b.n	8000faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000fa8:	2302      	movs	r3, #2
  }
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	ffffefff 	.word	0xffffefff

08000fb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2241      	movs	r2, #65	; 0x41
 8000fc6:	5c9b      	ldrb	r3, [r3, r2]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b20      	cmp	r3, #32
 8000fcc:	d139      	bne.n	8001042 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	5c9b      	ldrb	r3, [r3, r2]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e033      	b.n	8001044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2240      	movs	r2, #64	; 0x40
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2241      	movs	r2, #65	; 0x41
 8000fe8:	2124      	movs	r1, #36	; 0x24
 8000fea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2241      	movs	r2, #65	; 0x41
 8001032:	2120      	movs	r1, #32
 8001034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2240      	movs	r2, #64	; 0x40
 800103a:	2100      	movs	r1, #0
 800103c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001042:	2302      	movs	r3, #2
  }
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}
 800104c:	fffff0ff 	.word	0xfffff0ff

08001050 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0f2      	b.n	8001248 <HAL_I2S_Init+0x1f8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2235      	movs	r2, #53	; 0x35
 8001066:	5c9b      	ldrb	r3, [r3, r2]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d107      	bne.n	800107e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2234      	movs	r2, #52	; 0x34
 8001072:	2100      	movs	r1, #0
 8001074:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fb15 	bl	80006a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2235      	movs	r2, #53	; 0x35
 8001082:	2102      	movs	r1, #2
 8001084:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69da      	ldr	r2, [r3, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	496f      	ldr	r1, [pc, #444]	; (8001250 <HAL_I2S_Init+0x200>)
 8001092:	400a      	ands	r2, r1
 8001094:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2202      	movs	r2, #2
 800109c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d100      	bne.n	80010a8 <HAL_I2S_Init+0x58>
 80010a6:	e083      	b.n	80011b0 <HAL_I2S_Init+0x160>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80010b0:	2310      	movs	r3, #16
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e001      	b.n	80010ba <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80010b6:	2320      	movs	r3, #32
 80010b8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b20      	cmp	r3, #32
 80010c0:	d802      	bhi.n	80010c8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
    }

#if defined (RCC_PERIPHCLK_I2S2)
    if (hi2s->Instance == SPI1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a61      	ldr	r2, [pc, #388]	; (8001254 <HAL_I2S_Init+0x204>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d107      	bne.n	80010e2 <HAL_I2S_Init+0x92>
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 f982 	bl	80023e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80010dc:	0003      	movs	r3, r0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	e006      	b.n	80010f0 <HAL_I2S_Init+0xa0>
    }
    else /* SPI2 case */
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	019b      	lsls	r3, r3, #6
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 f97a 	bl	80023e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80010ec:	0003      	movs	r3, r0
 80010ee:	60fb      	str	r3, [r7, #12]
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d131      	bne.n	8001160 <HAL_I2S_Init+0x110>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d016      	beq.n	8001132 <HAL_I2S_Init+0xe2>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	0019      	movs	r1, r3
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7fe fffa 	bl	8000104 <__udivsi3>
 8001110:	0003      	movs	r3, r0
 8001112:	001a      	movs	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	189b      	adds	r3, r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	001a      	movs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	0019      	movs	r1, r3
 8001124:	0010      	movs	r0, r2
 8001126:	f7fe ffed 	bl	8000104 <__udivsi3>
 800112a:	0003      	movs	r3, r0
 800112c:	3305      	adds	r3, #5
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	e02a      	b.n	8001188 <HAL_I2S_Init+0x138>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	0019      	movs	r1, r3
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7fe ffe3 	bl	8000104 <__udivsi3>
 800113e:	0003      	movs	r3, r0
 8001140:	001a      	movs	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	189b      	adds	r3, r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	001a      	movs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	0019      	movs	r1, r3
 8001152:	0010      	movs	r0, r2
 8001154:	f7fe ffd6 	bl	8000104 <__udivsi3>
 8001158:	0003      	movs	r3, r0
 800115a:	3305      	adds	r3, #5
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	e013      	b.n	8001188 <HAL_I2S_Init+0x138>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001160:	6979      	ldr	r1, [r7, #20]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7fe ffce 	bl	8000104 <__udivsi3>
 8001168:	0003      	movs	r3, r0
 800116a:	001a      	movs	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	189b      	adds	r3, r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	001a      	movs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	0019      	movs	r1, r3
 800117c:	0010      	movs	r0, r2
 800117e:	f7fe ffc1 	bl	8000104 <__udivsi3>
 8001182:	0003      	movs	r3, r0
 8001184:	3305      	adds	r3, #5
 8001186:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	210a      	movs	r1, #10
 800118c:	0018      	movs	r0, r3
 800118e:	f7fe ffb9 	bl	8000104 <__udivsi3>
 8001192:	0003      	movs	r3, r0
 8001194:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	e003      	b.n	80011b8 <HAL_I2S_Init+0x168>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d902      	bls.n	80011c4 <HAL_I2S_Init+0x174>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	2bff      	cmp	r3, #255	; 0xff
 80011c2:	d907      	bls.n	80011d4 <HAL_I2S_Init+0x184>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c8:	2210      	movs	r2, #16
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e039      	b.n	8001248 <HAL_I2S_Init+0x1f8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	431a      	orrs	r2, r3
 80011dc:	0011      	movs	r1, r2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <HAL_I2S_Init+0x200>)
 80011f0:	401a      	ands	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6859      	ldr	r1, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	4319      	orrs	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4319      	orrs	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	430b      	orrs	r3, r1
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	0109      	lsls	r1, r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b30      	cmp	r3, #48	; 0x30
 800121c:	d003      	beq.n	8001226 <HAL_I2S_Init+0x1d6>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2bb0      	cmp	r3, #176	; 0xb0
 8001224:	d108      	bne.n	8001238 <HAL_I2S_Init+0x1e8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	69da      	ldr	r2, [r3, #28]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	0149      	lsls	r1, r1, #5
 8001234:	430a      	orrs	r2, r1
 8001236:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2235      	movs	r2, #53	; 0x35
 8001242:	2101      	movs	r1, #1
 8001244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b008      	add	sp, #32
 800124e:	bd80      	pop	{r7, pc}
 8001250:	fffff040 	.word	0xfffff040
 8001254:	40013000 	.word	0x40013000

08001258 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	1dbb      	adds	r3, r7, #6
 8001266:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_I2S_Transmit+0x1e>
 800126e:	1dbb      	adds	r3, r7, #6
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0e2      	b.n	8001440 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2234      	movs	r2, #52	; 0x34
 800127e:	5c9b      	ldrb	r3, [r3, r2]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_I2S_Transmit+0x32>
 8001286:	2302      	movs	r3, #2
 8001288:	e0da      	b.n	8001440 <HAL_I2S_Transmit+0x1e8>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2234      	movs	r2, #52	; 0x34
 800128e:	2101      	movs	r1, #1
 8001290:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2235      	movs	r2, #53	; 0x35
 8001296:	5c9b      	ldrb	r3, [r3, r2]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2234      	movs	r2, #52	; 0x34
 80012a2:	2100      	movs	r1, #0
 80012a4:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
 80012a8:	e0ca      	b.n	8001440 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2235      	movs	r2, #53	; 0x35
 80012ae:	2103      	movs	r1, #3
 80012b0:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2207      	movs	r2, #7
 80012c6:	4013      	ands	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b03      	cmp	r3, #3
 80012ce:	d002      	beq.n	80012d6 <HAL_I2S_Transmit+0x7e>
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d10c      	bne.n	80012f0 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 80012d6:	1dbb      	adds	r3, r7, #6
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	18db      	adds	r3, r3, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80012e2:	1dbb      	adds	r3, r7, #6
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	18db      	adds	r3, r3, r3
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	845a      	strh	r2, [r3, #34]	; 0x22
 80012ee:	e007      	b.n	8001300 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1dba      	adds	r2, r7, #6
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1dba      	adds	r2, r7, #6
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	401a      	ands	r2, r3
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	429a      	cmp	r2, r3
 800131a:	d008      	beq.n	800132e <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2180      	movs	r1, #128	; 0x80
 8001328:	00c9      	lsls	r1, r1, #3
 800132a:	430a      	orrs	r2, r1
 800132c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	2102      	movs	r1, #2
 8001336:	f000 f887 	bl	8001448 <I2S_WaitFlagStateUntilTimeout>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d04d      	beq.n	80013da <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001342:	2201      	movs	r2, #1
 8001344:	431a      	orrs	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2235      	movs	r2, #53	; 0x35
 800134e:	2101      	movs	r1, #1
 8001350:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2234      	movs	r2, #52	; 0x34
 8001356:	2100      	movs	r1, #0
 8001358:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e070      	b.n	8001440 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	881a      	ldrh	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	1c9a      	adds	r2, r3, #2
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001378:	b29b      	uxth	r3, r3
 800137a:	3b01      	subs	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	2201      	movs	r2, #1
 8001388:	2102      	movs	r1, #2
 800138a:	f000 f85d 	bl	8001448 <I2S_WaitFlagStateUntilTimeout>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d00f      	beq.n	80013b2 <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	2201      	movs	r2, #1
 8001398:	431a      	orrs	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2235      	movs	r2, #53	; 0x35
 80013a2:	2101      	movs	r1, #1
 80013a4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2234      	movs	r2, #52	; 0x34
 80013aa:	2100      	movs	r1, #0
 80013ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e046      	b.n	8001440 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2208      	movs	r2, #8
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d10c      	bne.n	80013da <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	2204      	movs	r2, #4
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80013de:	b29b      	uxth	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1bc      	bne.n	800135e <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	23c0      	movs	r3, #192	; 0xc0
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	401a      	ands	r2, r3
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d117      	bne.n	800142e <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	f000 f81f 	bl	8001448 <I2S_WaitFlagStateUntilTimeout>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d00f      	beq.n	800142e <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	2201      	movs	r2, #1
 8001414:	431a      	orrs	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2235      	movs	r2, #53	; 0x35
 800141e:	2101      	movs	r1, #1
 8001420:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2234      	movs	r2, #52	; 0x34
 8001426:	2100      	movs	r1, #0
 8001428:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e008      	b.n	8001440 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2235      	movs	r2, #53	; 0x35
 8001432:	2101      	movs	r1, #1
 8001434:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2234      	movs	r2, #52	; 0x34
 800143a:	2100      	movs	r1, #0
 800143c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	0018      	movs	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	b006      	add	sp, #24
 8001446:	bd80      	pop	{r7, pc}

08001448 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001458:	f7ff fa4a 	bl	80008f0 <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001460:	e017      	b.n	8001492 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	d014      	beq.n	8001492 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8001468:	f7ff fa42 	bl	80008f0 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d902      	bls.n	800147e <I2S_WaitFlagStateUntilTimeout+0x36>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2235      	movs	r2, #53	; 0x35
 8001482:	2101      	movs	r1, #1
 8001484:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2234      	movs	r2, #52	; 0x34
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e00f      	b.n	80014b2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	4013      	ands	r3, r2
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	425a      	negs	r2, r3
 80014a2:	4153      	adcs	r3, r2
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	001a      	movs	r2, r3
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1d8      	bne.n	8001462 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b006      	add	sp, #24
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	0019      	movs	r1, r3
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	429a      	cmp	r2, r3
 80014de:	d11f      	bne.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	0013      	movs	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	189b      	adds	r3, r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4912      	ldr	r1, [pc, #72]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7fe fe08 	bl	8000104 <__udivsi3>
 80014f4:	0003      	movs	r3, r0
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014fa:	e008      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	3b01      	subs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e001      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e009      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	401a      	ands	r2, r3
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	429a      	cmp	r2, r3
 800151e:	d0ed      	beq.n	80014fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40007000 	.word	0x40007000
 8001530:	fffff9ff 	.word	0xfffff9ff
 8001534:	20000000 	.word	0x20000000
 8001538:	000f4240 	.word	0x000f4240

0800153c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	23e0      	movs	r3, #224	; 0xe0
 8001546:	01db      	lsls	r3, r3, #7
 8001548:	4013      	ands	r3, r2
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	f000 fb50 	bl	8001c08 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x20>
 8001572:	e07c      	b.n	800166e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001574:	4bc3      	ldr	r3, [pc, #780]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2238      	movs	r2, #56	; 0x38
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157e:	4bc1      	ldr	r3, [pc, #772]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2203      	movs	r2, #3
 8001584:	4013      	ands	r3, r2
 8001586:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b10      	cmp	r3, #16
 800158c:	d102      	bne.n	8001594 <HAL_RCC_OscConfig+0x40>
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d002      	beq.n	800159a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b08      	cmp	r3, #8
 8001598:	d10b      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4bba      	ldr	r3, [pc, #744]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d062      	beq.n	800166c <HAL_RCC_OscConfig+0x118>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d15e      	bne.n	800166c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e32a      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	025b      	lsls	r3, r3, #9
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_OscConfig+0x7a>
 80015be:	4bb1      	ldr	r3, [pc, #708]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4bb0      	ldr	r3, [pc, #704]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0249      	lsls	r1, r1, #9
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e020      	b.n	8001610 <HAL_RCC_OscConfig+0xbc>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	23a0      	movs	r3, #160	; 0xa0
 80015d4:	02db      	lsls	r3, r3, #11
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d10e      	bne.n	80015f8 <HAL_RCC_OscConfig+0xa4>
 80015da:	4baa      	ldr	r3, [pc, #680]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4ba9      	ldr	r3, [pc, #676]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	02c9      	lsls	r1, r1, #11
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	4ba6      	ldr	r3, [pc, #664]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4ba5      	ldr	r3, [pc, #660]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0249      	lsls	r1, r1, #9
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0xbc>
 80015f8:	4ba2      	ldr	r3, [pc, #648]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4ba1      	ldr	r3, [pc, #644]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80015fe:	49a2      	ldr	r1, [pc, #648]	; (8001888 <HAL_RCC_OscConfig+0x334>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	4b9f      	ldr	r3, [pc, #636]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b9e      	ldr	r3, [pc, #632]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800160a:	49a0      	ldr	r1, [pc, #640]	; (800188c <HAL_RCC_OscConfig+0x338>)
 800160c:	400a      	ands	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d014      	beq.n	8001642 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff f96a 	bl	80008f0 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001622:	f7ff f965 	bl	80008f0 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e2e9      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001634:	4b93      	ldr	r3, [pc, #588]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	029b      	lsls	r3, r3, #10
 800163c:	4013      	ands	r3, r2
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0xce>
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff f955 	bl	80008f0 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff f950 	bl	80008f0 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e2d4      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	4b89      	ldr	r3, [pc, #548]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	029b      	lsls	r3, r3, #10
 8001666:	4013      	ands	r3, r2
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0xf8>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2202      	movs	r2, #2
 8001674:	4013      	ands	r3, r2
 8001676:	d100      	bne.n	800167a <HAL_RCC_OscConfig+0x126>
 8001678:	e099      	b.n	80017ae <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167a:	4b82      	ldr	r3, [pc, #520]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2238      	movs	r2, #56	; 0x38
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001684:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2203      	movs	r2, #3
 800168a:	4013      	ands	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b10      	cmp	r3, #16
 8001692:	d102      	bne.n	800169a <HAL_RCC_OscConfig+0x146>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d135      	bne.n	800170c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	4b78      	ldr	r3, [pc, #480]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x164>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e2a7      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b72      	ldr	r3, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a74      	ldr	r2, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x33c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	021a      	lsls	r2, r3, #8
 80016c8:	4b6e      	ldr	r3, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d112      	bne.n	80016fa <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016d4:	4b6b      	ldr	r3, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6e      	ldr	r2, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x340>)
 80016da:	4013      	ands	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016e8:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0adb      	lsrs	r3, r3, #11
 80016ee:	2207      	movs	r2, #7
 80016f0:	4013      	ands	r3, r2
 80016f2:	4a69      	ldr	r2, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x344>)
 80016f4:	40da      	lsrs	r2, r3
 80016f6:	4b69      	ldr	r3, [pc, #420]	; (800189c <HAL_RCC_OscConfig+0x348>)
 80016f8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <HAL_RCC_OscConfig+0x34c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff f89a 	bl	8000838 <HAL_InitTick>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d051      	beq.n	80017ac <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e27d      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d030      	beq.n	8001776 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001714:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a5e      	ldr	r2, [pc, #376]	; (8001894 <HAL_RCC_OscConfig+0x340>)
 800171a:	4013      	ands	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b55      	ldr	r3, [pc, #340]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	0049      	lsls	r1, r1, #1
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff f8db 	bl	80008f0 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001740:	f7ff f8d6 	bl	80008f0 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e25a      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001752:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4013      	ands	r3, r2
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b49      	ldr	r3, [pc, #292]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_RCC_OscConfig+0x33c>)
 8001764:	4013      	ands	r3, r2
 8001766:	0019      	movs	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	021a      	lsls	r2, r3, #8
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	e01b      	b.n	80017ae <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b42      	ldr	r3, [pc, #264]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800177c:	4949      	ldr	r1, [pc, #292]	; (80018a4 <HAL_RCC_OscConfig+0x350>)
 800177e:	400a      	ands	r2, r1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff f8b5 	bl	80008f0 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff f8b0 	bl	80008f0 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e234      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800179e:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4013      	ands	r3, r2
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x238>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2208      	movs	r2, #8
 80017b4:	4013      	ands	r3, r2
 80017b6:	d047      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2238      	movs	r2, #56	; 0x38
 80017be:	4013      	ands	r3, r2
 80017c0:	2b18      	cmp	r3, #24
 80017c2:	d10a      	bne.n	80017da <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d03c      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f4>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d138      	bne.n	8001848 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e216      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d019      	beq.n	8001816 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80017e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff f87f 	bl	80008f0 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff f87a 	bl	80008f0 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1fe      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d0f1      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2a4>
 8001814:	e018      	b.n	8001848 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800181c:	2101      	movs	r1, #1
 800181e:	438a      	bics	r2, r1
 8001820:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff f865 	bl	80008f0 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff f860 	bl	80008f0 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1e4      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d1f1      	bne.n	800182c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2204      	movs	r2, #4
 800184e:	4013      	ands	r3, r2
 8001850:	d100      	bne.n	8001854 <HAL_RCC_OscConfig+0x300>
 8001852:	e0c7      	b.n	80019e4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001854:	231f      	movs	r3, #31
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2238      	movs	r2, #56	; 0x38
 8001862:	4013      	ands	r3, r2
 8001864:	2b20      	cmp	r3, #32
 8001866:	d11f      	bne.n	80018a8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_OscConfig+0x330>)
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d100      	bne.n	8001874 <HAL_RCC_OscConfig+0x320>
 8001872:	e0b7      	b.n	80019e4 <HAL_RCC_OscConfig+0x490>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d000      	beq.n	800187e <HAL_RCC_OscConfig+0x32a>
 800187c:	e0b2      	b.n	80019e4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e1c2      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	40021000 	.word	0x40021000
 8001888:	fffeffff 	.word	0xfffeffff
 800188c:	fffbffff 	.word	0xfffbffff
 8001890:	ffff80ff 	.word	0xffff80ff
 8001894:	ffffc7ff 	.word	0xffffc7ff
 8001898:	00f42400 	.word	0x00f42400
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004
 80018a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018a8:	4bb5      	ldr	r3, [pc, #724]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80018aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	055b      	lsls	r3, r3, #21
 80018b0:	4013      	ands	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_OscConfig+0x364>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x366>
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d011      	beq.n	80018e2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018be:	4bb0      	ldr	r3, [pc, #704]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80018c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c2:	4baf      	ldr	r3, [pc, #700]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	0549      	lsls	r1, r1, #21
 80018c8:	430a      	orrs	r2, r1
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80018cc:	4bac      	ldr	r3, [pc, #688]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80018ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	055b      	lsls	r3, r3, #21
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018da:	231f      	movs	r3, #31
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e2:	4ba8      	ldr	r3, [pc, #672]	; (8001b84 <HAL_RCC_OscConfig+0x630>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d11a      	bne.n	8001924 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ee:	4ba5      	ldr	r3, [pc, #660]	; (8001b84 <HAL_RCC_OscConfig+0x630>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4ba4      	ldr	r3, [pc, #656]	; (8001b84 <HAL_RCC_OscConfig+0x630>)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	0049      	lsls	r1, r1, #1
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018fc:	f7fe fff8 	bl	80008f0 <HAL_GetTick>
 8001900:	0003      	movs	r3, r0
 8001902:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7fe fff3 	bl	80008f0 <HAL_GetTick>
 800190a:	0002      	movs	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e177      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001918:	4b9a      	ldr	r3, [pc, #616]	; (8001b84 <HAL_RCC_OscConfig+0x630>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4013      	ands	r3, r2
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x3e6>
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 800192e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001930:	4b93      	ldr	r3, [pc, #588]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001932:	2101      	movs	r1, #1
 8001934:	430a      	orrs	r2, r1
 8001936:	65da      	str	r2, [r3, #92]	; 0x5c
 8001938:	e01c      	b.n	8001974 <HAL_RCC_OscConfig+0x420>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x408>
 8001942:	4b8f      	ldr	r3, [pc, #572]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001946:	4b8e      	ldr	r3, [pc, #568]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001948:	2104      	movs	r1, #4
 800194a:	430a      	orrs	r2, r1
 800194c:	65da      	str	r2, [r3, #92]	; 0x5c
 800194e:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001950:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001952:	4b8b      	ldr	r3, [pc, #556]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001954:	2101      	movs	r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0x420>
 800195c:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 800195e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001960:	4b87      	ldr	r3, [pc, #540]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001962:	2101      	movs	r1, #1
 8001964:	438a      	bics	r2, r1
 8001966:	65da      	str	r2, [r3, #92]	; 0x5c
 8001968:	4b85      	ldr	r3, [pc, #532]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 800196a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 800196e:	2104      	movs	r1, #4
 8001970:	438a      	bics	r2, r1
 8001972:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d014      	beq.n	80019a6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7fe ffb8 	bl	80008f0 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001984:	e009      	b.n	800199a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7fe ffb3 	bl	80008f0 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a7d      	ldr	r2, [pc, #500]	; (8001b88 <HAL_RCC_OscConfig+0x634>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e136      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199a:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x432>
 80019a4:	e013      	b.n	80019ce <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	f7fe ffa3 	bl	80008f0 <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ae:	e009      	b.n	80019c4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7fe ff9e 	bl	80008f0 <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	4a73      	ldr	r2, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x634>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e121      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c4:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80019c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c8:	2202      	movs	r2, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019ce:	231f      	movs	r3, #31
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80019da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80019de:	496b      	ldr	r1, [pc, #428]	; (8001b8c <HAL_RCC_OscConfig+0x638>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2220      	movs	r2, #32
 80019ea:	4013      	ands	r3, r2
 80019ec:	d039      	beq.n	8001a62 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d01b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f6:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b61      	ldr	r3, [pc, #388]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	03c9      	lsls	r1, r1, #15
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7fe ff74 	bl	80008f0 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0e:	f7fe ff6f 	bl	80008f0 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0f3      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a20:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x4ba>
 8001a2c:	e019      	b.n	8001a62 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a34:	4956      	ldr	r1, [pc, #344]	; (8001b90 <HAL_RCC_OscConfig+0x63c>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7fe ff59 	bl	80008f0 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a44:	f7fe ff54 	bl	80008f0 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0d8      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d100      	bne.n	8001a6c <HAL_RCC_OscConfig+0x518>
 8001a6a:	e0cc      	b.n	8001c06 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2238      	movs	r2, #56	; 0x38
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d100      	bne.n	8001a7a <HAL_RCC_OscConfig+0x526>
 8001a78:	e07b      	b.n	8001b72 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d156      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001a88:	4942      	ldr	r1, [pc, #264]	; (8001b94 <HAL_RCC_OscConfig+0x640>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7fe ff2f 	bl	80008f0 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7fe ff2a 	bl	80008f0 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0ae      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aaa:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	049b      	lsls	r3, r3, #18
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4a37      	ldr	r2, [pc, #220]	; (8001b98 <HAL_RCC_OscConfig+0x644>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0449      	lsls	r1, r1, #17
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	0549      	lsls	r1, r1, #21
 8001b02:	430a      	orrs	r2, r1
 8001b04:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7fe fef3 	bl	80008f0 <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7fe feee 	bl	80008f0 <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e072      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	049b      	lsls	r3, r3, #18
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x5bc>
 8001b2e:	e06a      	b.n	8001c06 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001b36:	4917      	ldr	r1, [pc, #92]	; (8001b94 <HAL_RCC_OscConfig+0x640>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7fe fed8 	bl	80008f0 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7fe fed3 	bl	80008f0 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e057      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	049b      	lsls	r3, r3, #18
 8001b60:	4013      	ands	r3, r2
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_OscConfig+0x62c>)
 8001b6a:	490c      	ldr	r1, [pc, #48]	; (8001b9c <HAL_RCC_OscConfig+0x648>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	e049      	b.n	8001c06 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e044      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40007000 	.word	0x40007000
 8001b88:	00001388 	.word	0x00001388
 8001b8c:	efffffff 	.word	0xefffffff
 8001b90:	ffbfffff 	.word	0xffbfffff
 8001b94:	feffffff 	.word	0xfeffffff
 8001b98:	11c1808c 	.word	0x11c1808c
 8001b9c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x6bc>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d126      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2270      	movs	r2, #112	; 0x70
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11f      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	23fe      	movs	r3, #254	; 0xfe
 8001bc6:	01db      	lsls	r3, r3, #7
 8001bc8:	401a      	ands	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d116      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	23f8      	movs	r3, #248	; 0xf8
 8001bd8:	039b      	lsls	r3, r3, #14
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10e      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	23e0      	movs	r3, #224	; 0xe0
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	0f5b      	lsrs	r3, r3, #29
 8001bf8:	075a      	lsls	r2, r3, #29
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b008      	add	sp, #32
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0e9      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d91e      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	4393      	bics	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c48:	f7fe fe52 	bl	80008f0 <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c50:	e009      	b.n	8001c66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c52:	f7fe fe4d 	bl	80008f0 <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1f4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0ca      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d1ee      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d015      	beq.n	8001caa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2204      	movs	r2, #4
 8001c84:	4013      	ands	r3, r2
 8001c86:	d006      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c88:	4b60      	ldr	r3, [pc, #384]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001c8e:	21e0      	movs	r1, #224	; 0xe0
 8001c90:	01c9      	lsls	r1, r1, #7
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4a5d      	ldr	r2, [pc, #372]	; (8001e10 <HAL_RCC_ClockConfig+0x1fc>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d057      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	029b      	lsls	r3, r3, #10
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d12b      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e097      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	049b      	lsls	r3, r3, #18
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d11f      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e08b      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cec:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d113      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e07f      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d04:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d08:	2202      	movs	r2, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e074      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2202      	movs	r2, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e06d      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d20:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2207      	movs	r2, #7
 8001d26:	4393      	bics	r3, r2
 8001d28:	0019      	movs	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d34:	f7fe fddc 	bl	80008f0 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3e:	f7fe fdd7 	bl	80008f0 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <HAL_RCC_ClockConfig+0x1f4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e054      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2238      	movs	r2, #56	; 0x38
 8001d58:	401a      	ands	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d1ec      	bne.n	8001d3e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2207      	movs	r2, #7
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d21e      	bcs.n	8001db0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2207      	movs	r2, #7
 8001d78:	4393      	bics	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d84:	f7fe fdb4 	bl	80008f0 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7fe fdaf 	bl	80008f0 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_RCC_ClockConfig+0x1f4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e02c      	b.n	8001dfc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2207      	movs	r2, #7
 8001da8:	4013      	ands	r3, r2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1ee      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2204      	movs	r2, #4
 8001db6:	4013      	ands	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <HAL_RCC_ClockConfig+0x200>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dce:	f000 f829 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001dd2:	0001      	movs	r1, r0
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	220f      	movs	r2, #15
 8001ddc:	401a      	ands	r2, r3
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_RCC_ClockConfig+0x204>)
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	58d3      	ldr	r3, [r2, r3]
 8001de4:	221f      	movs	r2, #31
 8001de6:	4013      	ands	r3, r2
 8001de8:	000a      	movs	r2, r1
 8001dea:	40da      	lsrs	r2, r3
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x208>)
 8001dee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCC_ClockConfig+0x20c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7fe fd1f 	bl	8000838 <HAL_InitTick>
 8001dfa:	0003      	movs	r3, r0
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b004      	add	sp, #16
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40022000 	.word	0x40022000
 8001e08:	00001388 	.word	0x00001388
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	fffff0ff 	.word	0xfffff0ff
 8001e14:	ffff8fff 	.word	0xffff8fff
 8001e18:	08016580 	.word	0x08016580
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2238      	movs	r2, #56	; 0x38
 8001e30:	4013      	ands	r3, r2
 8001e32:	d10f      	bne.n	8001e54 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e34:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0adb      	lsrs	r3, r3, #11
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2201      	movs	r2, #1
 8001e40:	409a      	lsls	r2, r3
 8001e42:	0013      	movs	r3, r2
 8001e44:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	4835      	ldr	r0, [pc, #212]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e4a:	f7fe f95b 	bl	8000104 <__udivsi3>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	e05d      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2238      	movs	r2, #56	; 0x38
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	e054      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e66:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2238      	movs	r2, #56	; 0x38
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d138      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2203      	movs	r2, #3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	3301      	adds	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d10d      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	4824      	ldr	r0, [pc, #144]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e94:	f7fe f936 	bl	8000104 <__udivsi3>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	227f      	movs	r2, #127	; 0x7f
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	434b      	muls	r3, r1
 8001ea8:	617b      	str	r3, [r7, #20]
        break;
 8001eaa:	e00d      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	481c      	ldr	r0, [pc, #112]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eb0:	f7fe f928 	bl	8000104 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	227f      	movs	r2, #127	; 0x7f
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	434b      	muls	r3, r1
 8001ec4:	617b      	str	r3, [r7, #20]
        break;
 8001ec6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0f5b      	lsrs	r3, r3, #29
 8001ece:	2207      	movs	r2, #7
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	6978      	ldr	r0, [r7, #20]
 8001eda:	f7fe f913 	bl	8000104 <__udivsi3>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e015      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2238      	movs	r2, #56	; 0x38
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d103      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2238      	movs	r2, #56	; 0x38
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b18      	cmp	r3, #24
 8001f02:	d103      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f04:	23fa      	movs	r3, #250	; 0xfa
 8001f06:	01db      	lsls	r3, r3, #7
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e001      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f10:	693b      	ldr	r3, [r7, #16]
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b006      	add	sp, #24
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	007a1200 	.word	0x007a1200

08001f28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	20000000 	.word	0x20000000

08001f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f3c:	b5b0      	push	{r4, r5, r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f40:	f7ff fff2 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f44:	0004      	movs	r4, r0
 8001f46:	f7ff faf9 	bl	800153c <LL_RCC_GetAPB1Prescaler>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	0b1a      	lsrs	r2, r3, #12
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	58d3      	ldr	r3, [r2, r3]
 8001f54:	221f      	movs	r2, #31
 8001f56:	4013      	ands	r3, r2
 8001f58:	40dc      	lsrs	r4, r3
 8001f5a:	0023      	movs	r3, r4
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bdb0      	pop	{r4, r5, r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	080165c0 	.word	0x080165c0

08001f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f70:	2313      	movs	r3, #19
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f78:	2312      	movs	r3, #18
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	029b      	lsls	r3, r3, #10
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d100      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f8c:	e0ad      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2011      	movs	r0, #17
 8001f90:	183b      	adds	r3, r7, r0
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	055b      	lsls	r3, r3, #21
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d110      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fa6:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0549      	lsls	r1, r1, #21
 8001fac:	430a      	orrs	r2, r1
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fb0:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	055b      	lsls	r3, r3, #21
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	0049      	lsls	r1, r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd2:	f7fe fc8d 	bl	80008f0 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe fc88 	bl	80008f0 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d904      	bls.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fea:	2313      	movs	r3, #19
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2203      	movs	r2, #3
 8001ff0:	701a      	strb	r2, [r3, #0]
        break;
 8001ff2:	e005      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0ed      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002000:	2313      	movs	r3, #19
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d15e      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800200c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800200e:	23c0      	movs	r3, #192	; 0xc0
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4013      	ands	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d019      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	429a      	cmp	r2, r3
 8002024:	d014      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002026:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002032:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0249      	lsls	r1, r1, #9
 800203a:	430a      	orrs	r2, r1
 800203c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002040:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002044:	491e      	ldr	r1, [pc, #120]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002046:	400a      	ands	r2, r1
 8002048:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d016      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fc4a 	bl	80008f0 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002060:	e00c      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fc45 	bl	80008f0 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d904      	bls.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002072:	2313      	movs	r3, #19
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2203      	movs	r2, #3
 8002078:	701a      	strb	r2, [r3, #0]
            break;
 800207a:	e004      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d0ed      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002086:	2313      	movs	r3, #19
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10a      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80020a4:	e016      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020a6:	2312      	movs	r3, #18
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	2213      	movs	r2, #19
 80020ac:	18ba      	adds	r2, r7, r2
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e00f      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
 80020bc:	fffffcff 	.word	0xfffffcff
 80020c0:	fffeffff 	.word	0xfffeffff
 80020c4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c8:	2312      	movs	r3, #18
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2213      	movs	r2, #19
 80020ce:	18ba      	adds	r2, r7, r2
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d4:	2311      	movs	r3, #17
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4bb6      	ldr	r3, [pc, #728]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e2:	4bb5      	ldr	r3, [pc, #724]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020e4:	49b5      	ldr	r1, [pc, #724]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d009      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f4:	4bb0      	ldr	r3, [pc, #704]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	2203      	movs	r2, #3
 80020fa:	4393      	bics	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4bad      	ldr	r3, [pc, #692]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002104:	430a      	orrs	r2, r1
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002112:	4ba9      	ldr	r3, [pc, #676]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	220c      	movs	r2, #12
 8002118:	4393      	bics	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4ba5      	ldr	r3, [pc, #660]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002122:	430a      	orrs	r2, r1
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002130:	4ba1      	ldr	r3, [pc, #644]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	2230      	movs	r2, #48	; 0x30
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002140:	430a      	orrs	r2, r1
 8002142:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2210      	movs	r2, #16
 800214a:	4013      	ands	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800214e:	4b9a      	ldr	r3, [pc, #616]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	4a9b      	ldr	r2, [pc, #620]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	4b96      	ldr	r3, [pc, #600]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215e:	430a      	orrs	r2, r1
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4013      	ands	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800216e:	4b92      	ldr	r3, [pc, #584]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	4a94      	ldr	r2, [pc, #592]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002174:	4013      	ands	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800217e:	430a      	orrs	r2, r1
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800218e:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	4a8d      	ldr	r2, [pc, #564]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219c:	4b86      	ldr	r3, [pc, #536]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4013      	ands	r3, r2
 80021ac:	d009      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021ae:	4b82      	ldr	r3, [pc, #520]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	4a86      	ldr	r2, [pc, #536]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2220      	movs	r2, #32
 80021c8:	4013      	ands	r3, r2
 80021ca:	d009      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021cc:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	4a7f      	ldr	r2, [pc, #508]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	4b77      	ldr	r3, [pc, #476]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021dc:	430a      	orrs	r2, r1
 80021de:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2240      	movs	r2, #64	; 0x40
 80021e6:	4013      	ands	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ea:	4b73      	ldr	r3, [pc, #460]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	4a79      	ldr	r2, [pc, #484]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	01db      	lsls	r3, r3, #7
 8002206:	4013      	ands	r3, r2
 8002208:	d015      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800220a:	4b6b      	ldr	r3, [pc, #428]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	0899      	lsrs	r1, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002216:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002218:	430a      	orrs	r2, r1
 800221a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	05db      	lsls	r3, r3, #23
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002228:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	0249      	lsls	r1, r1, #9
 8002232:	430a      	orrs	r2, r1
 8002234:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	031b      	lsls	r3, r3, #12
 800223e:	4013      	ands	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002242:	4b5d      	ldr	r3, [pc, #372]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	4393      	bics	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002250:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002252:	430a      	orrs	r2, r1
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	039b      	lsls	r3, r3, #14
 800225e:	4013      	ands	r3, r2
 8002260:	d016      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002262:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	4a5c      	ldr	r2, [pc, #368]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002270:	4b51      	ldr	r3, [pc, #324]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002272:	430a      	orrs	r2, r1
 8002274:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	03db      	lsls	r3, r3, #15
 800227e:	429a      	cmp	r2, r3
 8002280:	d106      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002282:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	0449      	lsls	r1, r1, #17
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	03db      	lsls	r3, r3, #15
 8002298:	4013      	ands	r3, r2
 800229a:	d016      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	045b      	lsls	r3, r3, #17
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d106      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	0449      	lsls	r1, r1, #17
 80022c6:	430a      	orrs	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4013      	ands	r3, r2
 80022d4:	d014      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022d6:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	2203      	movs	r2, #3
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d106      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022f2:	4b31      	ldr	r3, [pc, #196]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	0249      	lsls	r1, r1, #9
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	019b      	lsls	r3, r3, #6
 8002308:	4013      	ands	r3, r2
 800230a:	d014      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	220c      	movs	r2, #12
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231a:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800231c:	430a      	orrs	r2, r1
 800231e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	2b04      	cmp	r3, #4
 8002326:	d106      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0249      	lsls	r1, r1, #9
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	045b      	lsls	r3, r3, #17
 800233e:	4013      	ands	r3, r2
 8002340:	d016      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002348:	4013      	ands	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002352:	430a      	orrs	r2, r1
 8002354:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	019b      	lsls	r3, r3, #6
 800235e:	429a      	cmp	r2, r3
 8002360:	d106      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	0449      	lsls	r1, r1, #17
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	049b      	lsls	r3, r3, #18
 8002378:	4013      	ands	r3, r2
 800237a:	d016      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800238c:	430a      	orrs	r2, r1
 800238e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a2:	2180      	movs	r1, #128	; 0x80
 80023a4:	0449      	lsls	r1, r1, #17
 80023a6:	430a      	orrs	r2, r1
 80023a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023aa:	2312      	movs	r3, #18
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	781b      	ldrb	r3, [r3, #0]
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b006      	add	sp, #24
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	efffffff 	.word	0xefffffff
 80023c0:	fffff3ff 	.word	0xfffff3ff
 80023c4:	fffffcff 	.word	0xfffffcff
 80023c8:	fff3ffff 	.word	0xfff3ffff
 80023cc:	ffcfffff 	.word	0xffcfffff
 80023d0:	ffffcfff 	.word	0xffffcfff
 80023d4:	ffff3fff 	.word	0xffff3fff
 80023d8:	ffbfffff 	.word	0xffbfffff
 80023dc:	feffffff 	.word	0xfeffffff

080023e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	029b      	lsls	r3, r3, #10
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d13b      	bne.n	800246e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80023f6:	4be2      	ldr	r3, [pc, #904]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80023f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023fa:	23c0      	movs	r3, #192	; 0xc0
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8002402:	4bdf      	ldr	r3, [pc, #892]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d109      	bne.n	8002422 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	429a      	cmp	r2, r3
 8002416:	d104      	bne.n	8002422 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	f000 fcfc 	bl	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8002422:	4bd7      	ldr	r3, [pc, #860]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d109      	bne.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d104      	bne.n	8002442 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    {
      frequency = LSI_VALUE;
 8002438:	23fa      	movs	r3, #250	; 0xfa
 800243a:	01db      	lsls	r3, r3, #7
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	f000 fcec 	bl	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8002442:	4bcf      	ldr	r3, [pc, #828]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	401a      	ands	r2, r3
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	029b      	lsls	r3, r3, #10
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8002454:	f000 fce1 	bl	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	23c0      	movs	r3, #192	; 0xc0
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	429a      	cmp	r2, r3
 8002460:	d001      	beq.n	8002466 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8002462:	f000 fcda 	bl	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    {
      frequency = HSE_VALUE / 32U;
 8002466:	4bc7      	ldr	r3, [pc, #796]	; (8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>)
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	f000 fcd6 	bl	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800246e:	4bc4      	ldr	r3, [pc, #784]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2203      	movs	r2, #3
 8002474:	4013      	ands	r3, r2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d102      	bne.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    {
      pllvco = HSI_VALUE;
 800247a:	4bc3      	ldr	r3, [pc, #780]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e00a      	b.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8002480:	4bbf      	ldr	r3, [pc, #764]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2203      	movs	r2, #3
 8002486:	4013      	ands	r3, r2
 8002488:	2b03      	cmp	r3, #3
 800248a:	d102      	bne.n	8002492 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
      pllvco = HSE_VALUE;
 800248c:	4bbf      	ldr	r3, [pc, #764]	; (800278c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>)
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e001      	b.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
    }
    else /* No source */
    {
      pllvco = 0U;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002496:	4bba      	ldr	r3, [pc, #744]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	2207      	movs	r2, #7
 800249e:	4013      	ands	r3, r2
 80024a0:	3301      	adds	r3, #1
 80024a2:	0019      	movs	r1, r3
 80024a4:	6938      	ldr	r0, [r7, #16]
 80024a6:	f7fd fe2d 	bl	8000104 <__udivsi3>
 80024aa:	0003      	movs	r3, r0
 80024ac:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	049b      	lsls	r3, r3, #18
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d101      	bne.n	80024bc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80024b8:	f000 fc43 	bl	8002d42 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	049b      	lsls	r3, r3, #18
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d901      	bls.n	80024ca <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 80024c6:	f000 fc7c 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	045b      	lsls	r3, r3, #17
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d101      	bne.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 80024d4:	f000 fbe0 	bl	8002c98 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	045b      	lsls	r3, r3, #17
 80024de:	429a      	cmp	r2, r3
 80024e0:	d901      	bls.n	80024e6 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 80024e2:	f000 fc6e 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	03db      	lsls	r3, r3, #15
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d101      	bne.n	80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80024f0:	f000 fba1 	bl	8002c36 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	03db      	lsls	r3, r3, #15
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80024fe:	f000 fc60 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	039b      	lsls	r3, r3, #14
 8002508:	429a      	cmp	r2, r3
 800250a:	d101      	bne.n	8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800250c:	f000 fb62 	bl	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	039b      	lsls	r3, r3, #14
 8002516:	429a      	cmp	r2, r3
 8002518:	d901      	bls.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800251a:	f000 fc52 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	031b      	lsls	r3, r3, #12
 8002524:	429a      	cmp	r2, r3
 8002526:	d100      	bne.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8002528:	e115      	b.n	8002756 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	031b      	lsls	r3, r3, #12
 8002530:	429a      	cmp	r2, r3
 8002532:	d901      	bls.n	8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002534:	f000 fc45 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	01db      	lsls	r3, r3, #7
 800253e:	429a      	cmp	r2, r3
 8002540:	d100      	bne.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 8002542:	e1ac      	b.n	800289e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	01db      	lsls	r3, r3, #7
 800254a:	429a      	cmp	r2, r3
 800254c:	d901      	bls.n	8002552 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 800254e:	f000 fc38 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	019b      	lsls	r3, r3, #6
 8002558:	429a      	cmp	r2, r3
 800255a:	d100      	bne.n	800255e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800255c:	e270      	b.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	019b      	lsls	r3, r3, #6
 8002564:	429a      	cmp	r2, r3
 8002566:	d901      	bls.n	800256c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002568:	f000 fc2b 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	015b      	lsls	r3, r3, #5
 8002572:	429a      	cmp	r2, r3
 8002574:	d100      	bne.n	8002578 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8002576:	e158      	b.n	800282a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	015b      	lsls	r3, r3, #5
 800257e:	429a      	cmp	r2, r3
 8002580:	d901      	bls.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8002582:	f000 fc1e 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	429a      	cmp	r2, r3
 800258e:	d100      	bne.n	8002592 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8002590:	e213      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	429a      	cmp	r2, r3
 800259a:	d901      	bls.n	80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 800259c:	f000 fc11 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d100      	bne.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
 80025aa:	e2d3      	b.n	8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d901      	bls.n	80025ba <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 80025b6:	f000 fc04 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d100      	bne.n	80025c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80025c4:	e286      	b.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d901      	bls.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80025d0:	f000 fbf7 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d80f      	bhi.n	80025fa <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 80025e0:	f000 fbef 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d901      	bls.n	80025ee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80025ea:	f000 fbea 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 80025f4:	18d3      	adds	r3, r2, r3
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	469f      	mov	pc, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d100      	bne.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8002600:	e1b0      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8002602:	f000 fbde 	bl	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002606:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	2203      	movs	r2, #3
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d105      	bne.n	8002622 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002616:	f7ff fc91 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 800261a:	0003      	movs	r3, r0
 800261c:	617b      	str	r3, [r7, #20]
        break;
 800261e:	f000 fbd2 	bl	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = HAL_RCC_GetSysClockFreq();
 8002628:	f7ff fbfc 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 800262c:	0003      	movs	r3, r0
 800262e:	617b      	str	r3, [r7, #20]
        break;
 8002630:	f000 fbc9 	bl	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8002634:	4b52      	ldr	r3, [pc, #328]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	401a      	ands	r2, r3
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	429a      	cmp	r2, r3
 8002644:	d106      	bne.n	8002654 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d103      	bne.n	8002654 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          frequency = HSI_VALUE;
 800264c:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 800264e:	617b      	str	r3, [r7, #20]
        break;
 8002650:	f000 fbb9 	bl	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	2202      	movs	r2, #2
 800265a:	4013      	ands	r3, r2
 800265c:	2b02      	cmp	r3, #2
 800265e:	d001      	beq.n	8002664 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 8002660:	f000 fbb1 	bl	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d001      	beq.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800266a:	f000 fbac 	bl	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
          frequency = LSE_VALUE;
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	617b      	str	r3, [r7, #20]
        break;
 8002674:	f000 fba7 	bl	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002678:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	220c      	movs	r2, #12
 800267e:	4013      	ands	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002688:	f7ff fc58 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 800268c:	0003      	movs	r3, r0
 800268e:	617b      	str	r3, [r7, #20]
        break;
 8002690:	f000 fb9b 	bl	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b04      	cmp	r3, #4
 8002698:	d105      	bne.n	80026a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
          frequency = HAL_RCC_GetSysClockFreq();
 800269a:	f7ff fbc3 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 800269e:	0003      	movs	r3, r0
 80026a0:	617b      	str	r3, [r7, #20]
        break;
 80026a2:	f000 fb92 	bl	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	401a      	ands	r2, r3
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d103      	bne.n	80026c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          frequency = HSI_VALUE;
 80026be:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 80026c0:	617b      	str	r3, [r7, #20]
        break;
 80026c2:	f000 fb82 	bl	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	2202      	movs	r2, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d001      	beq.n	80026d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80026d2:	f000 fb7a 	bl	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d001      	beq.n	80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80026dc:	f000 fb75 	bl	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
          frequency = LSE_VALUE;
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	617b      	str	r3, [r7, #20]
        break;
 80026e6:	f000 fb70 	bl	8002dca <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80026ea:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	2230      	movs	r2, #48	; 0x30
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
          frequency = HAL_RCC_GetPCLK1Freq();
 80026fa:	f7ff fc1f 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80026fe:	0003      	movs	r3, r0
 8002700:	617b      	str	r3, [r7, #20]
        break;
 8002702:	f000 fb64 	bl	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b10      	cmp	r3, #16
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          frequency = HAL_RCC_GetSysClockFreq();
 800270c:	f7ff fb8a 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8002710:	0003      	movs	r3, r0
 8002712:	617b      	str	r3, [r7, #20]
        break;
 8002714:	f000 fb5b 	bl	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	401a      	ands	r2, r3
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	429a      	cmp	r2, r3
 8002728:	d106      	bne.n	8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d103      	bne.n	8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          frequency = HSI_VALUE;
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 8002732:	617b      	str	r3, [r7, #20]
        break;
 8002734:	f000 fb4b 	bl	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	2b02      	cmp	r3, #2
 8002742:	d000      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8002744:	e343      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d000      	beq.n	800274e <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800274c:	e33f      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          frequency = LSE_VALUE;
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	617b      	str	r3, [r7, #20]
        break;
 8002754:	e33b      	b.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	401a      	ands	r2, r3
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	429a      	cmp	r2, r3
 8002770:	d112      	bne.n	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10f      	bne.n	8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = (HSI_VALUE / 488U);
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 800277a:	617b      	str	r3, [r7, #20]
        break;
 800277c:	e329      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	40021000 	.word	0x40021000
 8002784:	0003d090 	.word	0x0003d090
 8002788:	00f42400 	.word	0x00f42400
 800278c:	007a1200 	.word	0x007a1200
 8002790:	080165e0 	.word	0x080165e0
 8002794:	00008012 	.word	0x00008012
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8002798:	4bcb      	ldr	r3, [pc, #812]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d000      	beq.n	80027a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80027a4:	e315      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d000      	beq.n	80027ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80027ac:	e311      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = LSE_VALUE;
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	617b      	str	r3, [r7, #20]
        break;
 80027b4:	e30d      	b.n	8002dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80027b6:	4bc4      	ldr	r3, [pc, #784]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80027b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d104      	bne.n	80027d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80027c8:	f7ff fbb8 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 80027cc:	0003      	movs	r3, r0
 80027ce:	617b      	str	r3, [r7, #20]
        break;
 80027d0:	e301      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	429a      	cmp	r2, r3
 80027da:	d104      	bne.n	80027e6 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          frequency = HAL_RCC_GetSysClockFreq();
 80027dc:	f7ff fb22 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 80027e0:	0003      	movs	r3, r0
 80027e2:	617b      	str	r3, [r7, #20]
        break;
 80027e4:	e2f7      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80027e6:	4bb8      	ldr	r3, [pc, #736]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	401a      	ands	r2, r3
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	429a      	cmp	r2, r3
 8002800:	d102      	bne.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          frequency = HSI_VALUE;
 8002802:	4bb2      	ldr	r3, [pc, #712]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8002804:	617b      	str	r3, [r7, #20]
        break;
 8002806:	e2e6      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8002808:	4baf      	ldr	r3, [pc, #700]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d000      	beq.n	8002816 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8002814:	e2df      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	23c0      	movs	r3, #192	; 0xc0
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	429a      	cmp	r2, r3
 800281e:	d000      	beq.n	8002822 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8002820:	e2d9      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = LSE_VALUE;
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	617b      	str	r3, [r7, #20]
        break;
 8002828:	e2d5      	b.n	8002dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 800282a:	4ba7      	ldr	r3, [pc, #668]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800282c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART2CLKSOURCE_PCLK1)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          frequency = HAL_RCC_GetPCLK1Freq();
 800283c:	f7ff fb7e 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002840:	0003      	movs	r3, r0
 8002842:	617b      	str	r3, [r7, #20]
        break;
 8002844:	e2c9      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if (srcclk == RCC_LPUART2CLKSOURCE_SYSCLK)
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	429a      	cmp	r2, r3
 800284e:	d104      	bne.n	800285a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          frequency = HAL_RCC_GetSysClockFreq();
 8002850:	f7ff fae8 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8002854:	0003      	movs	r3, r0
 8002856:	617b      	str	r3, [r7, #20]
        break;
 8002858:	e2bf      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART2CLKSOURCE_HSI))
 800285a:	4b9b      	ldr	r3, [pc, #620]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	401a      	ands	r2, r3
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	429a      	cmp	r2, r3
 800286a:	d107      	bne.n	800287c <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	429a      	cmp	r2, r3
 8002874:	d102      	bne.n	800287c <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          frequency = HSI_VALUE;
 8002876:	4b95      	ldr	r3, [pc, #596]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8002878:	617b      	str	r3, [r7, #20]
        break;
 800287a:	e2ae      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART2CLKSOURCE_LSE))
 800287c:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	2202      	movs	r2, #2
 8002882:	4013      	ands	r3, r2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d000      	beq.n	800288a <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8002888:	e2a7      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	23c0      	movs	r3, #192	; 0xc0
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d000      	beq.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8002894:	e2a1      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          frequency = LSE_VALUE;
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	617b      	str	r3, [r7, #20]
        break;
 800289c:	e29d      	b.n	8002dda <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800289e:	4b8a      	ldr	r3, [pc, #552]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	0f9b      	lsrs	r3, r3, #30
 80028a4:	079b      	lsls	r3, r3, #30
 80028a6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = HAL_RCC_GetSysClockFreq();
 80028ae:	f7ff fab9 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 80028b2:	0003      	movs	r3, r0
 80028b4:	617b      	str	r3, [r7, #20]
        break;
 80028b6:	e292      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	429a      	cmp	r2, r3
 80028c0:	d102      	bne.n	80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HSI_VALUE;
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80028c4:	617b      	str	r3, [r7, #20]
        break;
 80028c6:	e28a      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	05db      	lsls	r3, r3, #23
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d000      	beq.n	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 80028d2:	e284      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80028d4:	4b7c      	ldr	r3, [pc, #496]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	4013      	ands	r3, r2
 80028de:	d100      	bne.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80028e0:	e27d      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80028e2:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	227f      	movs	r2, #127	; 0x7f
 80028ea:	4013      	ands	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	435a      	muls	r2, r3
 80028f4:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0c5b      	lsrs	r3, r3, #17
 80028fa:	211f      	movs	r1, #31
 80028fc:	400b      	ands	r3, r1
 80028fe:	3301      	adds	r3, #1
 8002900:	0019      	movs	r1, r3
 8002902:	0010      	movs	r0, r2
 8002904:	f7fd fbfe 	bl	8000104 <__udivsi3>
 8002908:	0003      	movs	r3, r0
 800290a:	617b      	str	r3, [r7, #20]
        break;
 800290c:	e267      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800290e:	4b6e      	ldr	r3, [pc, #440]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002912:	23c0      	movs	r3, #192	; 0xc0
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	4013      	ands	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002920:	f7ff fb0c 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002924:	0003      	movs	r3, r0
 8002926:	617b      	str	r3, [r7, #20]
        break;
 8002928:	e25b      	b.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	015b      	lsls	r3, r3, #5
 8002930:	429a      	cmp	r2, r3
 8002932:	d104      	bne.n	800293e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          frequency = HAL_RCC_GetSysClockFreq();
 8002934:	f7ff fa76 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8002938:	0003      	movs	r3, r0
 800293a:	617b      	str	r3, [r7, #20]
        break;
 800293c:	e251      	b.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800293e:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	401a      	ands	r2, r3
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	429a      	cmp	r2, r3
 800294e:	d000      	beq.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8002950:	e247      	b.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	019b      	lsls	r3, r3, #6
 8002958:	429a      	cmp	r2, r3
 800295a:	d000      	beq.n	800295e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 800295c:	e241      	b.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = HSI_VALUE;
 800295e:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8002960:	617b      	str	r3, [r7, #20]
        break;
 8002962:	e23e      	b.n	8002de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002966:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002968:	23c0      	movs	r3, #192	; 0xc0
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d104      	bne.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002976:	f7ff fae1 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 800297a:	0003      	movs	r3, r0
 800297c:	617b      	str	r3, [r7, #20]
        break;
 800297e:	e232      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	01db      	lsls	r3, r3, #7
 8002986:	429a      	cmp	r2, r3
 8002988:	d104      	bne.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = HAL_RCC_GetSysClockFreq();
 800298a:	f7ff fa4b 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 800298e:	0003      	movs	r3, r0
 8002990:	617b      	str	r3, [r7, #20]
        break;
 8002992:	e228      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8002994:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	401a      	ands	r2, r3
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d000      	beq.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 80029a6:	e21e      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d000      	beq.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80029b2:	e218      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          frequency = HSI_VALUE;
 80029b4:	4b45      	ldr	r3, [pc, #276]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 80029b6:	617b      	str	r3, [r7, #20]
        break;
 80029b8:	e215      	b.n	8002de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 80029ba:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	2203      	movs	r2, #3
 80029c0:	4013      	ands	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d11c      	bne.n	8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80029ca:	4b3f      	ldr	r3, [pc, #252]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	025b      	lsls	r3, r3, #9
 80029d2:	4013      	ands	r3, r2
 80029d4:	d100      	bne.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 80029d6:	e208      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80029d8:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	227f      	movs	r2, #127	; 0x7f
 80029e0:	4013      	ands	r3, r2
 80029e2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	435a      	muls	r2, r3
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	0c5b      	lsrs	r3, r3, #17
 80029f0:	211f      	movs	r1, #31
 80029f2:	400b      	ands	r3, r1
 80029f4:	3301      	adds	r3, #1
 80029f6:	0019      	movs	r1, r3
 80029f8:	0010      	movs	r0, r2
 80029fa:	f7fd fb83 	bl	8000104 <__udivsi3>
 80029fe:	0003      	movs	r3, r0
 8002a00:	617b      	str	r3, [r7, #20]
        break;
 8002a02:	e1f2      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a0a:	f7ff fa0b 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	617b      	str	r3, [r7, #20]
        break;
 8002a12:	e1ea      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d105      	bne.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          frequency = HSI_VALUE;
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8002a2e:	617b      	str	r3, [r7, #20]
        break;
 8002a30:	e1db      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d000      	beq.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8002a38:	e1d7      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8002a3c:	617b      	str	r3, [r7, #20]
        break;
 8002a3e:	e1d4      	b.n	8002dea <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        srcclk = __HAL_RCC_GET_I2S2_SOURCE();
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	220c      	movs	r2, #12
 8002a46:	4013      	ands	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S2CLKSOURCE_PLL)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11c      	bne.n	8002a8a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8002a5c:	e1c7      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	227f      	movs	r2, #127	; 0x7f
 8002a66:	4013      	ands	r3, r2
 8002a68:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	435a      	muls	r2, r3
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0c5b      	lsrs	r3, r3, #17
 8002a76:	211f      	movs	r1, #31
 8002a78:	400b      	ands	r3, r1
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	0010      	movs	r0, r2
 8002a80:	f7fd fb40 	bl	8000104 <__udivsi3>
 8002a84:	0003      	movs	r3, r0
 8002a86:	617b      	str	r3, [r7, #20]
        break;
 8002a88:	e1b1      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if (srcclk == RCC_I2S2CLKSOURCE_SYSCLK)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
          frequency = HAL_RCC_GetSysClockFreq();
 8002a90:	f7ff f9c8 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8002a94:	0003      	movs	r3, r0
 8002a96:	617b      	str	r3, [r7, #20]
        break;
 8002a98:	e1a9      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S2CLKSOURCE_HSI))
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = HSI_VALUE;
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8002ab4:	617b      	str	r3, [r7, #20]
        break;
 8002ab6:	e19a      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if (srcclk == RCC_I2S2CLKSOURCE_EXT)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d000      	beq.n	8002ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8002abe:	e196      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
          frequency = EXTERNAL_I2S2_CLOCK_VALUE;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8002ac2:	617b      	str	r3, [r7, #20]
        break;
 8002ac4:	e193      	b.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	0000bb80 	.word	0x0000bb80
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002ad4:	4bcc      	ldr	r3, [pc, #816]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002ad6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ad8:	23c0      	movs	r3, #192	; 0xc0
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002ae6:	f7ff fa29 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002aea:	0003      	movs	r3, r0
 8002aec:	617b      	str	r3, [r7, #20]
        break;
 8002aee:	e180      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8002af0:	4bc5      	ldr	r3, [pc, #788]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af4:	2202      	movs	r2, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d108      	bne.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	02db      	lsls	r3, r3, #11
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d103      	bne.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          frequency = LSI_VALUE;
 8002b06:	23fa      	movs	r3, #250	; 0xfa
 8002b08:	01db      	lsls	r3, r3, #7
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e021      	b.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8002b0e:	4bbe      	ldr	r3, [pc, #760]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	401a      	ands	r2, r3
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	031b      	lsls	r3, r3, #12
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d102      	bne.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
          frequency = HSI_VALUE;
 8002b2a:	4bb8      	ldr	r3, [pc, #736]	; (8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>)
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e010      	b.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8002b30:	4bb5      	ldr	r3, [pc, #724]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d000      	beq.n	8002b3e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8002b3c:	e159      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	031b      	lsls	r3, r3, #12
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d000      	beq.n	8002b4a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8002b48:	e153      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = LSE_VALUE;
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	617b      	str	r3, [r7, #20]
        break;
 8002b50:	e14f      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8002b52:	e14e      	b.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002b54:	4bac      	ldr	r3, [pc, #688]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002b56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b58:	23c0      	movs	r3, #192	; 0xc0
 8002b5a:	039b      	lsls	r3, r3, #14
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d104      	bne.n	8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002b66:	f7ff f9e9 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	617b      	str	r3, [r7, #20]
        break;
 8002b6e:	e142      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8002b70:	4ba5      	ldr	r3, [pc, #660]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d108      	bne.n	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	035b      	lsls	r3, r3, #13
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d103      	bne.n	8002b8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
          frequency = LSI_VALUE;
 8002b86:	23fa      	movs	r3, #250	; 0xfa
 8002b88:	01db      	lsls	r3, r3, #7
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e021      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8002b8e:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	401a      	ands	r2, r3
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	039b      	lsls	r3, r3, #14
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          frequency = HSI_VALUE;
 8002baa:	4b98      	ldr	r3, [pc, #608]	; (8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>)
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e010      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8002bb0:	4b95      	ldr	r3, [pc, #596]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d000      	beq.n	8002bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8002bbc:	e11b      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	23c0      	movs	r3, #192	; 0xc0
 8002bc2:	039b      	lsls	r3, r3, #14
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d000      	beq.n	8002bca <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8002bc8:	e115      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
          frequency = LSE_VALUE;
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	617b      	str	r3, [r7, #20]
        break;
 8002bd0:	e111      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8002bd2:	e110      	b.n	8002df6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002bd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	03db      	lsls	r3, r3, #15
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	03db      	lsls	r3, r3, #15
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d11c      	bne.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8002bea:	4b87      	ldr	r3, [pc, #540]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	045b      	lsls	r3, r3, #17
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8002bf6:	e100      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002bf8:	4b83      	ldr	r3, [pc, #524]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	227f      	movs	r2, #127	; 0x7f
 8002c00:	4013      	ands	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	435a      	muls	r2, r3
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	0e5b      	lsrs	r3, r3, #25
 8002c10:	2107      	movs	r1, #7
 8002c12:	400b      	ands	r3, r1
 8002c14:	3301      	adds	r3, #1
 8002c16:	0019      	movs	r1, r3
 8002c18:	0010      	movs	r0, r2
 8002c1a:	f7fd fa73 	bl	8000104 <__udivsi3>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	617b      	str	r3, [r7, #20]
        break;
 8002c22:	e0ea      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d000      	beq.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8002c2a:	e0e6      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f7ff f986 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002c30:	0003      	movs	r3, r0
 8002c32:	617b      	str	r3, [r7, #20]
        break;
 8002c34:	e0e1      	b.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8002c36:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	045b      	lsls	r3, r3, #17
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	045b      	lsls	r3, r3, #17
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d11c      	bne.n	8002c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8002c4c:	4b6e      	ldr	r3, [pc, #440]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	045b      	lsls	r3, r3, #17
 8002c54:	4013      	ands	r3, r2
 8002c56:	d100      	bne.n	8002c5a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8002c58:	e0d1      	b.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002c5a:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	227f      	movs	r2, #127	; 0x7f
 8002c62:	4013      	ands	r3, r2
 8002c64:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	435a      	muls	r2, r3
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0e5b      	lsrs	r3, r3, #25
 8002c72:	2107      	movs	r1, #7
 8002c74:	400b      	ands	r3, r1
 8002c76:	3301      	adds	r3, #1
 8002c78:	0019      	movs	r1, r3
 8002c7a:	0010      	movs	r0, r2
 8002c7c:	f7fd fa42 	bl	8000104 <__udivsi3>
 8002c80:	0003      	movs	r3, r0
 8002c82:	617b      	str	r3, [r7, #20]
        break;
 8002c84:	e0bb      	b.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d000      	beq.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8002c8c:	e0b7      	b.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c8e:	f7ff f955 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002c92:	0003      	movs	r3, r0
 8002c94:	617b      	str	r3, [r7, #20]
        break;
 8002c96:	e0b2      	b.n	8002dfe <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        srcclk = READ_BIT(RCC->CCIPR2, RCC_CCIPR2_USBSEL);
 8002c98:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002c9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c9c:	23c0      	movs	r3, #192	; 0xc0
 8002c9e:	019b      	lsls	r3, r3, #6
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USBCLKSOURCE_PLL) /* PLL ? */
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8002cae:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	045b      	lsls	r3, r3, #17
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d100      	bne.n	8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 8002cba:	e0a2      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002cbc:	4b52      	ldr	r3, [pc, #328]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	227f      	movs	r2, #127	; 0x7f
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	435a      	muls	r2, r3
 8002cce:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	0e5b      	lsrs	r3, r3, #25
 8002cd4:	2107      	movs	r1, #7
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	3301      	adds	r3, #1
 8002cda:	0019      	movs	r1, r3
 8002cdc:	0010      	movs	r0, r2
 8002cde:	f7fd fa11 	bl	8000104 <__udivsi3>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	617b      	str	r3, [r7, #20]
        break;
 8002ce6:	e08c      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        else if (srcclk == RCC_USBCLKSOURCE_HSI48) /* HSI48 ? */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d110      	bne.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d000      	beq.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
 8002d00:	e07f      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d000      	beq.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
 8002d08:	e07b      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            frequency = HSI48_VALUE;
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8002d0c:	617b      	str	r3, [r7, #20]
        break;
 8002d0e:	e078      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        else if (srcclk == RCC_USBCLKSOURCE_HSE)
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	015b      	lsls	r3, r3, #5
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d000      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
 8002d1a:	e072      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBCLKSOURCE_HSE))
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	029b      	lsls	r3, r3, #10
 8002d24:	401a      	ands	r2, r3
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	029b      	lsls	r3, r3, #10
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d000      	beq.n	8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8002d2e:	e068      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	015b      	lsls	r3, r3, #5
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d000      	beq.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8002d3a:	e062      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            frequency = HSE_VALUE;
 8002d3c:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8002d3e:	617b      	str	r3, [r7, #20]
        break;
 8002d40:	e05f      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        srcclk = READ_BIT(RCC->CCIPR2, RCC_CCIPR2_FDCANSEL);
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d46:	23c0      	movs	r3, #192	; 0xc0
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_FDCANCLKSOURCE_PLL) /* PLL ? */
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d11b      	bne.n	8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	045b      	lsls	r3, r3, #17
 8002d60:	4013      	ands	r3, r2
 8002d62:	d059      	beq.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	227f      	movs	r2, #127	; 0x7f
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	435a      	muls	r2, r3
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	0e5b      	lsrs	r3, r3, #25
 8002d7c:	2107      	movs	r1, #7
 8002d7e:	400b      	ands	r3, r1
 8002d80:	3301      	adds	r3, #1
 8002d82:	0019      	movs	r1, r3
 8002d84:	0010      	movs	r0, r2
 8002d86:	f7fd f9bd 	bl	8000104 <__udivsi3>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	617b      	str	r3, [r7, #20]
        break;
 8002d8e:	e043      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        else if (srcclk == RCC_FDCANCLKSOURCE_PCLK1) /* PCLK1 ? */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002d96:	f7ff f8d1 	bl	8001f3c <HAL_RCC_GetPCLK1Freq>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	617b      	str	r3, [r7, #20]
        break;
 8002d9e:	e03b      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	401a      	ands	r2, r3
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d132      	bne.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d12d      	bne.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
          frequency = HSE_VALUE;
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8002dbe:	617b      	str	r3, [r7, #20]
        break;
 8002dc0:	e02a      	b.n	8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        break;
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	e029      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	e027      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	e025      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	e023      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	e021      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	e01f      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	e01d      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	e01b      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	e019      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	e017      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	e015      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	e013      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	e011      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	e00f      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	e00d      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	e00b      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	e009      	b.n	8002e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	02dc6c00 	.word	0x02dc6c00
 8002e14:	007a1200 	.word	0x007a1200
        break;
 8002e18:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8002e1a:	697b      	ldr	r3, [r7, #20]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b006      	add	sp, #24
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <__libc_init_array>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2600      	movs	r6, #0
 8002e28:	4d0c      	ldr	r5, [pc, #48]	; (8002e5c <__libc_init_array+0x38>)
 8002e2a:	4c0d      	ldr	r4, [pc, #52]	; (8002e60 <__libc_init_array+0x3c>)
 8002e2c:	1b64      	subs	r4, r4, r5
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	42a6      	cmp	r6, r4
 8002e32:	d109      	bne.n	8002e48 <__libc_init_array+0x24>
 8002e34:	2600      	movs	r6, #0
 8002e36:	f000 f821 	bl	8002e7c <_init>
 8002e3a:	4d0a      	ldr	r5, [pc, #40]	; (8002e64 <__libc_init_array+0x40>)
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <__libc_init_array+0x44>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	42a6      	cmp	r6, r4
 8002e44:	d105      	bne.n	8002e52 <__libc_init_array+0x2e>
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	00b3      	lsls	r3, r6, #2
 8002e4a:	58eb      	ldr	r3, [r5, r3]
 8002e4c:	4798      	blx	r3
 8002e4e:	3601      	adds	r6, #1
 8002e50:	e7ee      	b.n	8002e30 <__libc_init_array+0xc>
 8002e52:	00b3      	lsls	r3, r6, #2
 8002e54:	58eb      	ldr	r3, [r5, r3]
 8002e56:	4798      	blx	r3
 8002e58:	3601      	adds	r6, #1
 8002e5a:	e7f2      	b.n	8002e42 <__libc_init_array+0x1e>
 8002e5c:	08016664 	.word	0x08016664
 8002e60:	08016664 	.word	0x08016664
 8002e64:	08016664 	.word	0x08016664
 8002e68:	08016668 	.word	0x08016668

08002e6c <memset>:
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	1882      	adds	r2, r0, r2
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d100      	bne.n	8002e76 <memset+0xa>
 8002e74:	4770      	bx	lr
 8002e76:	7019      	strb	r1, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	e7f9      	b.n	8002e70 <memset+0x4>

08002e7c <_init>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e82:	bc08      	pop	{r3}
 8002e84:	469e      	mov	lr, r3
 8002e86:	4770      	bx	lr

08002e88 <_fini>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr
