
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000137d0  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080178c4  080178c4  0003000c  2**0
                  CONTENTS
  4 .ARM          00000000  080178c4  080178c4  0003000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080178c4  080178c4  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080178c4  080178c4  000278c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080178c8  080178c8  000278c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080178cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080178d8  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080178d8  000300e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dadd  00000000  00000000  00030034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002023  00000000  00000000  0003db11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0003fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00040690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af18  00000000  00000000  000410e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db36  00000000  00000000  0005bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad76d  00000000  00000000  00069b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011729b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  001172ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080040dc 	.word	0x080040dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080040dc 	.word	0x080040dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MAX9704_AmpSwitchingMode>:
 */
#include "MAX9704_Amplifier.h"


Status_TypeDef MAX9704_AmpSwitchingMode(Switching_Modes mode)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b03      	cmp	r3, #3
 800022e:	d03e      	beq.n	80002ae <MAX9704_AmpSwitchingMode+0x92>
 8000230:	dc4f      	bgt.n	80002d2 <MAX9704_AmpSwitchingMode+0xb6>
 8000232:	2b02      	cmp	r3, #2
 8000234:	d029      	beq.n	800028a <MAX9704_AmpSwitchingMode+0x6e>
 8000236:	dc4c      	bgt.n	80002d2 <MAX9704_AmpSwitchingMode+0xb6>
 8000238:	2b00      	cmp	r3, #0
 800023a:	d002      	beq.n	8000242 <MAX9704_AmpSwitchingMode+0x26>
 800023c:	2b01      	cmp	r3, #1
 800023e:	d012      	beq.n	8000266 <MAX9704_AmpSwitchingMode+0x4a>
 8000240:	e047      	b.n	80002d2 <MAX9704_AmpSwitchingMode+0xb6>
	{
		case SWITCHING_MODE_670KHZ:
			if( STATUS_OK != ResetGPIOsPin(AMP_FS1_GPIO_Port, AMP_FS1_Pin))
 8000242:	4b33      	ldr	r3, [pc, #204]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 8000244:	2110      	movs	r1, #16
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fdbb 	bl	8000dc2 <ResetGPIOsPin>
 800024c:	1e03      	subs	r3, r0, #0
 800024e:	d001      	beq.n	8000254 <MAX9704_AmpSwitchingMode+0x38>
				return STATUS_ERR;
 8000250:	23ff      	movs	r3, #255	; 0xff
 8000252:	e058      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			if( STATUS_OK != ResetGPIOsPin(AMP_FS2_GPIO_Port, AMP_FS2_Pin))
 8000254:	4b2e      	ldr	r3, [pc, #184]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 8000256:	2108      	movs	r1, #8
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fdb2 	bl	8000dc2 <ResetGPIOsPin>
 800025e:	1e03      	subs	r3, r0, #0
 8000260:	d049      	beq.n	80002f6 <MAX9704_AmpSwitchingMode+0xda>
				return STATUS_ERR;
 8000262:	23ff      	movs	r3, #255	; 0xff
 8000264:	e04f      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			break;
		case SWITCHING_MODE_940KHZ:
			if( STATUS_OK != ResetGPIOsPin(AMP_FS1_GPIO_Port, AMP_FS1_Pin))
 8000266:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 8000268:	2110      	movs	r1, #16
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fda9 	bl	8000dc2 <ResetGPIOsPin>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d001      	beq.n	8000278 <MAX9704_AmpSwitchingMode+0x5c>
				return STATUS_ERR;
 8000274:	23ff      	movs	r3, #255	; 0xff
 8000276:	e046      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			if( STATUS_OK != SetGPIOsPin(AMP_FS2_GPIO_Port, AMP_FS2_Pin))
 8000278:	4b25      	ldr	r3, [pc, #148]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 800027a:	2108      	movs	r1, #8
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fd7f 	bl	8000d80 <SetGPIOsPin>
 8000282:	1e03      	subs	r3, r0, #0
 8000284:	d039      	beq.n	80002fa <MAX9704_AmpSwitchingMode+0xde>
				return STATUS_ERR;
 8000286:	23ff      	movs	r3, #255	; 0xff
 8000288:	e03d      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			break;
		case SWITCHING_MODE_470KHZ:
			if( STATUS_OK != SetGPIOsPin(AMP_FS1_GPIO_Port, AMP_FS1_Pin))
 800028a:	4b21      	ldr	r3, [pc, #132]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 800028c:	2110      	movs	r1, #16
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fd76 	bl	8000d80 <SetGPIOsPin>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MAX9704_AmpSwitchingMode+0x80>
				return STATUS_ERR;
 8000298:	23ff      	movs	r3, #255	; 0xff
 800029a:	e034      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			if( STATUS_OK != ResetGPIOsPin(AMP_FS2_GPIO_Port, AMP_FS2_Pin))
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 800029e:	2108      	movs	r1, #8
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fd8e 	bl	8000dc2 <ResetGPIOsPin>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d029      	beq.n	80002fe <MAX9704_AmpSwitchingMode+0xe2>
				return STATUS_ERR;
 80002aa:	23ff      	movs	r3, #255	; 0xff
 80002ac:	e02b      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			break;
		case SWITCHING_MODE_AROUND_670KHZ:
			if( STATUS_OK != SetGPIOsPin(AMP_FS1_GPIO_Port, AMP_FS1_Pin))
 80002ae:	4b18      	ldr	r3, [pc, #96]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 80002b0:	2110      	movs	r1, #16
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fd64 	bl	8000d80 <SetGPIOsPin>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <MAX9704_AmpSwitchingMode+0xa4>
				return STATUS_ERR;
 80002bc:	23ff      	movs	r3, #255	; 0xff
 80002be:	e022      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			if( STATUS_OK != SetGPIOsPin(AMP_FS2_GPIO_Port, AMP_FS2_Pin))
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 80002c2:	2108      	movs	r1, #8
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fd5b 	bl	8000d80 <SetGPIOsPin>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d019      	beq.n	8000302 <MAX9704_AmpSwitchingMode+0xe6>
				return STATUS_ERR;
 80002ce:	23ff      	movs	r3, #255	; 0xff
 80002d0:	e019      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			break;
		/* default mode is SWITCHING_MODE_670KHZ */
		default:
			if( STATUS_OK != ResetGPIOsPin(AMP_FS1_GPIO_Port, AMP_FS1_Pin))
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 80002d4:	2110      	movs	r1, #16
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fd73 	bl	8000dc2 <ResetGPIOsPin>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <MAX9704_AmpSwitchingMode+0xc8>
				return STATUS_ERR;
 80002e0:	23ff      	movs	r3, #255	; 0xff
 80002e2:	e010      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			if( STATUS_OK != ResetGPIOsPin(AMP_FS2_GPIO_Port, AMP_FS2_Pin))
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <MAX9704_AmpSwitchingMode+0xf4>)
 80002e6:	2108      	movs	r1, #8
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fd6a 	bl	8000dc2 <ResetGPIOsPin>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d008      	beq.n	8000304 <MAX9704_AmpSwitchingMode+0xe8>
				return STATUS_ERR;
 80002f2:	23ff      	movs	r3, #255	; 0xff
 80002f4:	e007      	b.n	8000306 <MAX9704_AmpSwitchingMode+0xea>
			break;
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	e004      	b.n	8000304 <MAX9704_AmpSwitchingMode+0xe8>
			break;
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	e002      	b.n	8000304 <MAX9704_AmpSwitchingMode+0xe8>
			break;
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	e000      	b.n	8000304 <MAX9704_AmpSwitchingMode+0xe8>
			break;
 8000302:	46c0      	nop			; (mov r8, r8)
	}
	return STATUS_OK;
 8000304:	2300      	movs	r3, #0
}
 8000306:	0018      	movs	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	50000400 	.word	0x50000400

08000314 <MAX9704_AmpGain>:

Status_TypeDef MAX9704_AmpGain(Amp_Gain gain)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	701a      	strb	r2, [r3, #0]
	switch(gain)
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d03e      	beq.n	80003a6 <MAX9704_AmpGain+0x92>
 8000328:	dc4f      	bgt.n	80003ca <MAX9704_AmpGain+0xb6>
 800032a:	2b02      	cmp	r3, #2
 800032c:	d029      	beq.n	8000382 <MAX9704_AmpGain+0x6e>
 800032e:	dc4c      	bgt.n	80003ca <MAX9704_AmpGain+0xb6>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <MAX9704_AmpGain+0x26>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d012      	beq.n	800035e <MAX9704_AmpGain+0x4a>
 8000338:	e047      	b.n	80003ca <MAX9704_AmpGain+0xb6>
	{
		case GAIN_MODE_29dB:
			if( STATUS_OK != ResetGPIOsPin(AMP_GAIN1_GPIO_Port, AMP_GAIN1_Pin))
 800033a:	4b33      	ldr	r3, [pc, #204]	; (8000408 <MAX9704_AmpGain+0xf4>)
 800033c:	2140      	movs	r1, #64	; 0x40
 800033e:	0018      	movs	r0, r3
 8000340:	f000 fd3f 	bl	8000dc2 <ResetGPIOsPin>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <MAX9704_AmpGain+0x38>
				return STATUS_ERR;
 8000348:	23ff      	movs	r3, #255	; 0xff
 800034a:	e058      	b.n	80003fe <MAX9704_AmpGain+0xea>
			if( STATUS_OK != ResetGPIOsPin(AMP_GAIN2_GPIO_Port, AMP_GAIN2_Pin))
 800034c:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <MAX9704_AmpGain+0xf4>)
 800034e:	2120      	movs	r1, #32
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fd36 	bl	8000dc2 <ResetGPIOsPin>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d049      	beq.n	80003ee <MAX9704_AmpGain+0xda>
				return STATUS_ERR;
 800035a:	23ff      	movs	r3, #255	; 0xff
 800035c:	e04f      	b.n	80003fe <MAX9704_AmpGain+0xea>
			break;
		case GAIN_MODE_19dB:
			if( STATUS_OK != ResetGPIOsPin(AMP_GAIN1_GPIO_Port, AMP_GAIN1_Pin))
 800035e:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <MAX9704_AmpGain+0xf4>)
 8000360:	2140      	movs	r1, #64	; 0x40
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fd2d 	bl	8000dc2 <ResetGPIOsPin>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <MAX9704_AmpGain+0x5c>
				return STATUS_ERR;
 800036c:	23ff      	movs	r3, #255	; 0xff
 800036e:	e046      	b.n	80003fe <MAX9704_AmpGain+0xea>
			if( STATUS_OK != SetGPIOsPin(AMP_GAIN2_GPIO_Port, AMP_GAIN2_Pin))
 8000370:	4b25      	ldr	r3, [pc, #148]	; (8000408 <MAX9704_AmpGain+0xf4>)
 8000372:	2120      	movs	r1, #32
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fd03 	bl	8000d80 <SetGPIOsPin>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d039      	beq.n	80003f2 <MAX9704_AmpGain+0xde>
				return STATUS_ERR;
 800037e:	23ff      	movs	r3, #255	; 0xff
 8000380:	e03d      	b.n	80003fe <MAX9704_AmpGain+0xea>
			break;
		case GAIN_MODE_16dB:
			if( STATUS_OK != SetGPIOsPin(AMP_GAIN1_GPIO_Port, AMP_GAIN1_Pin))
 8000382:	4b21      	ldr	r3, [pc, #132]	; (8000408 <MAX9704_AmpGain+0xf4>)
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fcfa 	bl	8000d80 <SetGPIOsPin>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MAX9704_AmpGain+0x80>
				return STATUS_ERR;
 8000390:	23ff      	movs	r3, #255	; 0xff
 8000392:	e034      	b.n	80003fe <MAX9704_AmpGain+0xea>
			if( STATUS_OK != ResetGPIOsPin(AMP_GAIN2_GPIO_Port, AMP_GAIN2_Pin))
 8000394:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MAX9704_AmpGain+0xf4>)
 8000396:	2120      	movs	r1, #32
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fd12 	bl	8000dc2 <ResetGPIOsPin>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d029      	beq.n	80003f6 <MAX9704_AmpGain+0xe2>
				return STATUS_ERR;
 80003a2:	23ff      	movs	r3, #255	; 0xff
 80003a4:	e02b      	b.n	80003fe <MAX9704_AmpGain+0xea>
			break;
		case GAIN_MODE_13dB:
			if( STATUS_OK != SetGPIOsPin(AMP_GAIN1_GPIO_Port, AMP_GAIN1_Pin))
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MAX9704_AmpGain+0xf4>)
 80003a8:	2140      	movs	r1, #64	; 0x40
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fce8 	bl	8000d80 <SetGPIOsPin>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MAX9704_AmpGain+0xa4>
				return STATUS_ERR;
 80003b4:	23ff      	movs	r3, #255	; 0xff
 80003b6:	e022      	b.n	80003fe <MAX9704_AmpGain+0xea>
			if( STATUS_OK != SetGPIOsPin(AMP_GAIN2_GPIO_Port, AMP_GAIN2_Pin))
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MAX9704_AmpGain+0xf4>)
 80003ba:	2120      	movs	r1, #32
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fcdf 	bl	8000d80 <SetGPIOsPin>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d019      	beq.n	80003fa <MAX9704_AmpGain+0xe6>
				return STATUS_ERR;
 80003c6:	23ff      	movs	r3, #255	; 0xff
 80003c8:	e019      	b.n	80003fe <MAX9704_AmpGain+0xea>
			break;
		/* default mode is GAIN_MODE_29dB */
		default:
			if( STATUS_OK != ResetGPIOsPin(AMP_GAIN1_GPIO_Port, AMP_GAIN1_Pin))
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MAX9704_AmpGain+0xf4>)
 80003cc:	2140      	movs	r1, #64	; 0x40
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fcf7 	bl	8000dc2 <ResetGPIOsPin>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MAX9704_AmpGain+0xc8>
				return STATUS_ERR;
 80003d8:	23ff      	movs	r3, #255	; 0xff
 80003da:	e010      	b.n	80003fe <MAX9704_AmpGain+0xea>
			if( STATUS_OK != ResetGPIOsPin(AMP_GAIN2_GPIO_Port, AMP_GAIN2_Pin))
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <MAX9704_AmpGain+0xf4>)
 80003de:	2120      	movs	r1, #32
 80003e0:	0018      	movs	r0, r3
 80003e2:	f000 fcee 	bl	8000dc2 <ResetGPIOsPin>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d008      	beq.n	80003fc <MAX9704_AmpGain+0xe8>
				return STATUS_ERR;
 80003ea:	23ff      	movs	r3, #255	; 0xff
 80003ec:	e007      	b.n	80003fe <MAX9704_AmpGain+0xea>
			break;
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	e004      	b.n	80003fc <MAX9704_AmpGain+0xe8>
			break;
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	e002      	b.n	80003fc <MAX9704_AmpGain+0xe8>
			break;
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	e000      	b.n	80003fc <MAX9704_AmpGain+0xe8>
			break;
 80003fa:	46c0      	nop			; (mov r8, r8)
	}
	return STATUS_OK;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	0018      	movs	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	50000400 	.word	0x50000400

0800040c <MAX9704_AmpShutdown>:
Status_TypeDef MAX9704_AmpShutdown(Shutdown_Modes mode)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	0002      	movs	r2, r0
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	701a      	strb	r2, [r3, #0]
	switch(mode)
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <MAX9704_AmpShutdown+0x1a>
 8000420:	2b01      	cmp	r3, #1
 8000422:	d009      	beq.n	8000438 <MAX9704_AmpShutdown+0x2c>
 8000424:	e011      	b.n	800044a <MAX9704_AmpShutdown+0x3e>
	{
		case SHUTDOWN_ENABLE:
			if( STATUS_OK != ResetGPIOsPin(AMP_SHUTDOWN_GPIO_Port, AMP_SHUTDOWN_Pin))
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MAX9704_AmpShutdown+0x60>)
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fcc9 	bl	8000dc2 <ResetGPIOsPin>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d013      	beq.n	800045c <MAX9704_AmpShutdown+0x50>
				return STATUS_ERR;
 8000434:	23ff      	movs	r3, #255	; 0xff
 8000436:	e015      	b.n	8000464 <MAX9704_AmpShutdown+0x58>
			break;
		case SHUTDOWN_DISABLE:
			if( STATUS_OK != SetGPIOsPin(AMP_SHUTDOWN_GPIO_Port, AMP_SHUTDOWN_Pin))
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MAX9704_AmpShutdown+0x60>)
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fc9f 	bl	8000d80 <SetGPIOsPin>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d00c      	beq.n	8000460 <MAX9704_AmpShutdown+0x54>
				return STATUS_ERR;
 8000446:	23ff      	movs	r3, #255	; 0xff
 8000448:	e00c      	b.n	8000464 <MAX9704_AmpShutdown+0x58>
			break;
		/* default mode is SHUTDOWN_DISABLE */
		default:
			if( STATUS_OK != SetGPIOsPin(AMP_SHUTDOWN_GPIO_Port, AMP_SHUTDOWN_Pin))
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <MAX9704_AmpShutdown+0x60>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fc96 	bl	8000d80 <SetGPIOsPin>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d004      	beq.n	8000462 <MAX9704_AmpShutdown+0x56>
				return STATUS_ERR;
 8000458:	23ff      	movs	r3, #255	; 0xff
 800045a:	e003      	b.n	8000464 <MAX9704_AmpShutdown+0x58>
			break;
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	e000      	b.n	8000462 <MAX9704_AmpShutdown+0x56>
			break;
 8000460:	46c0      	nop			; (mov r8, r8)
	}
	return STATUS_OK;
 8000462:	2300      	movs	r3, #0
}
 8000464:	0018      	movs	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}
 800046c:	50000400 	.word	0x50000400

08000470 <MAX9704_AmpInit>:
	}
	return STATUS_OK;
}

Status_TypeDef MAX9704_AmpInit(Switching_Modes switchMode, Amp_Gain gain)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	0002      	movs	r2, r0
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	701a      	strb	r2, [r3, #0]
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	1c0a      	adds	r2, r1, #0
 8000480:	701a      	strb	r2, [r3, #0]
	if( STATUS_OK != MAX9704_AmpShutdown(SHUTDOWN_ENABLE))
 8000482:	2000      	movs	r0, #0
 8000484:	f7ff ffc2 	bl	800040c <MAX9704_AmpShutdown>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MAX9704_AmpInit+0x20>
		return STATUS_ERR;
 800048c:	23ff      	movs	r3, #255	; 0xff
 800048e:	e019      	b.n	80004c4 <MAX9704_AmpInit+0x54>
	if( STATUS_OK != MAX9704_AmpSwitchingMode(switchMode))
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	0018      	movs	r0, r3
 8000496:	f7ff fec1 	bl	800021c <MAX9704_AmpSwitchingMode>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MAX9704_AmpInit+0x32>
	    return STATUS_ERR;
 800049e:	23ff      	movs	r3, #255	; 0xff
 80004a0:	e010      	b.n	80004c4 <MAX9704_AmpInit+0x54>
	if( STATUS_OK != MAX9704_AmpGain(gain))
 80004a2:	1dbb      	adds	r3, r7, #6
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	0018      	movs	r0, r3
 80004a8:	f7ff ff34 	bl	8000314 <MAX9704_AmpGain>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MAX9704_AmpInit+0x44>
		return STATUS_ERR;
 80004b0:	23ff      	movs	r3, #255	; 0xff
 80004b2:	e007      	b.n	80004c4 <MAX9704_AmpInit+0x54>
	if( STATUS_OK != MAX9704_AmpShutdown(SHUTDOWN_DISABLE))
 80004b4:	2001      	movs	r0, #1
 80004b6:	f7ff ffa9 	bl	800040c <MAX9704_AmpShutdown>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MAX9704_AmpInit+0x52>
		return STATUS_ERR;
 80004be:	23ff      	movs	r3, #255	; 0xff
 80004c0:	e000      	b.n	80004c4 <MAX9704_AmpInit+0x54>
	return STATUS_OK;
 80004c2:	2300      	movs	r3, #0
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}

080004cc <MAX9867_DigitalAudioInterfaceInit>:
Status_TypeDef MAX9867_DigitalAudioInterfaceInit(MAX9867_Master_Slave_Mode mode,
	MAX9867_L_R_Clk_Invert lrclk, MAX9867_Bit_Clk_Invert bclkMode, MAX9867_SDOUT_Delay sdoutDelay,
	MAX9867_Delay_Mode delayMode, MAX9867_SDOUT_Mode_High_Impedance_Mode sdoutMode,
	MAX9867_TDM_Mode tdmMode, MAX9867_BCLK_Select bclkSelect, MAX9867_Mono_Playback_Mode monoMode,
	MAX9867_Fix_Line_Input_Volume fixLineVol)
{
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	0005      	movs	r5, r0
 80004d4:	000c      	movs	r4, r1
 80004d6:	0010      	movs	r0, r2
 80004d8:	0019      	movs	r1, r3
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	1c2a      	adds	r2, r5, #0
 80004de:	701a      	strb	r2, [r3, #0]
 80004e0:	1dbb      	adds	r3, r7, #6
 80004e2:	1c22      	adds	r2, r4, #0
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1d7b      	adds	r3, r7, #5
 80004e8:	1c02      	adds	r2, r0, #0
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	1c0a      	adds	r2, r1, #0
 80004f0:	701a      	strb	r2, [r3, #0]
	digAudReg1.MAS = mode;
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2201      	movs	r2, #1
 80004f8:	4013      	ands	r3, r2
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b5a      	ldr	r3, [pc, #360]	; (8000668 <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 80004fe:	01d0      	lsls	r0, r2, #7
 8000500:	785a      	ldrb	r2, [r3, #1]
 8000502:	217f      	movs	r1, #127	; 0x7f
 8000504:	400a      	ands	r2, r1
 8000506:	1c11      	adds	r1, r2, #0
 8000508:	1c02      	adds	r2, r0, #0
 800050a:	430a      	orrs	r2, r1
 800050c:	705a      	strb	r2, [r3, #1]
	digAudReg1.WCI = lrclk;
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b53      	ldr	r3, [pc, #332]	; (8000668 <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800051a:	2101      	movs	r1, #1
 800051c:	400a      	ands	r2, r1
 800051e:	0190      	lsls	r0, r2, #6
 8000520:	785a      	ldrb	r2, [r3, #1]
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	438a      	bics	r2, r1
 8000526:	1c11      	adds	r1, r2, #0
 8000528:	1c02      	adds	r2, r0, #0
 800052a:	430a      	orrs	r2, r1
 800052c:	705a      	strb	r2, [r3, #1]
	digAudReg1.BCI = bclkMode;
 800052e:	1d7b      	adds	r3, r7, #5
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b4b      	ldr	r3, [pc, #300]	; (8000668 <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800053a:	2101      	movs	r1, #1
 800053c:	400a      	ands	r2, r1
 800053e:	0150      	lsls	r0, r2, #5
 8000540:	785a      	ldrb	r2, [r3, #1]
 8000542:	2120      	movs	r1, #32
 8000544:	438a      	bics	r2, r1
 8000546:	1c11      	adds	r1, r2, #0
 8000548:	1c02      	adds	r2, r0, #0
 800054a:	430a      	orrs	r2, r1
 800054c:	705a      	strb	r2, [r3, #1]
	digAudReg1.DLY = sdoutDelay;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b43      	ldr	r3, [pc, #268]	; (8000668 <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800055a:	2101      	movs	r1, #1
 800055c:	400a      	ands	r2, r1
 800055e:	0110      	lsls	r0, r2, #4
 8000560:	785a      	ldrb	r2, [r3, #1]
 8000562:	2110      	movs	r1, #16
 8000564:	438a      	bics	r2, r1
 8000566:	1c11      	adds	r1, r2, #0
 8000568:	1c02      	adds	r2, r0, #0
 800056a:	430a      	orrs	r2, r1
 800056c:	705a      	strb	r2, [r3, #1]
	digAudReg1.HIZOFF = sdoutMode;
 800056e:	231c      	movs	r3, #28
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2201      	movs	r2, #1
 8000576:	4013      	ands	r3, r2
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800057c:	2101      	movs	r1, #1
 800057e:	400a      	ands	r2, r1
 8000580:	00d0      	lsls	r0, r2, #3
 8000582:	785a      	ldrb	r2, [r3, #1]
 8000584:	2108      	movs	r1, #8
 8000586:	438a      	bics	r2, r1
 8000588:	1c11      	adds	r1, r2, #0
 800058a:	1c02      	adds	r2, r0, #0
 800058c:	430a      	orrs	r2, r1
 800058e:	705a      	strb	r2, [r3, #1]
	digAudReg1.TDM = tdmMode;
 8000590:	2320      	movs	r3, #32
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b32      	ldr	r3, [pc, #200]	; (8000668 <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 800059e:	2101      	movs	r1, #1
 80005a0:	400a      	ands	r2, r1
 80005a2:	0090      	lsls	r0, r2, #2
 80005a4:	785a      	ldrb	r2, [r3, #1]
 80005a6:	2104      	movs	r1, #4
 80005a8:	438a      	bics	r2, r1
 80005aa:	1c11      	adds	r1, r2, #0
 80005ac:	1c02      	adds	r2, r0, #0
 80005ae:	430a      	orrs	r2, r1
 80005b0:	705a      	strb	r2, [r3, #1]

	digAudReg2.BSEL = bclkSelect;
 80005b2:	2324      	movs	r3, #36	; 0x24
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2207      	movs	r2, #7
 80005ba:	4013      	ands	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 80005c0:	2107      	movs	r1, #7
 80005c2:	400a      	ands	r2, r1
 80005c4:	0010      	movs	r0, r2
 80005c6:	785a      	ldrb	r2, [r3, #1]
 80005c8:	2107      	movs	r1, #7
 80005ca:	438a      	bics	r2, r1
 80005cc:	1c11      	adds	r1, r2, #0
 80005ce:	1c02      	adds	r2, r0, #0
 80005d0:	430a      	orrs	r2, r1
 80005d2:	705a      	strb	r2, [r3, #1]
	digAudReg2.DMONO = monoMode;
 80005d4:	2328      	movs	r3, #40	; 0x28
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 80005e2:	2101      	movs	r1, #1
 80005e4:	400a      	ands	r2, r1
 80005e6:	00d0      	lsls	r0, r2, #3
 80005e8:	785a      	ldrb	r2, [r3, #1]
 80005ea:	2108      	movs	r1, #8
 80005ec:	438a      	bics	r2, r1
 80005ee:	1c11      	adds	r1, r2, #0
 80005f0:	1c02      	adds	r2, r0, #0
 80005f2:	430a      	orrs	r2, r1
 80005f4:	705a      	strb	r2, [r3, #1]
	digAudReg2.LVOLFIX = fixLineVol;
 80005f6:	232c      	movs	r3, #44	; 0x2c
 80005f8:	18fb      	adds	r3, r7, r3
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2201      	movs	r2, #1
 80005fe:	4013      	ands	r3, r2
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 8000604:	2101      	movs	r1, #1
 8000606:	400a      	ands	r2, r1
 8000608:	0110      	lsls	r0, r2, #4
 800060a:	785a      	ldrb	r2, [r3, #1]
 800060c:	2110      	movs	r1, #16
 800060e:	438a      	bics	r2, r1
 8000610:	1c11      	adds	r1, r2, #0
 8000612:	1c02      	adds	r2, r0, #0
 8000614:	430a      	orrs	r2, r1
 8000616:	705a      	strb	r2, [r3, #1]

	tDataCodec[0] = MAX9867_REG_INTERFACE_MODE1;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 800061a:	2208      	movs	r2, #8
 800061c:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = digAudReg1.digAudReg1;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MAX9867_DigitalAudioInterfaceInit+0x19c>)
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 8000624:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <MAX9867_DigitalAudioInterfaceInit+0x1a8>)
 800062a:	2302      	movs	r3, #2
 800062c:	2118      	movs	r1, #24
 800062e:	f000 fbe9 	bl	8000e04 <WriteI2C>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MAX9867_DigitalAudioInterfaceInit+0x16e>
			return STATUS_ERR;
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	e011      	b.n	800065e <MAX9867_DigitalAudioInterfaceInit+0x192>

	tDataCodec[0] = MAX9867_REG_INTERFACE_MODE2;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 800063c:	2209      	movs	r2, #9
 800063e:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = digAudReg2.digAudReg2;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MAX9867_DigitalAudioInterfaceInit+0x1a0>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 8000646:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <MAX9867_DigitalAudioInterfaceInit+0x1a4>)
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <MAX9867_DigitalAudioInterfaceInit+0x1a8>)
 800064c:	2302      	movs	r3, #2
 800064e:	2118      	movs	r1, #24
 8000650:	f000 fbd8 	bl	8000e04 <WriteI2C>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MAX9867_DigitalAudioInterfaceInit+0x190>
			return STATUS_ERR;
 8000658:	23ff      	movs	r3, #255	; 0xff
 800065a:	e000      	b.n	800065e <MAX9867_DigitalAudioInterfaceInit+0x192>
	return STATUS_OK;
 800065c:	2300      	movs	r3, #0
}
 800065e:	0018      	movs	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bdb0      	pop	{r4, r5, r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000034 	.word	0x20000034
 800066c:	20000038 	.word	0x20000038
 8000670:	20000054 	.word	0x20000054
 8000674:	20000058 	.word	0x20000058

08000678 <MAX9867_DigitalFilterInit>:

Status_TypeDef MAX9867_DigitalFilterInit(Digital_Audio_Filter_Mode mode, ADC_DAC_Digital_Audio_Filter_Sٍpecifications ADC_Specifications,ADC_DAC_Digital_Audio_Filter_Sٍpecifications DAC_Specifications)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	0004      	movs	r4, r0
 8000680:	0008      	movs	r0, r1
 8000682:	0011      	movs	r1, r2
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	1c22      	adds	r2, r4, #0
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	1dbb      	adds	r3, r7, #6
 800068c:	1c02      	adds	r2, r0, #0
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	1d7b      	adds	r3, r7, #5
 8000692:	1c0a      	adds	r2, r1, #0
 8000694:	701a      	strb	r2, [r3, #0]

	codecFilterReg.MODE = mode;
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MAX9867_DigitalFilterInit+0xa8>)
 80006a2:	01d0      	lsls	r0, r2, #7
 80006a4:	785a      	ldrb	r2, [r3, #1]
 80006a6:	217f      	movs	r1, #127	; 0x7f
 80006a8:	400a      	ands	r2, r1
 80006aa:	1c11      	adds	r1, r2, #0
 80006ac:	1c02      	adds	r2, r0, #0
 80006ae:	430a      	orrs	r2, r1
 80006b0:	705a      	strb	r2, [r3, #1]
	codecFilterReg.AVFLT = ADC_Specifications;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2207      	movs	r2, #7
 80006b8:	4013      	ands	r3, r2
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MAX9867_DigitalFilterInit+0xa8>)
 80006be:	2107      	movs	r1, #7
 80006c0:	400a      	ands	r2, r1
 80006c2:	0110      	lsls	r0, r2, #4
 80006c4:	785a      	ldrb	r2, [r3, #1]
 80006c6:	2170      	movs	r1, #112	; 0x70
 80006c8:	438a      	bics	r2, r1
 80006ca:	1c11      	adds	r1, r2, #0
 80006cc:	1c02      	adds	r2, r0, #0
 80006ce:	430a      	orrs	r2, r1
 80006d0:	705a      	strb	r2, [r3, #1]
	codecFilterReg.DVFLT = DAC_Specifications;
 80006d2:	1d7b      	adds	r3, r7, #5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2207      	movs	r2, #7
 80006d8:	4013      	ands	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MAX9867_DigitalFilterInit+0xa8>)
 80006de:	2107      	movs	r1, #7
 80006e0:	400a      	ands	r2, r1
 80006e2:	0010      	movs	r0, r2
 80006e4:	785a      	ldrb	r2, [r3, #1]
 80006e6:	2107      	movs	r1, #7
 80006e8:	438a      	bics	r2, r1
 80006ea:	1c11      	adds	r1, r2, #0
 80006ec:	1c02      	adds	r2, r0, #0
 80006ee:	430a      	orrs	r2, r1
 80006f0:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_CODEC_FILTERS;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MAX9867_DigitalFilterInit+0xac>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = codecFilterReg.digtlFltrReg;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MAX9867_DigitalFilterInit+0xa8>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MAX9867_DigitalFilterInit+0xac>)
 80006fe:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000700:	4a08      	ldr	r2, [pc, #32]	; (8000724 <MAX9867_DigitalFilterInit+0xac>)
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <MAX9867_DigitalFilterInit+0xb0>)
 8000704:	2302      	movs	r3, #2
 8000706:	2118      	movs	r1, #24
 8000708:	f000 fb7c 	bl	8000e04 <WriteI2C>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MAX9867_DigitalFilterInit+0x9c>
			return STATUS_ERR;
 8000710:	23ff      	movs	r3, #255	; 0xff
 8000712:	e000      	b.n	8000716 <MAX9867_DigitalFilterInit+0x9e>
	return STATUS_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b003      	add	sp, #12
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	2000003c 	.word	0x2000003c
 8000724:	20000054 	.word	0x20000054
 8000728:	20000058 	.word	0x20000058

0800072c <MAX9867_ClockControlInit>:

Status_TypeDef MAX9867_ClockControlInit(MCLK_Prescaler mclkPresclr, Exact_Integer_Modes exactIntMode,
		PLL_Mode_En_Dis pllMode, uint32_t NI, PLL_Rapid_Lock_En_Dis pllRapidLock)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	0004      	movs	r4, r0
 8000734:	0008      	movs	r0, r1
 8000736:	0011      	movs	r1, r2
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	1c22      	adds	r2, r4, #0
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	1c02      	adds	r2, r0, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	1d7b      	adds	r3, r7, #5
 8000748:	1c0a      	adds	r2, r1, #0
 800074a:	701a      	strb	r2, [r3, #0]
	sysClkReg.PSCLK = mclkPresclr;
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2203      	movs	r2, #3
 8000752:	4013      	ands	r3, r2
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b48      	ldr	r3, [pc, #288]	; (8000878 <MAX9867_ClockControlInit+0x14c>)
 8000758:	2103      	movs	r1, #3
 800075a:	400a      	ands	r2, r1
 800075c:	00d0      	lsls	r0, r2, #3
 800075e:	785a      	ldrb	r2, [r3, #1]
 8000760:	2118      	movs	r1, #24
 8000762:	438a      	bics	r2, r1
 8000764:	1c11      	adds	r1, r2, #0
 8000766:	1c02      	adds	r2, r0, #0
 8000768:	430a      	orrs	r2, r1
 800076a:	705a      	strb	r2, [r3, #1]
	sysClkReg.FREQ = exactIntMode;
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2207      	movs	r2, #7
 8000772:	4013      	ands	r3, r2
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b40      	ldr	r3, [pc, #256]	; (8000878 <MAX9867_ClockControlInit+0x14c>)
 8000778:	2107      	movs	r1, #7
 800077a:	400a      	ands	r2, r1
 800077c:	0010      	movs	r0, r2
 800077e:	785a      	ldrb	r2, [r3, #1]
 8000780:	2107      	movs	r1, #7
 8000782:	438a      	bics	r2, r1
 8000784:	1c11      	adds	r1, r2, #0
 8000786:	1c02      	adds	r2, r0, #0
 8000788:	430a      	orrs	r2, r1
 800078a:	705a      	strb	r2, [r3, #1]

	stereoAudClkRegH.PLL = pllMode;
 800078c:	1d7b      	adds	r3, r7, #5
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2201      	movs	r2, #1
 8000792:	4013      	ands	r3, r2
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <MAX9867_ClockControlInit+0x150>)
 8000798:	01d0      	lsls	r0, r2, #7
 800079a:	785a      	ldrb	r2, [r3, #1]
 800079c:	217f      	movs	r1, #127	; 0x7f
 800079e:	400a      	ands	r2, r1
 80007a0:	1c11      	adds	r1, r2, #0
 80007a2:	1c02      	adds	r2, r0, #0
 80007a4:	430a      	orrs	r2, r1
 80007a6:	705a      	strb	r2, [r3, #1]
	stereoAudClkRegH.NI = NI >> 8;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	0a1b      	lsrs	r3, r3, #8
 80007ac:	1c1a      	adds	r2, r3, #0
 80007ae:	237f      	movs	r3, #127	; 0x7f
 80007b0:	4013      	ands	r3, r2
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b31      	ldr	r3, [pc, #196]	; (800087c <MAX9867_ClockControlInit+0x150>)
 80007b6:	217f      	movs	r1, #127	; 0x7f
 80007b8:	400a      	ands	r2, r1
 80007ba:	0010      	movs	r0, r2
 80007bc:	785a      	ldrb	r2, [r3, #1]
 80007be:	217f      	movs	r1, #127	; 0x7f
 80007c0:	438a      	bics	r2, r1
 80007c2:	1c11      	adds	r1, r2, #0
 80007c4:	1c02      	adds	r2, r0, #0
 80007c6:	430a      	orrs	r2, r1
 80007c8:	705a      	strb	r2, [r3, #1]

	stereoAudClkRegL.NI0 = pllRapidLock;
 80007ca:	2318      	movs	r3, #24
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4013      	ands	r3, r2
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MAX9867_ClockControlInit+0x154>)
 80007d8:	2101      	movs	r1, #1
 80007da:	400a      	ands	r2, r1
 80007dc:	0010      	movs	r0, r2
 80007de:	785a      	ldrb	r2, [r3, #1]
 80007e0:	2101      	movs	r1, #1
 80007e2:	438a      	bics	r2, r1
 80007e4:	1c11      	adds	r1, r2, #0
 80007e6:	1c02      	adds	r2, r0, #0
 80007e8:	430a      	orrs	r2, r1
 80007ea:	705a      	strb	r2, [r3, #1]
	stereoAudClkRegL.NI = NI;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	1c1a      	adds	r2, r3, #0
 80007f0:	237f      	movs	r3, #127	; 0x7f
 80007f2:	4013      	ands	r3, r2
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MAX9867_ClockControlInit+0x154>)
 80007f8:	1890      	adds	r0, r2, r2
 80007fa:	785a      	ldrb	r2, [r3, #1]
 80007fc:	2101      	movs	r1, #1
 80007fe:	400a      	ands	r2, r1
 8000800:	1c11      	adds	r1, r2, #0
 8000802:	1c02      	adds	r2, r0, #0
 8000804:	430a      	orrs	r2, r1
 8000806:	705a      	strb	r2, [r3, #1]

	tDataCodec[0] = MAX9867_REG_SYSTEM_CLK;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 800080a:	2205      	movs	r2, #5
 800080c:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = sysClkReg.sysClkReg;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MAX9867_ClockControlInit+0x14c>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 8000814:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 8000818:	481b      	ldr	r0, [pc, #108]	; (8000888 <MAX9867_ClockControlInit+0x15c>)
 800081a:	2302      	movs	r3, #2
 800081c:	2118      	movs	r1, #24
 800081e:	f000 faf1 	bl	8000e04 <WriteI2C>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MAX9867_ClockControlInit+0xfe>
			return STATUS_ERR;
 8000826:	23ff      	movs	r3, #255	; 0xff
 8000828:	e022      	b.n	8000870 <MAX9867_ClockControlInit+0x144>

	tDataCodec[0] = MAX9867_REG_STEREO_AUD_CLK_CTRL_H;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 800082c:	2206      	movs	r2, #6
 800082e:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = stereoAudClkRegH.stereoAudClkRegH;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MAX9867_ClockControlInit+0x150>)
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 8000836:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 800083a:	4813      	ldr	r0, [pc, #76]	; (8000888 <MAX9867_ClockControlInit+0x15c>)
 800083c:	2302      	movs	r3, #2
 800083e:	2118      	movs	r1, #24
 8000840:	f000 fae0 	bl	8000e04 <WriteI2C>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MAX9867_ClockControlInit+0x120>
			return STATUS_ERR;
 8000848:	23ff      	movs	r3, #255	; 0xff
 800084a:	e011      	b.n	8000870 <MAX9867_ClockControlInit+0x144>

	tDataCodec[0] = MAX9867_REG_STEREO_AUD_CLK_CTRL_L;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 800084e:	2207      	movs	r2, #7
 8000850:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = stereoAudClkRegL.stereoAudClkRegL;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MAX9867_ClockControlInit+0x154>)
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 8000858:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <MAX9867_ClockControlInit+0x158>)
 800085c:	480a      	ldr	r0, [pc, #40]	; (8000888 <MAX9867_ClockControlInit+0x15c>)
 800085e:	2302      	movs	r3, #2
 8000860:	2118      	movs	r1, #24
 8000862:	f000 facf 	bl	8000e04 <WriteI2C>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MAX9867_ClockControlInit+0x142>
			return STATUS_ERR;
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	e000      	b.n	8000870 <MAX9867_ClockControlInit+0x144>

	return STATUS_OK;
 800086e:	2300      	movs	r3, #0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	20000028 	.word	0x20000028
 800087c:	2000002c 	.word	0x2000002c
 8000880:	20000030 	.word	0x20000030
 8000884:	20000054 	.word	0x20000054
 8000888:	20000058 	.word	0x20000058

0800088c <MAX9867_Shoutdown>:
			return STATUS_ERR;
	return STATUS_OK;
}

Status_TypeDef MAX9867_Shoutdown(Shoutdown shtdown)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	701a      	strb	r2, [r3, #0]
	powerMangReg.SHDN = shtdown;
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2201      	movs	r2, #1
 800089e:	4013      	ands	r3, r2
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MAX9867_Shoutdown+0x54>)
 80008a4:	01d0      	lsls	r0, r2, #7
 80008a6:	785a      	ldrb	r2, [r3, #1]
 80008a8:	217f      	movs	r1, #127	; 0x7f
 80008aa:	400a      	ands	r2, r1
 80008ac:	1c11      	adds	r1, r2, #0
 80008ae:	1c02      	adds	r2, r0, #0
 80008b0:	430a      	orrs	r2, r1
 80008b2:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_SYS_SHUTDOWN;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MAX9867_Shoutdown+0x58>)
 80008b6:	2217      	movs	r2, #23
 80008b8:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = powerMangReg.pwrManagReg;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MAX9867_Shoutdown+0x54>)
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MAX9867_Shoutdown+0x58>)
 80008c0:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <MAX9867_Shoutdown+0x58>)
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <MAX9867_Shoutdown+0x5c>)
 80008c6:	2302      	movs	r3, #2
 80008c8:	2118      	movs	r1, #24
 80008ca:	f000 fa9b 	bl	8000e04 <WriteI2C>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MAX9867_Shoutdown+0x4a>
			return STATUS_ERR;
 80008d2:	23ff      	movs	r3, #255	; 0xff
 80008d4:	e000      	b.n	80008d8 <MAX9867_Shoutdown+0x4c>
	return STATUS_OK;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b002      	add	sp, #8
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000050 	.word	0x20000050
 80008e4:	20000054 	.word	0x20000054
 80008e8:	20000058 	.word	0x20000058

080008ec <MAX9867_HeadphoneAmpType>:

Status_TypeDef MAX9867_HeadphoneAmpType(Headphone_Amp_Type ampMode)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	0002      	movs	r2, r0
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
	configModeReg.HPMODE = ampMode;
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2207      	movs	r2, #7
 80008fe:	4013      	ands	r3, r2
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MAX9867_HeadphoneAmpType+0x58>)
 8000904:	2107      	movs	r1, #7
 8000906:	400a      	ands	r2, r1
 8000908:	0010      	movs	r0, r2
 800090a:	785a      	ldrb	r2, [r3, #1]
 800090c:	2107      	movs	r1, #7
 800090e:	438a      	bics	r2, r1
 8000910:	1c11      	adds	r1, r2, #0
 8000912:	1c02      	adds	r2, r0, #0
 8000914:	430a      	orrs	r2, r1
 8000916:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_MODE;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MAX9867_HeadphoneAmpType+0x5c>)
 800091a:	2216      	movs	r2, #22
 800091c:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = configModeReg.configModeReg;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MAX9867_HeadphoneAmpType+0x58>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MAX9867_HeadphoneAmpType+0x5c>)
 8000924:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <MAX9867_HeadphoneAmpType+0x5c>)
 8000928:	4808      	ldr	r0, [pc, #32]	; (800094c <MAX9867_HeadphoneAmpType+0x60>)
 800092a:	2302      	movs	r3, #2
 800092c:	2118      	movs	r1, #24
 800092e:	f000 fa69 	bl	8000e04 <WriteI2C>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MAX9867_HeadphoneAmpType+0x4e>
			return STATUS_ERR;
 8000936:	23ff      	movs	r3, #255	; 0xff
 8000938:	e000      	b.n	800093c <MAX9867_HeadphoneAmpType+0x50>
	return STATUS_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000004c 	.word	0x2000004c
 8000948:	20000054 	.word	0x20000054
 800094c:	20000058 	.word	0x20000058

08000950 <MAX9867_DAC_EnableDisable>:

Status_TypeDef MAX9867_DAC_EnableDisable(DAC_En_Dis dac)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	701a      	strb	r2, [r3, #0]
		powerMangReg.DALEN = dac;
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2201      	movs	r2, #1
 8000962:	4013      	ands	r3, r2
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MAX9867_DAC_EnableDisable+0x78>)
 8000968:	2101      	movs	r1, #1
 800096a:	400a      	ands	r2, r1
 800096c:	00d0      	lsls	r0, r2, #3
 800096e:	785a      	ldrb	r2, [r3, #1]
 8000970:	2108      	movs	r1, #8
 8000972:	438a      	bics	r2, r1
 8000974:	1c11      	adds	r1, r2, #0
 8000976:	1c02      	adds	r2, r0, #0
 8000978:	430a      	orrs	r2, r1
 800097a:	705a      	strb	r2, [r3, #1]
		powerMangReg.DAREN = dac;
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2201      	movs	r2, #1
 8000982:	4013      	ands	r3, r2
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MAX9867_DAC_EnableDisable+0x78>)
 8000988:	2101      	movs	r1, #1
 800098a:	400a      	ands	r2, r1
 800098c:	0090      	lsls	r0, r2, #2
 800098e:	785a      	ldrb	r2, [r3, #1]
 8000990:	2104      	movs	r1, #4
 8000992:	438a      	bics	r2, r1
 8000994:	1c11      	adds	r1, r2, #0
 8000996:	1c02      	adds	r2, r0, #0
 8000998:	430a      	orrs	r2, r1
 800099a:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_CODEC_FILTERS;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MAX9867_DAC_EnableDisable+0x7c>)
 800099e:	220a      	movs	r2, #10
 80009a0:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = powerMangReg.pwrManagReg;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MAX9867_DAC_EnableDisable+0x78>)
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MAX9867_DAC_EnableDisable+0x7c>)
 80009a8:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <MAX9867_DAC_EnableDisable+0x7c>)
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MAX9867_DAC_EnableDisable+0x80>)
 80009ae:	2302      	movs	r3, #2
 80009b0:	2118      	movs	r1, #24
 80009b2:	f000 fa27 	bl	8000e04 <WriteI2C>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MAX9867_DAC_EnableDisable+0x6e>
				return STATUS_ERR;
 80009ba:	23ff      	movs	r3, #255	; 0xff
 80009bc:	e000      	b.n	80009c0 <MAX9867_DAC_EnableDisable+0x70>
	return STATUS_OK;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000050 	.word	0x20000050
 80009cc:	20000054 	.word	0x20000054
 80009d0:	20000058 	.word	0x20000058

080009d4 <MAX9867_DAC_Gain>:

Status_TypeDef MAX9867_DAC_Gain(DAC_Gain firstAmp, DAC_Level_Ctrl progAmp)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	0002      	movs	r2, r0
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	1dbb      	adds	r3, r7, #6
 80009e2:	1c0a      	adds	r2, r1, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	DAC_LevelReg.DACG = firstAmp;
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2203      	movs	r2, #3
 80009ec:	4013      	ands	r3, r2
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MAX9867_DAC_Gain+0x80>)
 80009f2:	2103      	movs	r1, #3
 80009f4:	400a      	ands	r2, r1
 80009f6:	0110      	lsls	r0, r2, #4
 80009f8:	785a      	ldrb	r2, [r3, #1]
 80009fa:	2130      	movs	r1, #48	; 0x30
 80009fc:	438a      	bics	r2, r1
 80009fe:	1c11      	adds	r1, r2, #0
 8000a00:	1c02      	adds	r2, r0, #0
 8000a02:	430a      	orrs	r2, r1
 8000a04:	705a      	strb	r2, [r3, #1]
	DAC_LevelReg.DACA = progAmp;
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MAX9867_DAC_Gain+0x80>)
 8000a12:	210f      	movs	r1, #15
 8000a14:	400a      	ands	r2, r1
 8000a16:	0010      	movs	r0, r2
 8000a18:	785a      	ldrb	r2, [r3, #1]
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	438a      	bics	r2, r1
 8000a1e:	1c11      	adds	r1, r2, #0
 8000a20:	1c02      	adds	r2, r0, #0
 8000a22:	430a      	orrs	r2, r1
 8000a24:	705a      	strb	r2, [r3, #1]
	tDataCodec[0] = MAX9867_REG_DAC_LVL;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MAX9867_DAC_Gain+0x84>)
 8000a28:	220c      	movs	r2, #12
 8000a2a:	701a      	strb	r2, [r3, #0]
	tDataCodec[1] = DAC_LevelReg.DACLvlReg;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MAX9867_DAC_Gain+0x80>)
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MAX9867_DAC_Gain+0x84>)
 8000a32:	705a      	strb	r2, [r3, #1]
	if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <MAX9867_DAC_Gain+0x84>)
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <MAX9867_DAC_Gain+0x88>)
 8000a38:	2302      	movs	r3, #2
 8000a3a:	2118      	movs	r1, #24
 8000a3c:	f000 f9e2 	bl	8000e04 <WriteI2C>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MAX9867_DAC_Gain+0x74>
			return STATUS_ERR;
 8000a44:	23ff      	movs	r3, #255	; 0xff
 8000a46:	e000      	b.n	8000a4a <MAX9867_DAC_Gain+0x76>
	return STATUS_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000040 	.word	0x20000040
 8000a58:	20000054 	.word	0x20000054
 8000a5c:	20000058 	.word	0x20000058

08000a60 <MAX9867_AudioLevel>:
	}
	return STATUS_OK;
}

Status_TypeDef MAX9867_AudioLevel(L_R_Playback_Volume_Channel channel, L_R_Playback_Volume rPlaybackVol, L_R_Playback_Volume lPlaybackVol)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0004      	movs	r4, r0
 8000a68:	0008      	movs	r0, r1
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	1c22      	adds	r2, r4, #0
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	1dbb      	adds	r3, r7, #6
 8000a74:	1c02      	adds	r2, r0, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	1d7b      	adds	r3, r7, #5
 8000a7a:	1c0a      	adds	r2, r1, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	if(channel == LEFT_VOLUME_CHA)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d120      	bne.n	8000ac8 <MAX9867_AudioLevel+0x68>
	{
		lVolumeCtrlReg.VOLL = rPlaybackVol;
 8000a86:	1dbb      	adds	r3, r7, #6
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	223f      	movs	r2, #63	; 0x3f
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <MAX9867_AudioLevel+0x148>)
 8000a92:	213f      	movs	r1, #63	; 0x3f
 8000a94:	400a      	ands	r2, r1
 8000a96:	0010      	movs	r0, r2
 8000a98:	785a      	ldrb	r2, [r3, #1]
 8000a9a:	213f      	movs	r1, #63	; 0x3f
 8000a9c:	438a      	bics	r2, r1
 8000a9e:	1c11      	adds	r1, r2, #0
 8000aa0:	1c02      	adds	r2, r0, #0
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_R_VOL_CTRL;
 8000aa6:	4b41      	ldr	r3, [pc, #260]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000aa8:	2211      	movs	r2, #17
 8000aaa:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = lVolumeCtrlReg.LVolCtrlReg;
 8000aac:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <MAX9867_AudioLevel+0x148>)
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000ab2:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000ab4:	4a3d      	ldr	r2, [pc, #244]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000ab6:	483e      	ldr	r0, [pc, #248]	; (8000bb0 <MAX9867_AudioLevel+0x150>)
 8000ab8:	2302      	movs	r3, #2
 8000aba:	2118      	movs	r1, #24
 8000abc:	f000 f9a2 	bl	8000e04 <WriteI2C>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d06c      	beq.n	8000b9e <MAX9867_AudioLevel+0x13e>
				return STATUS_ERR;
 8000ac4:	23ff      	movs	r3, #255	; 0xff
 8000ac6:	e06b      	b.n	8000ba0 <MAX9867_AudioLevel+0x140>
	}
	else if(channel == RIGHT_VOLUME_CHA)
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d120      	bne.n	8000b12 <MAX9867_AudioLevel+0xb2>
	{
		rVolumeCtrlReg.VOLR = rPlaybackVol;
 8000ad0:	1dbb      	adds	r3, r7, #6
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	223f      	movs	r2, #63	; 0x3f
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <MAX9867_AudioLevel+0x154>)
 8000adc:	213f      	movs	r1, #63	; 0x3f
 8000ade:	400a      	ands	r2, r1
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	785a      	ldrb	r2, [r3, #1]
 8000ae4:	213f      	movs	r1, #63	; 0x3f
 8000ae6:	438a      	bics	r2, r1
 8000ae8:	1c11      	adds	r1, r2, #0
 8000aea:	1c02      	adds	r2, r0, #0
 8000aec:	430a      	orrs	r2, r1
 8000aee:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_L_VOL_CTRL;
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000af2:	2210      	movs	r2, #16
 8000af4:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = rVolumeCtrlReg.RVolCtrlReg;
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MAX9867_AudioLevel+0x154>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000afc:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000afe:	4a2b      	ldr	r2, [pc, #172]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000b00:	482b      	ldr	r0, [pc, #172]	; (8000bb0 <MAX9867_AudioLevel+0x150>)
 8000b02:	2302      	movs	r3, #2
 8000b04:	2118      	movs	r1, #24
 8000b06:	f000 f97d 	bl	8000e04 <WriteI2C>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d047      	beq.n	8000b9e <MAX9867_AudioLevel+0x13e>
				return STATUS_ERR;
 8000b0e:	23ff      	movs	r3, #255	; 0xff
 8000b10:	e046      	b.n	8000ba0 <MAX9867_AudioLevel+0x140>
	}
	else if(channel == LEFT_RIGHT_VOLUME_CHA)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d141      	bne.n	8000b9e <MAX9867_AudioLevel+0x13e>
	{
		rVolumeCtrlReg.VOLR = rPlaybackVol;
 8000b1a:	1dbb      	adds	r3, r7, #6
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	223f      	movs	r2, #63	; 0x3f
 8000b20:	4013      	ands	r3, r2
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <MAX9867_AudioLevel+0x154>)
 8000b26:	213f      	movs	r1, #63	; 0x3f
 8000b28:	400a      	ands	r2, r1
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	785a      	ldrb	r2, [r3, #1]
 8000b2e:	213f      	movs	r1, #63	; 0x3f
 8000b30:	438a      	bics	r2, r1
 8000b32:	1c11      	adds	r1, r2, #0
 8000b34:	1c02      	adds	r2, r0, #0
 8000b36:	430a      	orrs	r2, r1
 8000b38:	705a      	strb	r2, [r3, #1]
		lVolumeCtrlReg.VOLL = rPlaybackVol;
 8000b3a:	1dbb      	adds	r3, r7, #6
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	223f      	movs	r2, #63	; 0x3f
 8000b40:	4013      	ands	r3, r2
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MAX9867_AudioLevel+0x148>)
 8000b46:	213f      	movs	r1, #63	; 0x3f
 8000b48:	400a      	ands	r2, r1
 8000b4a:	0010      	movs	r0, r2
 8000b4c:	785a      	ldrb	r2, [r3, #1]
 8000b4e:	213f      	movs	r1, #63	; 0x3f
 8000b50:	438a      	bics	r2, r1
 8000b52:	1c11      	adds	r1, r2, #0
 8000b54:	1c02      	adds	r2, r0, #0
 8000b56:	430a      	orrs	r2, r1
 8000b58:	705a      	strb	r2, [r3, #1]
		tDataCodec[0] = MAX9867_REG_L_VOL_CTRL;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = rVolumeCtrlReg.RVolCtrlReg;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MAX9867_AudioLevel+0x154>)
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000b66:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000b68:	4a10      	ldr	r2, [pc, #64]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MAX9867_AudioLevel+0x150>)
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	2118      	movs	r1, #24
 8000b70:	f000 f948 	bl	8000e04 <WriteI2C>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MAX9867_AudioLevel+0x11c>
				return STATUS_ERR;
 8000b78:	23ff      	movs	r3, #255	; 0xff
 8000b7a:	e011      	b.n	8000ba0 <MAX9867_AudioLevel+0x140>
		tDataCodec[0] = MAX9867_REG_R_VOL_CTRL;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000b7e:	2211      	movs	r2, #17
 8000b80:	701a      	strb	r2, [r3, #0]
		tDataCodec[1] = lVolumeCtrlReg.LVolCtrlReg;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MAX9867_AudioLevel+0x148>)
 8000b84:	781a      	ldrb	r2, [r3, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000b88:	705a      	strb	r2, [r3, #1]
		if( STATUS_OK != WriteI2C(MAX9867_I2C_HANDLE, MAX9867_SLAVE_ADDRESS, tDataCodec, 2) )
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <MAX9867_AudioLevel+0x14c>)
 8000b8c:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <MAX9867_AudioLevel+0x150>)
 8000b8e:	2302      	movs	r3, #2
 8000b90:	2118      	movs	r1, #24
 8000b92:	f000 f937 	bl	8000e04 <WriteI2C>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d001      	beq.n	8000b9e <MAX9867_AudioLevel+0x13e>
				return STATUS_ERR;
 8000b9a:	23ff      	movs	r3, #255	; 0xff
 8000b9c:	e000      	b.n	8000ba0 <MAX9867_AudioLevel+0x140>
	}
	return STATUS_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b003      	add	sp, #12
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	20000044 	.word	0x20000044
 8000bac:	20000054 	.word	0x20000054
 8000bb0:	20000058 	.word	0x20000058
 8000bb4:	20000048 	.word	0x20000048

08000bb8 <ReadingDigitalAudioInit>:
	return STATUS_OK;
}

Status_TypeDef ReadingDigitalAudioInit(Digital_Audio_Mode audioMode, L_R_Playback_Volume_Channel channel, DAC_Gain firstAmp, DAC_Level_Ctrl progAmp,
		ADC_DAC_Digital_Audio_Filter_Sٍpecifications DAC_Specifications, L_R_Playback_Volume rPlaybackVol, L_R_Playback_Volume lPlaybackVol)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	0005      	movs	r5, r0
 8000bc0:	000c      	movs	r4, r1
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	1c2a      	adds	r2, r5, #0
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	1dbb      	adds	r3, r7, #6
 8000bce:	1c22      	adds	r2, r4, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	1d7b      	adds	r3, r7, #5
 8000bd4:	1c02      	adds	r2, r0, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	1c0a      	adds	r2, r1, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	if(audioMode == AUDIO)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d115      	bne.n	8000c12 <ReadingDigitalAudioInit+0x5a>
	{
		/* in audio application we must set only programmable amplifier, and set preamplifier to 0 because it
		 * especial with microphone voice gain */
		if( STATUS_OK != MAX9867_DAC_Gain(DAC_GAIN_0dB, progAmp))
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0019      	movs	r1, r3
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fef1 	bl	80009d4 <MAX9867_DAC_Gain>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <ReadingDigitalAudioInit+0x42>
				return STATUS_ERR;
 8000bf6:	23ff      	movs	r3, #255	; 0xff
 8000bf8:	e03e      	b.n	8000c78 <ReadingDigitalAudioInit+0xc0>
		/* Enable DC-blocking just in Audio mode */
		/* Note : we can enable DC-blocking by set AVFLT and DVFLT with any value */
		if( STATUS_OK != MAX9867_DigitalFilterInit(FIR_AUDIO_FILTER,DISABLED,DAC_Specifications))
 8000bfa:	2318      	movs	r3, #24
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff fd37 	bl	8000678 <MAX9867_DigitalFilterInit>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d01d      	beq.n	8000c4a <ReadingDigitalAudioInit+0x92>
				return STATUS_ERR;
 8000c0e:	23ff      	movs	r3, #255	; 0xff
 8000c10:	e032      	b.n	8000c78 <ReadingDigitalAudioInit+0xc0>
	}
	else if(audioMode == VOICE)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d117      	bne.n	8000c4a <ReadingDigitalAudioInit+0x92>
	{

		if( STATUS_OK != MAX9867_DAC_Gain(firstAmp, progAmp))
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1d7b      	adds	r3, r7, #5
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff fed5 	bl	80009d4 <MAX9867_DAC_Gain>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <ReadingDigitalAudioInit+0x7a>
				return STATUS_ERR;
 8000c2e:	23ff      	movs	r3, #255	; 0xff
 8000c30:	e022      	b.n	8000c78 <ReadingDigitalAudioInit+0xc0>
		/* Enable DC-blocking just in Audio mode */
		/* Note : we can enable DC-blocking by set AVFLT and DVFLT with any value */
		if( STATUS_OK != MAX9867_DigitalFilterInit(IIR_VOICE_FILTER,DISABLED,DAC_Specifications))
 8000c32:	2318      	movs	r3, #24
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fd1b 	bl	8000678 <MAX9867_DigitalFilterInit>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <ReadingDigitalAudioInit+0x92>
				return STATUS_ERR;
 8000c46:	23ff      	movs	r3, #255	; 0xff
 8000c48:	e016      	b.n	8000c78 <ReadingDigitalAudioInit+0xc0>
	}
	/* Audio level control */
	if( STATUS_OK != MAX9867_AudioLevel(channel, rPlaybackVol, lPlaybackVol))
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	231c      	movs	r3, #28
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	7819      	ldrb	r1, [r3, #0]
 8000c56:	1dbb      	adds	r3, r7, #6
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff ff00 	bl	8000a60 <MAX9867_AudioLevel>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <ReadingDigitalAudioInit+0xb0>
			return STATUS_ERR;
 8000c64:	23ff      	movs	r3, #255	; 0xff
 8000c66:	e007      	b.n	8000c78 <ReadingDigitalAudioInit+0xc0>
	/* Enable DAC */
	if( STATUS_OK != MAX9867_DAC_EnableDisable(DAC_ENABLE))
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fe71 	bl	8000950 <MAX9867_DAC_EnableDisable>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <ReadingDigitalAudioInit+0xbe>
			return STATUS_ERR;
 8000c72:	23ff      	movs	r3, #255	; 0xff
 8000c74:	e000      	b.n	8000c78 <ReadingDigitalAudioInit+0xc0>
	return STATUS_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bdb0      	pop	{r4, r5, r7, pc}

08000c80 <MAX9867_CodecInit>:
	*dcMeasurement = 0.738 * (auxReg/calibrationFactor);
	return STATUS_OK;
}

Status_TypeDef MAX9867_CodecInit(DAC_Level_Ctrl dacGain,L_R_Playback_Volume rPlaybackVol,L_R_Playback_Volume lPlaybackVol)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af06      	add	r7, sp, #24
 8000c86:	0004      	movs	r4, r0
 8000c88:	0008      	movs	r0, r1
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	1c22      	adds	r2, r4, #0
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	1dbb      	adds	r3, r7, #6
 8000c94:	1c02      	adds	r2, r0, #0
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	1d7b      	adds	r3, r7, #5
 8000c9a:	1c0a      	adds	r2, r1, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
	if( STATUS_OK != MAX9867_Shoutdown(SHOUTDOWN_ENABLE))
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fdf4 	bl	800088c <MAX9867_Shoutdown>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MAX9867_CodecInit+0x2c>
		return STATUS_ERR;
 8000ca8:	23ff      	movs	r3, #255	; 0xff
 8000caa:	e040      	b.n	8000d2e <MAX9867_CodecInit+0xae>
	if( STATUS_OK != MAX9867_ClockControlInit(MCLK_BETWEEN_10_20_MHZ, NORMAL_OR_PLL_MODE,
 8000cac:	2300      	movs	r3, #0
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff fd38 	bl	800072c <MAX9867_ClockControlInit>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MAX9867_CodecInit+0x44>
	  		PLL_DISABLE, 0, 0))
		return STATUS_ERR;
 8000cc0:	23ff      	movs	r3, #255	; 0xff
 8000cc2:	e034      	b.n	8000d2e <MAX9867_CodecInit+0xae>
	if( STATUS_OK != MAX9867_DigitalAudioInterfaceInit(MAX9867_SLAVE_MODE,
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9305      	str	r3, [sp, #20]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	9304      	str	r3, [sp, #16]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9303      	str	r3, [sp, #12]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fbf2 	bl	80004cc <MAX9867_DigitalAudioInterfaceInit>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MAX9867_CodecInit+0x70>
			  LEFT_CHN_DATA_IN_OUT, SDIN_LATCHED_RISING_EDGE_BCLK, SDOUT_TRANS_AFTER_SDIN_LATCHED,
			  SDIN_SDOUT_LATCHED_SECOND_BCLK_EDGE, SDOUT_HIGH_IMPEDANCE_AFTER_DATA_TRANS,
			  LRCLK_INDICATE_L_R_AUDIO, OFF, SDIN_PROCESS_SEPARATELY,
			  TRACKS_VOLL_VOLR_BITS))
		return STATUS_ERR;
 8000cec:	23ff      	movs	r3, #255	; 0xff
 8000cee:	e01e      	b.n	8000d2e <MAX9867_CodecInit+0xae>
	ReadingDigitalAudioInit(AUDIO, LEFT_RIGHT_VOLUME_CHA, DAC_GAIN_0dB, dacGain,
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	1d7b      	adds	r3, r7, #5
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	1dbb      	adds	r3, r7, #6
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	2301      	movs	r3, #1
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	0013      	movs	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff ff54 	bl	8000bb8 <ReadingDigitalAudioInit>
			TYPE1, rPlaybackVol, lPlaybackVol);
	if( STATUS_OK != MAX9867_HeadphoneAmpType(STEREO_DIFF_CLICKLESS))
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fdeb 	bl	80008ec <MAX9867_HeadphoneAmpType>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <MAX9867_CodecInit+0x9e>
		return STATUS_ERR;
 8000d1a:	23ff      	movs	r3, #255	; 0xff
 8000d1c:	e007      	b.n	8000d2e <MAX9867_CodecInit+0xae>
	if( STATUS_OK != MAX9867_Shoutdown(SHOUTDOWN_DISABLE))
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fdb4 	bl	800088c <MAX9867_Shoutdown>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MAX9867_CodecInit+0xac>
		return STATUS_ERR;
 8000d28:	23ff      	movs	r3, #255	; 0xff
 8000d2a:	e000      	b.n	8000d2e <MAX9867_CodecInit+0xae>
	 return STATUS_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b003      	add	sp, #12
 8000d34:	bd90      	pop	{r4, r7, pc}
	...

08000d38 <SendingDigitalAudio>:

Status_TypeDef SendingDigitalAudio(uint16_t *data,size_t size)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    for(int i=0; i<size; i++) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	e00f      	b.n	8000d68 <SendingDigitalAudio+0x30>
    	if( STATUS_OK != WriteI2S(MAX9867_I2S_HANDLE, &data[i], 1))
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	18d1      	adds	r1, r2, r3
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <SendingDigitalAudio+0x44>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 f88a 	bl	8000e6e <WriteI2S>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d001      	beq.n	8000d62 <SendingDigitalAudio+0x2a>
    		return STATUS_ERR;
 8000d5e:	23ff      	movs	r3, #255	; 0xff
 8000d60:	e007      	b.n	8000d72 <SendingDigitalAudio+0x3a>
    for(int i=0; i<size; i++) {
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8eb      	bhi.n	8000d48 <SendingDigitalAudio+0x10>
    }
    return STATUS_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	0018      	movs	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	200000a4 	.word	0x200000a4

08000d80 <SetGPIOsPin>:
 */

#include "Porting.h"

Status_TypeDef SetGPIOsPin(GPIO_HANDLE *GPIOx, uint16_t Pin)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	000a      	movs	r2, r1
 8000d8a:	1cbb      	adds	r3, r7, #2
 8000d8c:	801a      	strh	r2, [r3, #0]
	Status_TypeDef Status;

	if (NULL!=GPIOx)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00b      	beq.n	8000dac <SetGPIOsPin+0x2c>
	{
		HAL_GPIO_WritePin(GPIOx, Pin, GPIO_PIN_SET);
 8000d94:	1cbb      	adds	r3, r7, #2
 8000d96:	8819      	ldrh	r1, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fe11 	bl	80019c4 <HAL_GPIO_WritePin>
		Status=STATUS_OK;
 8000da2:	230f      	movs	r3, #15
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e003      	b.n	8000db4 <SetGPIOsPin+0x34>
	}
	else
		Status=STATUS_ERR;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	22ff      	movs	r2, #255	; 0xff
 8000db2:	701a      	strb	r2, [r3, #0]

	return Status;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	781b      	ldrb	r3, [r3, #0]
}
 8000dba:	0018      	movs	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b004      	add	sp, #16
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <ResetGPIOsPin>:

/*
 * set a GPIO pin form a port low
 */
Status_TypeDef ResetGPIOsPin(GPIO_HANDLE *GPIOx, uint16_t Pin)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	000a      	movs	r2, r1
 8000dcc:	1cbb      	adds	r3, r7, #2
 8000dce:	801a      	strh	r2, [r3, #0]
	Status_TypeDef Status;

	if (NULL!=GPIOx)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <ResetGPIOsPin+0x2c>
	{
		HAL_GPIO_WritePin(GPIOx, Pin, GPIO_PIN_RESET);
 8000dd6:	1cbb      	adds	r3, r7, #2
 8000dd8:	8819      	ldrh	r1, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 fdf0 	bl	80019c4 <HAL_GPIO_WritePin>
		Status=STATUS_OK;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e003      	b.n	8000df6 <ResetGPIOsPin+0x34>
	}
	else
		Status=STATUS_ERR;
 8000dee:	230f      	movs	r3, #15
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	22ff      	movs	r2, #255	; 0xff
 8000df4:	701a      	strb	r2, [r3, #0]

	return Status;
 8000df6:	230f      	movs	r3, #15
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b004      	add	sp, #16
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <WriteI2C>:
 * @param3: Data to be sent
 * @param4: Data size
 * @retval: Status
 */
Status_TypeDef WriteI2C(I2C_HANDLE *xPort, uint16_t sAddress, uint8_t *pData, uint16_t Size)
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	0008      	movs	r0, r1
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	0019      	movs	r1, r3
 8000e12:	250a      	movs	r5, #10
 8000e14:	197b      	adds	r3, r7, r5
 8000e16:	1c02      	adds	r2, r0, #0
 8000e18:	801a      	strh	r2, [r3, #0]
 8000e1a:	2008      	movs	r0, #8
 8000e1c:	183b      	adds	r3, r7, r0
 8000e1e:	1c0a      	adds	r2, r1, #0
 8000e20:	801a      	strh	r2, [r3, #0]
  Status_TypeDef Status=STATUS_ERR;
 8000e22:	2617      	movs	r6, #23
 8000e24:	19bb      	adds	r3, r7, r6
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	701a      	strb	r2, [r3, #0]

  if (NULL!=xPort && NULL!=pData)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <WriteI2C+0x54>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d010      	beq.n	8000e58 <WriteI2C+0x54>
    {
      if (HAL_OK == HAL_I2C_Master_Transmit(xPort, (uint16_t) sAddress, pData, Size, TIM_OUT_1MS))
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	881c      	ldrh	r4, [r3, #0]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	197b      	adds	r3, r7, r5
 8000e3e:	8819      	ldrh	r1, [r3, #0]
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	2332      	movs	r3, #50	; 0x32
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	0023      	movs	r3, r4
 8000e48:	f000 fe70 	bl	8001b2c <HAL_I2C_Master_Transmit>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d107      	bne.n	8000e60 <WriteI2C+0x5c>
      Status=STATUS_OK;
 8000e50:	19bb      	adds	r3, r7, r6
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
      if (HAL_OK == HAL_I2C_Master_Transmit(xPort, (uint16_t) sAddress, pData, Size, TIM_OUT_1MS))
 8000e56:	e003      	b.n	8000e60 <WriteI2C+0x5c>

    }
  else
    Status=STATUS_ERR;
 8000e58:	2317      	movs	r3, #23
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	22ff      	movs	r2, #255	; 0xff
 8000e5e:	701a      	strb	r2, [r3, #0]

  return Status;
 8000e60:	2317      	movs	r3, #23
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	781b      	ldrb	r3, [r3, #0]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b007      	add	sp, #28
 8000e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e6e <WriteI2S>:

	return Status;
}

Status_TypeDef WriteI2S(I2S_HANDLE *xPort, uint16_t *pData, uint16_t Size)
{
 8000e6e:	b590      	push	{r4, r7, lr}
 8000e70:	b087      	sub	sp, #28
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60f8      	str	r0, [r7, #12]
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	1dbb      	adds	r3, r7, #6
 8000e7a:	801a      	strh	r2, [r3, #0]
  Status_TypeDef Status=STATUS_ERR;
 8000e7c:	2417      	movs	r4, #23
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	22ff      	movs	r2, #255	; 0xff
 8000e82:	701a      	strb	r2, [r3, #0]

  if (NULL!=xPort && NULL!=pData)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00f      	beq.n	8000eaa <WriteI2S+0x3c>
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00c      	beq.n	8000eaa <WriteI2S+0x3c>
    {
      if (HAL_OK == HAL_I2S_Transmit(xPort, pData, Size, TIM_OUT_1MS))
 8000e90:	1dbb      	adds	r3, r7, #6
 8000e92:	881a      	ldrh	r2, [r3, #0]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	2332      	movs	r3, #50	; 0x32
 8000e9a:	f001 fb0d 	bl	80024b8 <HAL_I2S_Transmit>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d107      	bne.n	8000eb2 <WriteI2S+0x44>
    	  Status=STATUS_OK;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
      if (HAL_OK == HAL_I2S_Transmit(xPort, pData, Size, TIM_OUT_1MS))
 8000ea8:	e003      	b.n	8000eb2 <WriteI2S+0x44>

    }
  else
	  	  Status=STATUS_ERR;
 8000eaa:	2317      	movs	r3, #23
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	701a      	strb	r2, [r3, #0]

  return Status;
 8000eb2:	2317      	movs	r3, #23
 8000eb4:	18fb      	adds	r3, r7, r3
 8000eb6:	781b      	ldrb	r3, [r3, #0]
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b007      	add	sp, #28
 8000ebe:	bd90      	pop	{r4, r7, pc}

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fa9e 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f838 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f8e8 	bl	80010a0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ed0:	f000 f87c 	bl	8000fcc <MX_I2C2_Init>
  MX_I2S1_Init();
 8000ed4:	f000 f8ba 	bl	800104c <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */
  MAX9704_AmpInit(SWITCHING_MODE_670KHZ, GAIN_MODE_13dB);
 8000ed8:	2103      	movs	r1, #3
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fac8 	bl	8000470 <MAX9704_AmpInit>
  MAX9867_CodecInit(DAC_LVL_GAIN_MINUS_15dB,PLAYBACK_VOLUME_GAIN_MINUS_38dB,PLAYBACK_VOLUME_GAIN_MINUS_38dB);
 8000ee0:	221c      	movs	r2, #28
 8000ee2:	211c      	movs	r1, #28
 8000ee4:	200f      	movs	r0, #15
 8000ee6:	f7ff fecb 	bl	8000c80 <MAX9867_CodecInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    SendingDigitalAudio((uint16_t *)&kick_data,13000);
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <main+0x68>)
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <main+0x6c>)
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff ff21 	bl	8000d38 <SendingDigitalAudio>
	  _DELAY_MS(5000);
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <main+0x70>)
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 fb09 	bl	8001510 <HAL_Delay>
	    SendingDigitalAudio((uint16_t *)&inhale_data,13000);
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <main+0x68>)
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <main+0x74>)
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff17 	bl	8000d38 <SendingDigitalAudio>
	  _DELAY_MS(5000);
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <main+0x70>)
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 faff 	bl	8001510 <HAL_Delay>
	    SendingDigitalAudio((uint16_t *)&exhale_data,13000);
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <main+0x68>)
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <main+0x78>)
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff ff0d 	bl	8000d38 <SendingDigitalAudio>
	  _DELAY_MS(5000);
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <main+0x70>)
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 faf5 	bl	8001510 <HAL_Delay>
	    SendingDigitalAudio((uint16_t *)&kick_data,13000);
 8000f26:	e7e0      	b.n	8000eea <main+0x2a>
 8000f28:	000032c8 	.word	0x000032c8
 8000f2c:	080040f4 	.word	0x080040f4
 8000f30:	00001388 	.word	0x00001388
 8000f34:	08011088 	.word	0x08011088
 8000f38:	0800a8a0 	.word	0x0800a8a0

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b095      	sub	sp, #84	; 0x54
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	2414      	movs	r4, #20
 8000f44:	193b      	adds	r3, r7, r4
 8000f46:	0018      	movs	r0, r3
 8000f48:	233c      	movs	r3, #60	; 0x3c
 8000f4a:	001a      	movs	r2, r3
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f003 f8bd 	bl	80040cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	0018      	movs	r0, r3
 8000f56:	2310      	movs	r3, #16
 8000f58:	001a      	movs	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f003 f8b6 	bl	80040cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 fbd9 	bl	800271c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	0052      	lsls	r2, r2, #1
 8000f76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 fc11 	bl	80027b4 <HAL_RCC_OscConfig>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f96:	f000 f8fd 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 ff5c 	bl	8002e74 <HAL_RCC_ClockConfig>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000fc0:	f000 f8e8 	bl	8001194 <Error_Handler>
  }
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b015      	add	sp, #84	; 0x54
 8000fca:	bd90      	pop	{r4, r7, pc}

08000fcc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_I2C2_Init+0x74>)
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <MX_I2C2_Init+0x78>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_I2C2_Init+0x74>)
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <MX_I2C2_Init+0x7c>)
 8000fda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_I2C2_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_I2C2_Init+0x74>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_I2C2_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_I2C2_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_I2C2_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_I2C2_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_I2C2_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_I2C2_Init+0x74>)
 8001008:	0018      	movs	r0, r3
 800100a:	f000 fcf9 	bl	8001a00 <HAL_I2C_Init>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001012:	f000 f8bf 	bl	8001194 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_I2C2_Init+0x74>)
 8001018:	2100      	movs	r1, #0
 800101a:	0018      	movs	r0, r3
 800101c:	f001 f8b0 	bl	8002180 <HAL_I2CEx_ConfigAnalogFilter>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001024:	f000 f8b6 	bl	8001194 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <MX_I2C2_Init+0x74>)
 800102a:	2100      	movs	r1, #0
 800102c:	0018      	movs	r0, r3
 800102e:	f001 f8f3 	bl	8002218 <HAL_I2CEx_ConfigDigitalFilter>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001036:	f000 f8ad 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000058 	.word	0x20000058
 8001044:	40005800 	.word	0x40005800
 8001048:	00303d5b 	.word	0x00303d5b

0800104c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_I2S1_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_I2S1_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_I2S1_Init+0x4c>)
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_I2S1_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_I2S1_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_I2S1_Init+0x4c>)
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_I2S1_Init+0x4c>)
 8001074:	22fa      	movs	r2, #250	; 0xfa
 8001076:	0152      	lsls	r2, r2, #5
 8001078:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MX_I2S1_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <MX_I2S1_Init+0x4c>)
 8001082:	0018      	movs	r0, r3
 8001084:	f001 f914 	bl	80022b0 <HAL_I2S_Init>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800108c:	f000 f882 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	200000a4 	.word	0x200000a4
 800109c:	40013000 	.word	0x40013000

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	240c      	movs	r4, #12
 80010a8:	193b      	adds	r3, r7, r4
 80010aa:	0018      	movs	r0, r3
 80010ac:	2314      	movs	r3, #20
 80010ae:	001a      	movs	r2, r3
 80010b0:	2100      	movs	r1, #0
 80010b2:	f003 f80b 	bl	80040cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010bc:	2101      	movs	r1, #1
 80010be:	430a      	orrs	r2, r1
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c6:	2201      	movs	r2, #1
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010d4:	2102      	movs	r1, #2
 80010d6:	430a      	orrs	r2, r1
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	2202      	movs	r2, #2
 80010e0:	4013      	ands	r3, r2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010ec:	2108      	movs	r1, #8
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <MX_GPIO_Init+0xe8>)
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	2208      	movs	r2, #8
 80010f8:	4013      	ands	r3, r2
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_MUTE_GPIO_Port, AMP_MUTE_Pin, GPIO_PIN_RESET);
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_GPIO_Init+0xec>)
 8001100:	2200      	movs	r2, #0
 8001102:	2102      	movs	r1, #2
 8001104:	0018      	movs	r0, r3
 8001106:	f000 fc5d 	bl	80019c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AMP_FS2_Pin|AMP_FS1_Pin|AMP_GAIN2_Pin|AMP_GAIN1_Pin
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_GPIO_Init+0xf0>)
 800110c:	2200      	movs	r2, #0
 800110e:	21f8      	movs	r1, #248	; 0xf8
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fc57 	bl	80019c4 <HAL_GPIO_WritePin>
                          |AMP_SHUTDOWN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CODEC_IRQN_OUT_Pin */
  GPIO_InitStruct.Pin = CODEC_IRQN_OUT_Pin;
 8001116:	193b      	adds	r3, r7, r4
 8001118:	2202      	movs	r2, #2
 800111a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111c:	193b      	adds	r3, r7, r4
 800111e:	2288      	movs	r2, #136	; 0x88
 8001120:	0352      	lsls	r2, r2, #13
 8001122:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CODEC_IRQN_OUT_GPIO_Port, &GPIO_InitStruct);
 800112a:	193b      	adds	r3, r7, r4
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <MX_GPIO_Init+0xf0>)
 800112e:	0019      	movs	r1, r3
 8001130:	0010      	movs	r0, r2
 8001132:	f000 fadb 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_MUTE_Pin */
  GPIO_InitStruct.Pin = AMP_MUTE_Pin;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	2202      	movs	r2, #2
 800113a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	2201      	movs	r2, #1
 8001140:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AMP_MUTE_GPIO_Port, &GPIO_InitStruct);
 800114e:	193b      	adds	r3, r7, r4
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <MX_GPIO_Init+0xec>)
 8001152:	0019      	movs	r1, r3
 8001154:	0010      	movs	r0, r2
 8001156:	f000 fac9 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : AMP_FS2_Pin AMP_FS1_Pin AMP_GAIN2_Pin AMP_GAIN1_Pin
                           AMP_SHUTDOWN_Pin */
  GPIO_InitStruct.Pin = AMP_FS2_Pin|AMP_FS1_Pin|AMP_GAIN2_Pin|AMP_GAIN1_Pin
 800115a:	0021      	movs	r1, r4
 800115c:	187b      	adds	r3, r7, r1
 800115e:	22f8      	movs	r2, #248	; 0xf8
 8001160:	601a      	str	r2, [r3, #0]
                          |AMP_SHUTDOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2201      	movs	r2, #1
 8001166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	187b      	adds	r3, r7, r1
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	187b      	adds	r3, r7, r1
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <MX_GPIO_Init+0xf0>)
 8001178:	0019      	movs	r1, r3
 800117a:	0010      	movs	r0, r2
 800117c:	f000 fab6 	bl	80016ec <HAL_GPIO_Init>

}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b009      	add	sp, #36	; 0x24
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	50000c00 	.word	0x50000c00
 8001190:	50000400 	.word	0x50000400

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_MspInit+0x4c>)
 80011a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	2101      	movs	r1, #1
 80011ae:	430a      	orrs	r2, r1
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2201      	movs	r2, #1
 80011b8:	4013      	ands	r3, r2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_MspInit+0x4c>)
 80011c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_MspInit+0x4c>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0549      	lsls	r1, r1, #21
 80011c8:	430a      	orrs	r2, r1
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_MspInit+0x4c>)
 80011ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	4013      	ands	r3, r2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80011da:	23c0      	movs	r3, #192	; 0xc0
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f9ba 	bl	8001558 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b09d      	sub	sp, #116	; 0x74
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	235c      	movs	r3, #92	; 0x5c
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	0018      	movs	r0, r3
 80011fe:	2314      	movs	r3, #20
 8001200:	001a      	movs	r2, r3
 8001202:	2100      	movs	r1, #0
 8001204:	f002 ff62 	bl	80040cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	2410      	movs	r4, #16
 800120a:	193b      	adds	r3, r7, r4
 800120c:	0018      	movs	r0, r3
 800120e:	234c      	movs	r3, #76	; 0x4c
 8001210:	001a      	movs	r2, r3
 8001212:	2100      	movs	r1, #0
 8001214:	f002 ff5a 	bl	80040cc <memset>
  if(hi2c->Instance==I2C2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <HAL_I2C_MspInit+0xb8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d13e      	bne.n	80012a0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001222:	193b      	adds	r3, r7, r4
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001228:	193b      	adds	r3, r7, r4
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122e:	193b      	adds	r3, r7, r4
 8001230:	0018      	movs	r0, r3
 8001232:	f001 ffc9 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8001236:	1e03      	subs	r3, r0, #0
 8001238:	d001      	beq.n	800123e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800123a:	f7ff ffab 	bl	8001194 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_I2C_MspInit+0xbc>)
 8001240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_I2C_MspInit+0xbc>)
 8001244:	2102      	movs	r1, #2
 8001246:	430a      	orrs	r2, r1
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_I2C_MspInit+0xbc>)
 800124c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001256:	215c      	movs	r1, #92	; 0x5c
 8001258:	187b      	adds	r3, r7, r1
 800125a:	22c0      	movs	r2, #192	; 0xc0
 800125c:	01d2      	lsls	r2, r2, #7
 800125e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2212      	movs	r2, #18
 8001264:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2206      	movs	r2, #6
 8001276:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	187b      	adds	r3, r7, r1
 800127a:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_I2C_MspInit+0xc0>)
 800127c:	0019      	movs	r1, r3
 800127e:	0010      	movs	r0, r2
 8001280:	f000 fa34 	bl	80016ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_I2C_MspInit+0xbc>)
 8001286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_I2C_MspInit+0xbc>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	03c9      	lsls	r1, r1, #15
 800128e:	430a      	orrs	r2, r1
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_I2C_MspInit+0xbc>)
 8001294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	03db      	lsls	r3, r3, #15
 800129a:	4013      	ands	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b01d      	add	sp, #116	; 0x74
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	40005800 	.word	0x40005800
 80012ac:	40021000 	.word	0x40021000
 80012b0:	50000400 	.word	0x50000400

080012b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b09d      	sub	sp, #116	; 0x74
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	235c      	movs	r3, #92	; 0x5c
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	0018      	movs	r0, r3
 80012c2:	2314      	movs	r3, #20
 80012c4:	001a      	movs	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	f002 ff00 	bl	80040cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012cc:	2410      	movs	r4, #16
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	0018      	movs	r0, r3
 80012d2:	234c      	movs	r3, #76	; 0x4c
 80012d4:	001a      	movs	r2, r3
 80012d6:	2100      	movs	r1, #0
 80012d8:	f002 fef8 	bl	80040cc <memset>
  if(hi2s->Instance==SPI1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a23      	ldr	r2, [pc, #140]	; (8001370 <HAL_I2S_MspInit+0xbc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d13f      	bne.n	8001366 <HAL_I2S_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	193b      	adds	r3, r7, r4
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 ff66 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001300:	f7ff ff48 	bl	8001194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_I2S_MspInit+0xc0>)
 8001306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_I2S_MspInit+0xc0>)
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	0149      	lsls	r1, r1, #5
 800130e:	430a      	orrs	r2, r1
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_I2S_MspInit+0xc0>)
 8001314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_I2S_MspInit+0xc0>)
 8001322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_I2S_MspInit+0xc0>)
 8001326:	2101      	movs	r1, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	; 0x34
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_I2S_MspInit+0xc0>)
 800132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_MCK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001338:	215c      	movs	r1, #92	; 0x5c
 800133a:	187b      	adds	r3, r7, r1
 800133c:	22f0      	movs	r2, #240	; 0xf0
 800133e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2202      	movs	r2, #2
 8001344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	187a      	adds	r2, r7, r1
 800135a:	23a0      	movs	r3, #160	; 0xa0
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f000 f9c3 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b01d      	add	sp, #116	; 0x74
 800136c:	bd90      	pop	{r4, r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40013000 	.word	0x40013000
 8001374:	40021000 	.word	0x40021000

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f89c 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013b4:	f7ff fff7 	bl	80013a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <LoopForever+0x6>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <LoopForever+0xe>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <LoopForever+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013de:	f002 fe51 	bl	8004084 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013e2:	f7ff fd6d 	bl	8000ec0 <main>

080013e6 <LoopForever>:

LoopForever:
  b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   r0, =_estack
 80013e8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013f4:	080178cc 	.word	0x080178cc
  ldr r2, =_sbss
 80013f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013fc:	200000e4 	.word	0x200000e4

08001400 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_COMP_IRQHandler>
	...

08001404 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x3c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_Init+0x3c>)
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0049      	lsls	r1, r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2003      	movs	r0, #3
 8001420:	f000 f810 	bl	8001444 <HAL_InitTick>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d003      	beq.n	8001430 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e001      	b.n	8001434 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff feb6 	bl	80011a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b002      	add	sp, #8
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40022000 	.word	0x40022000

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800144c:	230f      	movs	r3, #15
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_InitTick+0x88>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d02b      	beq.n	80014b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_InitTick+0x8c>)
 800145e:	681c      	ldr	r4, [r3, #0]
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_InitTick+0x88>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	0019      	movs	r1, r3
 8001466:	23fa      	movs	r3, #250	; 0xfa
 8001468:	0098      	lsls	r0, r3, #2
 800146a:	f7fe fe4b 	bl	8000104 <__udivsi3>
 800146e:	0003      	movs	r3, r0
 8001470:	0019      	movs	r1, r3
 8001472:	0020      	movs	r0, r4
 8001474:	f7fe fe46 	bl	8000104 <__udivsi3>
 8001478:	0003      	movs	r3, r0
 800147a:	0018      	movs	r0, r3
 800147c:	f000 f929 	bl	80016d2 <HAL_SYSTICK_Config>
 8001480:	1e03      	subs	r3, r0, #0
 8001482:	d112      	bne.n	80014aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d80a      	bhi.n	80014a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	2301      	movs	r3, #1
 800148e:	425b      	negs	r3, r3
 8001490:	2200      	movs	r2, #0
 8001492:	0018      	movs	r0, r3
 8001494:	f000 f908 	bl	80016a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_InitTick+0x90>)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e00d      	b.n	80014bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e008      	b.n	80014bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014aa:	230f      	movs	r3, #15
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	e003      	b.n	80014bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	781b      	ldrb	r3, [r3, #0]
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b005      	add	sp, #20
 80014c8:	bd90      	pop	{r4, r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_IncTick+0x1c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	001a      	movs	r2, r3
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_IncTick+0x20>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	18d2      	adds	r2, r2, r3
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_IncTick+0x20>)
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	20000008 	.word	0x20000008
 80014f8:	200000e0 	.word	0x200000e0

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b02      	ldr	r3, [pc, #8]	; (800150c <HAL_GetTick+0x10>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	200000e0 	.word	0x200000e0

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff fff0 	bl	80014fc <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	001a      	movs	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	189b      	adds	r3, r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	f7ff ffe0 	bl	80014fc <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b004      	add	sp, #16
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001566:	4013      	ands	r3, r2
 8001568:	0019      	movs	r1, r3
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	430a      	orrs	r2, r1
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	46bd      	mov	sp, r7
 8001576:	b002      	add	sp, #8
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	40010000 	.word	0x40010000
 8001580:	fffff9ff 	.word	0xfffff9ff

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	0002      	movs	r2, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b7f      	cmp	r3, #127	; 0x7f
 8001598:	d828      	bhi.n	80015ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <__NVIC_SetPriority+0xd4>)
 800159c:	1dfb      	adds	r3, r7, #7
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	33c0      	adds	r3, #192	; 0xc0
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	589b      	ldr	r3, [r3, r2]
 80015aa:	1dfa      	adds	r2, r7, #7
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	0011      	movs	r1, r2
 80015b0:	2203      	movs	r2, #3
 80015b2:	400a      	ands	r2, r1
 80015b4:	00d2      	lsls	r2, r2, #3
 80015b6:	21ff      	movs	r1, #255	; 0xff
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	43d2      	mvns	r2, r2
 80015be:	401a      	ands	r2, r3
 80015c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	22ff      	movs	r2, #255	; 0xff
 80015c8:	401a      	ands	r2, r3
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	0018      	movs	r0, r3
 80015d0:	2303      	movs	r3, #3
 80015d2:	4003      	ands	r3, r0
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <__NVIC_SetPriority+0xd4>)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	430a      	orrs	r2, r1
 80015e4:	33c0      	adds	r3, #192	; 0xc0
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015ea:	e031      	b.n	8001650 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <__NVIC_SetPriority+0xd8>)
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	0019      	movs	r1, r3
 80015f4:	230f      	movs	r3, #15
 80015f6:	400b      	ands	r3, r1
 80015f8:	3b08      	subs	r3, #8
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3306      	adds	r3, #6
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	3304      	adds	r3, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	1dfa      	adds	r2, r7, #7
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	0011      	movs	r1, r2
 800160c:	2203      	movs	r2, #3
 800160e:	400a      	ands	r2, r1
 8001610:	00d2      	lsls	r2, r2, #3
 8001612:	21ff      	movs	r1, #255	; 0xff
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	43d2      	mvns	r2, r2
 800161a:	401a      	ands	r2, r3
 800161c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	401a      	ands	r2, r3
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0018      	movs	r0, r3
 800162c:	2303      	movs	r3, #3
 800162e:	4003      	ands	r3, r0
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <__NVIC_SetPriority+0xd8>)
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	001c      	movs	r4, r3
 800163c:	230f      	movs	r3, #15
 800163e:	4023      	ands	r3, r4
 8001640:	3b08      	subs	r3, #8
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	430a      	orrs	r2, r1
 8001646:	3306      	adds	r3, #6
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	18c3      	adds	r3, r0, r3
 800164c:	3304      	adds	r3, #4
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b003      	add	sp, #12
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	1e5a      	subs	r2, r3, #1
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	045b      	lsls	r3, r3, #17
 8001670:	429a      	cmp	r2, r3
 8001672:	d301      	bcc.n	8001678 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001674:	2301      	movs	r3, #1
 8001676:	e010      	b.n	800169a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <SysTick_Config+0x44>)
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	3a01      	subs	r2, #1
 800167e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001680:	2301      	movs	r3, #1
 8001682:	425b      	negs	r3, r3
 8001684:	2103      	movs	r1, #3
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff ff7c 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x44>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x44>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	210f      	movs	r1, #15
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	1c02      	adds	r2, r0, #0
 80016b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	0011      	movs	r1, r2
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b004      	add	sp, #16
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ffbf 	bl	8001660 <SysTick_Config>
 80016e2:	0003      	movs	r3, r0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fa:	e14d      	b.n	8001998 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4091      	lsls	r1, r2
 8001706:	000a      	movs	r2, r1
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d100      	bne.n	8001714 <HAL_GPIO_Init+0x28>
 8001712:	e13e      	b.n	8001992 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2203      	movs	r2, #3
 800171a:	4013      	ands	r3, r2
 800171c:	2b01      	cmp	r3, #1
 800171e:	d005      	beq.n	800172c <HAL_GPIO_Init+0x40>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	4013      	ands	r3, r2
 8001728:	2b02      	cmp	r3, #2
 800172a:	d130      	bne.n	800178e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	409a      	lsls	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	409a      	lsls	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001762:	2201      	movs	r2, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	2201      	movs	r2, #1
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2203      	movs	r2, #3
 8001794:	4013      	ands	r3, r2
 8001796:	2b03      	cmp	r3, #3
 8001798:	d017      	beq.n	80017ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	43da      	mvns	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2203      	movs	r2, #3
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d123      	bne.n	800181e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	58d3      	ldr	r3, [r2, r3]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2207      	movs	r2, #7
 80017e8:	4013      	ands	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	220f      	movs	r2, #15
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	43da      	mvns	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2107      	movs	r1, #7
 8001802:	400b      	ands	r3, r1
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	6939      	ldr	r1, [r7, #16]
 800181c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	43da      	mvns	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	401a      	ands	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	23c0      	movs	r3, #192	; 0xc0
 8001858:	029b      	lsls	r3, r3, #10
 800185a:	4013      	ands	r3, r2
 800185c:	d100      	bne.n	8001860 <HAL_GPIO_Init+0x174>
 800185e:	e098      	b.n	8001992 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001860:	4a53      	ldr	r2, [pc, #332]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3318      	adds	r3, #24
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	589b      	ldr	r3, [r3, r2]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2203      	movs	r2, #3
 8001872:	4013      	ands	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	220f      	movs	r2, #15
 8001878:	409a      	lsls	r2, r3
 800187a:	0013      	movs	r3, r2
 800187c:	43da      	mvns	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	23a0      	movs	r3, #160	; 0xa0
 8001888:	05db      	lsls	r3, r3, #23
 800188a:	429a      	cmp	r2, r3
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x1d6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_GPIO_Init+0x2c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1d2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <HAL_GPIO_Init+0x2cc>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1ce>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a46      	ldr	r2, [pc, #280]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1ca>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <HAL_GPIO_Init+0x2d4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1c6>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x1d8>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x1d8>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x1d8>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x1d8>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x1d8>
 80018c2:	2300      	movs	r3, #0
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	2103      	movs	r1, #3
 80018c8:	400a      	ands	r2, r1
 80018ca:	00d2      	lsls	r2, r2, #3
 80018cc:	4093      	lsls	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018d4:	4936      	ldr	r1, [pc, #216]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3318      	adds	r3, #24
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	035b      	lsls	r3, r3, #13
 80018fa:	4013      	ands	r3, r2
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	039b      	lsls	r3, r3, #14
 8001924:	4013      	ands	r3, r2
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 8001938:	2384      	movs	r3, #132	; 0x84
 800193a:	58d3      	ldr	r3, [r2, r3]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43da      	mvns	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	029b      	lsls	r3, r3, #10
 8001950:	4013      	ands	r3, r2
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800195c:	4914      	ldr	r1, [pc, #80]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 800195e:	2284      	movs	r2, #132	; 0x84
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	58d3      	ldr	r3, [r2, r3]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	4013      	ands	r3, r2
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800198a:	4909      	ldr	r1, [pc, #36]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	40da      	lsrs	r2, r3
 80019a0:	1e13      	subs	r3, r2, #0
 80019a2:	d000      	beq.n	80019a6 <HAL_GPIO_Init+0x2ba>
 80019a4:	e6aa      	b.n	80016fc <HAL_GPIO_Init+0x10>
  }
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b006      	add	sp, #24
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021800 	.word	0x40021800
 80019b4:	50000400 	.word	0x50000400
 80019b8:	50000800 	.word	0x50000800
 80019bc:	50000c00 	.word	0x50000c00
 80019c0:	50001000 	.word	0x50001000

080019c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	0008      	movs	r0, r1
 80019ce:	0011      	movs	r1, r2
 80019d0:	1cbb      	adds	r3, r7, #2
 80019d2:	1c02      	adds	r2, r0, #0
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	1c7b      	adds	r3, r7, #1
 80019d8:	1c0a      	adds	r2, r1, #0
 80019da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	1c7b      	adds	r3, r7, #1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e4:	1cbb      	adds	r3, r7, #2
 80019e6:	881a      	ldrh	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ee:	1cbb      	adds	r3, r7, #2
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e082      	b.n	8001b18 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2241      	movs	r2, #65	; 0x41
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff fbe1 	bl	80011f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2241      	movs	r2, #65	; 0x41
 8001a32:	2124      	movs	r1, #36	; 0x24
 8001a34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	438a      	bics	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4934      	ldr	r1, [pc, #208]	; (8001b20 <HAL_I2C_Init+0x120>)
 8001a50:	400a      	ands	r2, r1
 8001a52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4931      	ldr	r1, [pc, #196]	; (8001b24 <HAL_I2C_Init+0x124>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	0209      	lsls	r1, r1, #8
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e007      	b.n	8001a8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2184      	movs	r1, #132	; 0x84
 8001a88:	0209      	lsls	r1, r1, #8
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d104      	bne.n	8001aa0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	491f      	ldr	r1, [pc, #124]	; (8001b28 <HAL_I2C_Init+0x128>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	491a      	ldr	r1, [pc, #104]	; (8001b24 <HAL_I2C_Init+0x124>)
 8001abc:	400a      	ands	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69d9      	ldr	r1, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2241      	movs	r2, #65	; 0x41
 8001b04:	2120      	movs	r1, #32
 8001b06:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2242      	movs	r2, #66	; 0x42
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	f0ffffff 	.word	0xf0ffffff
 8001b24:	ffff7fff 	.word	0xffff7fff
 8001b28:	02008000 	.word	0x02008000

08001b2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	0008      	movs	r0, r1
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	0019      	movs	r1, r3
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	1c02      	adds	r2, r0, #0
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	2308      	movs	r3, #8
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	1c0a      	adds	r2, r1, #0
 8001b48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2241      	movs	r2, #65	; 0x41
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d000      	beq.n	8001b58 <HAL_I2C_Master_Transmit+0x2c>
 8001b56:	e0e7      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	5c9b      	ldrb	r3, [r3, r2]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Master_Transmit+0x3a>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e0e1      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1fe>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2240      	movs	r2, #64	; 0x40
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b6e:	f7ff fcc5 	bl	80014fc <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	0219      	lsls	r1, r3, #8
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2319      	movs	r3, #25
 8001b82:	2201      	movs	r2, #1
 8001b84:	f000 f8fc 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001b88:	1e03      	subs	r3, r0, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0cc      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2241      	movs	r2, #65	; 0x41
 8001b94:	2121      	movs	r1, #33	; 0x21
 8001b96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2242      	movs	r2, #66	; 0x42
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2208      	movs	r2, #8
 8001bb0:	18ba      	adds	r2, r7, r2
 8001bb2:	8812      	ldrh	r2, [r2, #0]
 8001bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d911      	bls.n	8001bea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	22ff      	movs	r2, #255	; 0xff
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	045c      	lsls	r4, r3, #17
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	8819      	ldrh	r1, [r3, #0]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	4b55      	ldr	r3, [pc, #340]	; (8001d34 <HAL_I2C_Master_Transmit+0x208>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	0023      	movs	r3, r4
 8001be4:	f000 fa92 	bl	800210c <I2C_TransferConfig>
 8001be8:	e075      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	049c      	lsls	r4, r3, #18
 8001bfe:	230a      	movs	r3, #10
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	8819      	ldrh	r1, [r3, #0]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_I2C_Master_Transmit+0x208>)
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	0023      	movs	r3, r4
 8001c0c:	f000 fa7e 	bl	800210c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c10:	e061      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 f8f0 	bl	8001dfe <I2C_WaitOnTXISFlagUntilTimeout>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e081      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d03a      	beq.n	8001cd6 <HAL_I2C_Master_Transmit+0x1aa>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d136      	bne.n	8001cd6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	0013      	movs	r3, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	f000 f883 	bl	8001d80 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e053      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2bff      	cmp	r3, #255	; 0xff
 8001c8a:	d911      	bls.n	8001cb0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	045c      	lsls	r4, r3, #17
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	8819      	ldrh	r1, [r3, #0]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	0023      	movs	r3, r4
 8001caa:	f000 fa2f 	bl	800210c <I2C_TransferConfig>
 8001cae:	e012      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	049c      	lsls	r4, r3, #18
 8001cc4:	230a      	movs	r3, #10
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	8819      	ldrh	r1, [r3, #0]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	0023      	movs	r3, r4
 8001cd2:	f000 fa1b 	bl	800210c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d198      	bne.n	8001c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f8c8 	bl	8001e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e01a      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	490c      	ldr	r1, [pc, #48]	; (8001d38 <HAL_I2C_Master_Transmit+0x20c>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2241      	movs	r2, #65	; 0x41
 8001d10:	2120      	movs	r1, #32
 8001d12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2242      	movs	r2, #66	; 0x42
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	2100      	movs	r1, #0
 8001d22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
  }
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b007      	add	sp, #28
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	80002000 	.word	0x80002000
 8001d38:	fe00e800 	.word	0xfe00e800

08001d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d103      	bne.n	8001d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d007      	beq.n	8001d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2101      	movs	r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	619a      	str	r2, [r3, #24]
  }
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d90:	e021      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	d01e      	beq.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d98:	f7ff fbb0 	bl	80014fc <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d302      	bcc.n	8001dae <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d113      	bne.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	2220      	movs	r2, #32
 8001db4:	431a      	orrs	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2241      	movs	r2, #65	; 0x41
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2242      	movs	r2, #66	; 0x42
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2240      	movs	r2, #64	; 0x40
 8001dce:	2100      	movs	r1, #0
 8001dd0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	4013      	ands	r3, r2
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	425a      	negs	r2, r3
 8001de6:	4153      	adcs	r3, r2
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	001a      	movs	r2, r3
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d0ce      	beq.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	0018      	movs	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b004      	add	sp, #16
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e0a:	e02b      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f86e 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e029      	b.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3301      	adds	r3, #1
 8001e24:	d01e      	beq.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e26:	f7ff fb69 	bl	80014fc <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d302      	bcc.n	8001e3c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d113      	bne.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	2220      	movs	r2, #32
 8001e42:	431a      	orrs	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2241      	movs	r2, #65	; 0x41
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2242      	movs	r2, #66	; 0x42
 8001e54:	2100      	movs	r1, #0
 8001e56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	; 0x40
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e007      	b.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d1cc      	bne.n	8001e0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e88:	e028      	b.n	8001edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 f82f 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e026      	b.n	8001eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7ff fb2d 	bl	80014fc <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d113      	bne.n	8001edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	2220      	movs	r2, #32
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2241      	movs	r2, #65	; 0x41
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2242      	movs	r2, #66	; 0x42
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2240      	movs	r2, #64	; 0x40
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e007      	b.n	8001eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d1cf      	bne.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b08b      	sub	sp, #44	; 0x2c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2327      	movs	r3, #39	; 0x27
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d100      	bne.n	8001f22 <I2C_IsErrorOccurred+0x2e>
 8001f20:	e08e      	b.n	8002040 <I2C_IsErrorOccurred+0x14c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2210      	movs	r2, #16
 8001f28:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f2a:	e06c      	b.n	8002006 <I2C_IsErrorOccurred+0x112>
 8001f2c:	2427      	movs	r4, #39	; 0x27
 8001f2e:	193b      	adds	r3, r7, r4
 8001f30:	193a      	adds	r2, r7, r4
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	d064      	beq.n	8002006 <I2C_IsErrorOccurred+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f3c:	f7ff fade 	bl	80014fc <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d306      	bcc.n	8001f5a <I2C_IsErrorOccurred+0x66>
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	193a      	adds	r2, r7, r4
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d155      	bne.n	8002006 <I2C_IsErrorOccurred+0x112>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	01db      	lsls	r3, r3, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f68:	2013      	movs	r0, #19
 8001f6a:	183b      	adds	r3, r7, r0
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	2142      	movs	r1, #66	; 0x42
 8001f70:	5c52      	ldrb	r2, [r2, r1]
 8001f72:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	401a      	ands	r2, r3
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d137      	bne.n	8001ff8 <I2C_IsErrorOccurred+0x104>
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	01db      	lsls	r3, r3, #7
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d032      	beq.n	8001ff8 <I2C_IsErrorOccurred+0x104>
              (tmp1 != I2C_CR2_STOP) && \
 8001f92:	183b      	adds	r3, r7, r0
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d02e      	beq.n	8001ff8 <I2C_IsErrorOccurred+0x104>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	01c9      	lsls	r1, r1, #7
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001fac:	f7ff faa6 	bl	80014fc <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb4:	e020      	b.n	8001ff8 <I2C_IsErrorOccurred+0x104>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fb6:	f7ff faa1 	bl	80014fc <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2027      	movs	r0, #39	; 0x27
 8001fc2:	183a      	adds	r2, r7, r0
 8001fc4:	1839      	adds	r1, r7, r0
 8001fc6:	7809      	ldrb	r1, [r1, #0]
 8001fc8:	7011      	strb	r1, [r2, #0]
 8001fca:	2b19      	cmp	r3, #25
 8001fcc:	d914      	bls.n	8001ff8 <I2C_IsErrorOccurred+0x104>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2241      	movs	r2, #65	; 0x41
 8001fde:	2120      	movs	r1, #32
 8001fe0:	5499      	strb	r1, [r3, r2]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2242      	movs	r2, #66	; 0x42
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	5499      	strb	r1, [r3, r2]

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]

              status = HAL_ERROR;
 8001ff2:	183b      	adds	r3, r7, r0
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2220      	movs	r2, #32
 8002000:	4013      	ands	r3, r2
 8002002:	2b20      	cmp	r3, #32
 8002004:	d1d7      	bne.n	8001fb6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2220      	movs	r2, #32
 800200e:	4013      	ands	r3, r2
 8002010:	2b20      	cmp	r3, #32
 8002012:	d004      	beq.n	800201e <I2C_IsErrorOccurred+0x12a>
 8002014:	2327      	movs	r3, #39	; 0x27
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d086      	beq.n	8001f2c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800201e:	2327      	movs	r3, #39	; 0x27
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <I2C_IsErrorOccurred+0x13c>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2220      	movs	r2, #32
 800202e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	2204      	movs	r2, #4
 8002034:	4313      	orrs	r3, r2
 8002036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002038:	2327      	movs	r3, #39	; 0x27
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d00c      	beq.n	800206c <I2C_IsErrorOccurred+0x178>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	2201      	movs	r2, #1
 8002056:	4313      	orrs	r3, r2
 8002058:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	0052      	lsls	r2, r2, #1
 8002062:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002064:	2327      	movs	r3, #39	; 0x27
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4013      	ands	r3, r2
 8002074:	d00c      	beq.n	8002090 <I2C_IsErrorOccurred+0x19c>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	2208      	movs	r2, #8
 800207a:	4313      	orrs	r3, r2
 800207c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	00d2      	lsls	r2, r2, #3
 8002086:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002088:	2327      	movs	r3, #39	; 0x27
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d00c      	beq.n	80020b4 <I2C_IsErrorOccurred+0x1c0>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	2202      	movs	r2, #2
 800209e:	4313      	orrs	r3, r2
 80020a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	0092      	lsls	r2, r2, #2
 80020aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020ac:	2327      	movs	r3, #39	; 0x27
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80020b4:	2327      	movs	r3, #39	; 0x27
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d01d      	beq.n	80020fa <I2C_IsErrorOccurred+0x206>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff fe3b 	bl	8001d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	490d      	ldr	r1, [pc, #52]	; (8002108 <I2C_IsErrorOccurred+0x214>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2241      	movs	r2, #65	; 0x41
 80020e6:	2120      	movs	r1, #32
 80020e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2242      	movs	r2, #66	; 0x42
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2240      	movs	r2, #64	; 0x40
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80020fa:	2327      	movs	r3, #39	; 0x27
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b00b      	add	sp, #44	; 0x2c
 8002106:	bd90      	pop	{r4, r7, pc}
 8002108:	fe00e800 	.word	0xfe00e800

0800210c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	0008      	movs	r0, r1
 8002116:	0011      	movs	r1, r2
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	240a      	movs	r4, #10
 800211c:	193b      	adds	r3, r7, r4
 800211e:	1c02      	adds	r2, r0, #0
 8002120:	801a      	strh	r2, [r3, #0]
 8002122:	2009      	movs	r0, #9
 8002124:	183b      	adds	r3, r7, r0
 8002126:	1c0a      	adds	r2, r1, #0
 8002128:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800212a:	193b      	adds	r3, r7, r4
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	059b      	lsls	r3, r3, #22
 8002130:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002132:	183b      	adds	r3, r7, r0
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	0419      	lsls	r1, r3, #16
 8002138:	23ff      	movs	r3, #255	; 0xff
 800213a:	041b      	lsls	r3, r3, #16
 800213c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800213e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	4313      	orrs	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002156:	0d51      	lsrs	r1, r2, #21
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	00d2      	lsls	r2, r2, #3
 800215c:	400a      	ands	r2, r1
 800215e:	4907      	ldr	r1, [pc, #28]	; (800217c <I2C_TransferConfig+0x70>)
 8002160:	430a      	orrs	r2, r1
 8002162:	43d2      	mvns	r2, r2
 8002164:	401a      	ands	r2, r3
 8002166:	0011      	movs	r1, r2
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b007      	add	sp, #28
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	03ff63ff 	.word	0x03ff63ff

08002180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2241      	movs	r2, #65	; 0x41
 800218e:	5c9b      	ldrb	r3, [r3, r2]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b20      	cmp	r3, #32
 8002194:	d138      	bne.n	8002208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e032      	b.n	800220a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2241      	movs	r2, #65	; 0x41
 80021b0:	2124      	movs	r1, #36	; 0x24
 80021b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2101      	movs	r1, #1
 80021c0:	438a      	bics	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4911      	ldr	r1, [pc, #68]	; (8002214 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2241      	movs	r2, #65	; 0x41
 80021f8:	2120      	movs	r1, #32
 80021fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	ffffefff 	.word	0xffffefff

08002218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2241      	movs	r2, #65	; 0x41
 8002226:	5c9b      	ldrb	r3, [r3, r2]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b20      	cmp	r3, #32
 800222c:	d139      	bne.n	80022a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002238:	2302      	movs	r3, #2
 800223a:	e033      	b.n	80022a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	2101      	movs	r1, #1
 8002242:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2241      	movs	r2, #65	; 0x41
 8002248:	2124      	movs	r1, #36	; 0x24
 800224a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2101      	movs	r1, #1
 8002258:	438a      	bics	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2241      	movs	r2, #65	; 0x41
 8002292:	2120      	movs	r1, #32
 8002294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2240      	movs	r2, #64	; 0x40
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
  }
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b004      	add	sp, #16
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	fffff0ff 	.word	0xfffff0ff

080022b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0f2      	b.n	80024a8 <HAL_I2S_Init+0x1f8>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2235      	movs	r2, #53	; 0x35
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2234      	movs	r2, #52	; 0x34
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7fe ffeb 	bl	80012b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2235      	movs	r2, #53	; 0x35
 80022e2:	2102      	movs	r1, #2
 80022e4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	496f      	ldr	r1, [pc, #444]	; (80024b0 <HAL_I2S_Init+0x200>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d100      	bne.n	8002308 <HAL_I2S_Init+0x58>
 8002306:	e083      	b.n	8002410 <HAL_I2S_Init+0x160>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002310:	2310      	movs	r3, #16
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e001      	b.n	800231a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002316:	2320      	movs	r3, #32
 8002318:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b20      	cmp	r3, #32
 8002320:	d802      	bhi.n	8002328 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	617b      	str	r3, [r7, #20]
    }

#if defined (RCC_PERIPHCLK_I2S2)
    if (hi2s->Instance == SPI1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a61      	ldr	r2, [pc, #388]	; (80024b4 <HAL_I2S_Init+0x204>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d107      	bne.n	8002342 <HAL_I2S_Init+0x92>
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	0018      	movs	r0, r3
 8002338:	f001 f982 	bl	8003640 <HAL_RCCEx_GetPeriphCLKFreq>
 800233c:	0003      	movs	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e006      	b.n	8002350 <HAL_I2S_Init+0xa0>
    }
    else /* SPI2 case */
    {
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	019b      	lsls	r3, r3, #6
 8002346:	0018      	movs	r0, r3
 8002348:	f001 f97a 	bl	8003640 <HAL_RCCEx_GetPeriphCLKFreq>
 800234c:	0003      	movs	r3, r0
 800234e:	60fb      	str	r3, [r7, #12]
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d131      	bne.n	80023c0 <HAL_I2S_Init+0x110>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d016      	beq.n	8002392 <HAL_I2S_Init+0xe2>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	0019      	movs	r1, r3
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7fd feca 	bl	8000104 <__udivsi3>
 8002370:	0003      	movs	r3, r0
 8002372:	001a      	movs	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	189b      	adds	r3, r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	001a      	movs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	0019      	movs	r1, r3
 8002384:	0010      	movs	r0, r2
 8002386:	f7fd febd 	bl	8000104 <__udivsi3>
 800238a:	0003      	movs	r3, r0
 800238c:	3305      	adds	r3, #5
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	e02a      	b.n	80023e8 <HAL_I2S_Init+0x138>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	0019      	movs	r1, r3
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7fd feb3 	bl	8000104 <__udivsi3>
 800239e:	0003      	movs	r3, r0
 80023a0:	001a      	movs	r2, r3
 80023a2:	0013      	movs	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	001a      	movs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	0019      	movs	r1, r3
 80023b2:	0010      	movs	r0, r2
 80023b4:	f7fd fea6 	bl	8000104 <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	3305      	adds	r3, #5
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e013      	b.n	80023e8 <HAL_I2S_Init+0x138>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023c0:	6979      	ldr	r1, [r7, #20]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7fd fe9e 	bl	8000104 <__udivsi3>
 80023c8:	0003      	movs	r3, r0
 80023ca:	001a      	movs	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	189b      	adds	r3, r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	001a      	movs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f7fd fe91 	bl	8000104 <__udivsi3>
 80023e2:	0003      	movs	r3, r0
 80023e4:	3305      	adds	r3, #5
 80023e6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	210a      	movs	r1, #10
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7fd fe89 	bl	8000104 <__udivsi3>
 80023f2:	0003      	movs	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	e003      	b.n	8002418 <HAL_I2S_Init+0x168>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002410:	2302      	movs	r3, #2
 8002412:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d902      	bls.n	8002424 <HAL_I2S_Init+0x174>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2bff      	cmp	r3, #255	; 0xff
 8002422:	d907      	bls.n	8002434 <HAL_I2S_Init+0x184>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	2210      	movs	r2, #16
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e039      	b.n	80024a8 <HAL_I2S_Init+0x1f8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	431a      	orrs	r2, r3
 800243c:	0011      	movs	r1, r2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	430a      	orrs	r2, r1
 8002446:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	4a18      	ldr	r2, [pc, #96]	; (80024b0 <HAL_I2S_Init+0x200>)
 8002450:	401a      	ands	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4319      	orrs	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4319      	orrs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	430b      	orrs	r3, r1
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	0109      	lsls	r1, r1, #4
 8002472:	430a      	orrs	r2, r1
 8002474:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b30      	cmp	r3, #48	; 0x30
 800247c:	d003      	beq.n	8002486 <HAL_I2S_Init+0x1d6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2bb0      	cmp	r3, #176	; 0xb0
 8002484:	d108      	bne.n	8002498 <HAL_I2S_Init+0x1e8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0149      	lsls	r1, r1, #5
 8002494:	430a      	orrs	r2, r1
 8002496:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2235      	movs	r2, #53	; 0x35
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b008      	add	sp, #32
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	fffff040 	.word	0xfffff040
 80024b4:	40013000 	.word	0x40013000

080024b8 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	1dbb      	adds	r3, r7, #6
 80024c6:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_I2S_Transmit+0x1e>
 80024ce:	1dbb      	adds	r3, r7, #6
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0e2      	b.n	80026a0 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2234      	movs	r2, #52	; 0x34
 80024de:	5c9b      	ldrb	r3, [r3, r2]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2S_Transmit+0x32>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e0da      	b.n	80026a0 <HAL_I2S_Transmit+0x1e8>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2234      	movs	r2, #52	; 0x34
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2235      	movs	r2, #53	; 0x35
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2234      	movs	r2, #52	; 0x34
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	e0ca      	b.n	80026a0 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2235      	movs	r2, #53	; 0x35
 800250e:	2103      	movs	r1, #3
 8002510:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2207      	movs	r2, #7
 8002526:	4013      	ands	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d002      	beq.n	8002536 <HAL_I2S_Transmit+0x7e>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d10c      	bne.n	8002550 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002536:	1dbb      	adds	r3, r7, #6
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	18db      	adds	r3, r3, r3
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8002542:	1dbb      	adds	r3, r7, #6
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	18db      	adds	r3, r3, r3
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	845a      	strh	r2, [r3, #34]	; 0x22
 800254e:	e007      	b.n	8002560 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1dba      	adds	r2, r7, #6
 8002554:	8812      	ldrh	r2, [r2, #0]
 8002556:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1dba      	adds	r2, r7, #6
 800255c:	8812      	ldrh	r2, [r2, #0]
 800255e:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	401a      	ands	r2, r3
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	429a      	cmp	r2, r3
 800257a:	d008      	beq.n	800258e <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2180      	movs	r1, #128	; 0x80
 8002588:	00c9      	lsls	r1, r1, #3
 800258a:	430a      	orrs	r2, r1
 800258c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	2102      	movs	r1, #2
 8002596:	f000 f887 	bl	80026a8 <I2S_WaitFlagStateUntilTimeout>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d04d      	beq.n	800263a <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	2201      	movs	r2, #1
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2235      	movs	r2, #53	; 0x35
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2234      	movs	r2, #52	; 0x34
 80025b6:	2100      	movs	r1, #0
 80025b8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e070      	b.n	80026a0 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	1c9a      	adds	r2, r3, #2
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	2102      	movs	r1, #2
 80025ea:	f000 f85d 	bl	80026a8 <I2S_WaitFlagStateUntilTimeout>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d00f      	beq.n	8002612 <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	2201      	movs	r2, #1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2235      	movs	r2, #53	; 0x35
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2234      	movs	r2, #52	; 0x34
 800260a:	2100      	movs	r1, #0
 800260c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e046      	b.n	80026a0 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2208      	movs	r2, #8
 800261a:	4013      	ands	r3, r2
 800261c:	2b08      	cmp	r3, #8
 800261e:	d10c      	bne.n	800263a <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	2204      	movs	r2, #4
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1bc      	bne.n	80025be <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	23c0      	movs	r3, #192	; 0xc0
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4013      	ands	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	23c0      	movs	r3, #192	; 0xc0
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	401a      	ands	r2, r3
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	429a      	cmp	r2, r3
 800265c:	d117      	bne.n	800268e <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	f000 f81f 	bl	80026a8 <I2S_WaitFlagStateUntilTimeout>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d00f      	beq.n	800268e <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	2201      	movs	r2, #1
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2235      	movs	r2, #53	; 0x35
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2234      	movs	r2, #52	; 0x34
 8002686:	2100      	movs	r1, #0
 8002688:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e008      	b.n	80026a0 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2235      	movs	r2, #53	; 0x35
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2234      	movs	r2, #52	; 0x34
 800269a:	2100      	movs	r1, #0
 800269c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b006      	add	sp, #24
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b8:	f7fe ff20 	bl	80014fc <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80026c0:	e017      	b.n	80026f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	d014      	beq.n	80026f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80026c8:	f7fe ff18 	bl	80014fc <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d902      	bls.n	80026de <I2S_WaitFlagStateUntilTimeout+0x36>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2235      	movs	r2, #53	; 0x35
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2234      	movs	r2, #52	; 0x34
 80026ea:	2100      	movs	r1, #0
 80026ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e00f      	b.n	8002712 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	425a      	negs	r2, r3
 8002702:	4153      	adcs	r3, r2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	001a      	movs	r2, r3
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d1d8      	bne.n	80026c2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b006      	add	sp, #24
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d11f      	bne.n	8002780 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	0013      	movs	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	189b      	adds	r3, r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4912      	ldr	r1, [pc, #72]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800274e:	0018      	movs	r0, r3
 8002750:	f7fd fcd8 	bl	8000104 <__udivsi3>
 8002754:	0003      	movs	r3, r0
 8002756:	3301      	adds	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800275a:	e008      	b.n	800276e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3b01      	subs	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e001      	b.n	800276e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e009      	b.n	8002782 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	401a      	ands	r2, r3
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	429a      	cmp	r2, r3
 800277e:	d0ed      	beq.n	800275c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b004      	add	sp, #16
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	40007000 	.word	0x40007000
 8002790:	fffff9ff 	.word	0xfffff9ff
 8002794:	20000000 	.word	0x20000000
 8002798:	000f4240 	.word	0x000f4240

0800279c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	23e0      	movs	r3, #224	; 0xe0
 80027a6:	01db      	lsls	r3, r3, #7
 80027a8:	4013      	ands	r3, r2
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f000 fb50 	bl	8002e68 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	d100      	bne.n	80027d4 <HAL_RCC_OscConfig+0x20>
 80027d2:	e07c      	b.n	80028ce <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d4:	4bc3      	ldr	r3, [pc, #780]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2238      	movs	r2, #56	; 0x38
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027de:	4bc1      	ldr	r3, [pc, #772]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2203      	movs	r2, #3
 80027e4:	4013      	ands	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d102      	bne.n	80027f4 <HAL_RCC_OscConfig+0x40>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d002      	beq.n	80027fa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d10b      	bne.n	8002812 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fa:	4bba      	ldr	r3, [pc, #744]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	029b      	lsls	r3, r3, #10
 8002802:	4013      	ands	r3, r2
 8002804:	d062      	beq.n	80028cc <HAL_RCC_OscConfig+0x118>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d15e      	bne.n	80028cc <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e32a      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	025b      	lsls	r3, r3, #9
 800281a:	429a      	cmp	r2, r3
 800281c:	d107      	bne.n	800282e <HAL_RCC_OscConfig+0x7a>
 800281e:	4bb1      	ldr	r3, [pc, #708]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4bb0      	ldr	r3, [pc, #704]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0249      	lsls	r1, r1, #9
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e020      	b.n	8002870 <HAL_RCC_OscConfig+0xbc>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	23a0      	movs	r3, #160	; 0xa0
 8002834:	02db      	lsls	r3, r3, #11
 8002836:	429a      	cmp	r2, r3
 8002838:	d10e      	bne.n	8002858 <HAL_RCC_OscConfig+0xa4>
 800283a:	4baa      	ldr	r3, [pc, #680]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4ba9      	ldr	r3, [pc, #676]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	02c9      	lsls	r1, r1, #11
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	4ba6      	ldr	r3, [pc, #664]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4ba5      	ldr	r3, [pc, #660]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	0249      	lsls	r1, r1, #9
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xbc>
 8002858:	4ba2      	ldr	r3, [pc, #648]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4ba1      	ldr	r3, [pc, #644]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800285e:	49a2      	ldr	r1, [pc, #648]	; (8002ae8 <HAL_RCC_OscConfig+0x334>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b9f      	ldr	r3, [pc, #636]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b9e      	ldr	r3, [pc, #632]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800286a:	49a0      	ldr	r1, [pc, #640]	; (8002aec <HAL_RCC_OscConfig+0x338>)
 800286c:	400a      	ands	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fe40 	bl	80014fc <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe fe3b 	bl	80014fc <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e2e9      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002894:	4b93      	ldr	r3, [pc, #588]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0xce>
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fe2b 	bl	80014fc <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe fe26 	bl	80014fc <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e2d4      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	4b89      	ldr	r3, [pc, #548]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0xf8>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_RCC_OscConfig+0x126>
 80028d8:	e099      	b.n	8002a0e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028da:	4b82      	ldr	r3, [pc, #520]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2238      	movs	r2, #56	; 0x38
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e4:	4b7f      	ldr	r3, [pc, #508]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2203      	movs	r2, #3
 80028ea:	4013      	ands	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_OscConfig+0x146>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d002      	beq.n	8002900 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d135      	bne.n	800296c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002900:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4013      	ands	r3, r2
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x164>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e2a7      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a74      	ldr	r2, [pc, #464]	; (8002af0 <HAL_RCC_OscConfig+0x33c>)
 800291e:	4013      	ands	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	021a      	lsls	r2, r3, #8
 8002928:	4b6e      	ldr	r3, [pc, #440]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d112      	bne.n	800295a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002934:	4b6b      	ldr	r3, [pc, #428]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6e      	ldr	r2, [pc, #440]	; (8002af4 <HAL_RCC_OscConfig+0x340>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002948:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0adb      	lsrs	r3, r3, #11
 800294e:	2207      	movs	r2, #7
 8002950:	4013      	ands	r3, r2
 8002952:	4a69      	ldr	r2, [pc, #420]	; (8002af8 <HAL_RCC_OscConfig+0x344>)
 8002954:	40da      	lsrs	r2, r3
 8002956:	4b69      	ldr	r3, [pc, #420]	; (8002afc <HAL_RCC_OscConfig+0x348>)
 8002958:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800295a:	4b69      	ldr	r3, [pc, #420]	; (8002b00 <HAL_RCC_OscConfig+0x34c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0018      	movs	r0, r3
 8002960:	f7fe fd70 	bl	8001444 <HAL_InitTick>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d051      	beq.n	8002a0c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e27d      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d030      	beq.n	80029d6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002974:	4b5b      	ldr	r3, [pc, #364]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5e      	ldr	r2, [pc, #376]	; (8002af4 <HAL_RCC_OscConfig+0x340>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002988:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 800298e:	2180      	movs	r1, #128	; 0x80
 8002990:	0049      	lsls	r1, r1, #1
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fdb1 	bl	80014fc <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe fdac 	bl	80014fc <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e25a      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b2:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4013      	ands	r3, r2
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a4b      	ldr	r2, [pc, #300]	; (8002af0 <HAL_RCC_OscConfig+0x33c>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	e01b      	b.n	8002a0e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 80029dc:	4949      	ldr	r1, [pc, #292]	; (8002b04 <HAL_RCC_OscConfig+0x350>)
 80029de:	400a      	ands	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fd8b 	bl	80014fc <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe fd86 	bl	80014fc <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e234      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4013      	ands	r3, r2
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x238>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	4013      	ands	r3, r2
 8002a16:	d047      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a18:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2238      	movs	r2, #56	; 0x38
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b18      	cmp	r3, #24
 8002a22:	d10a      	bne.n	8002a3a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a24:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	2202      	movs	r2, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d03c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d138      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e216      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d019      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a42:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fd55 	bl	80014fc <HAL_GetTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fd50 	bl	80014fc <HAL_GetTick>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1fe      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d0f1      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2a4>
 8002a74:	e018      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	438a      	bics	r2, r1
 8002a80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fd3b 	bl	80014fc <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fd36 	bl	80014fc <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1e4      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d1f1      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2204      	movs	r2, #4
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d100      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x300>
 8002ab2:	e0c7      	b.n	8002c44 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab4:	231f      	movs	r3, #31
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2238      	movs	r2, #56	; 0x38
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d11f      	bne.n	8002b08 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x330>)
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d100      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x320>
 8002ad2:	e0b7      	b.n	8002c44 <HAL_RCC_OscConfig+0x490>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d000      	beq.n	8002ade <HAL_RCC_OscConfig+0x32a>
 8002adc:	e0b2      	b.n	8002c44 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1c2      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	fffeffff 	.word	0xfffeffff
 8002aec:	fffbffff 	.word	0xfffbffff
 8002af0:	ffff80ff 	.word	0xffff80ff
 8002af4:	ffffc7ff 	.word	0xffffc7ff
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004
 8002b04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b08:	4bb5      	ldr	r3, [pc, #724]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	055b      	lsls	r3, r3, #21
 8002b10:	4013      	ands	r3, r2
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_OscConfig+0x364>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x366>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d011      	beq.n	8002b42 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	4bb0      	ldr	r3, [pc, #704]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b22:	4baf      	ldr	r3, [pc, #700]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0549      	lsls	r1, r1, #21
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b2c:	4bac      	ldr	r3, [pc, #688]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	055b      	lsls	r3, r3, #21
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b3a:	231f      	movs	r3, #31
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	4ba8      	ldr	r3, [pc, #672]	; (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4e:	4ba5      	ldr	r3, [pc, #660]	; (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4ba4      	ldr	r3, [pc, #656]	; (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	0049      	lsls	r1, r1, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fcce 	bl	80014fc <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7fe fcc9 	bl	80014fc <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e177      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b78:	4b9a      	ldr	r3, [pc, #616]	; (8002de4 <HAL_RCC_OscConfig+0x630>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3e6>
 8002b8c:	4b94      	ldr	r3, [pc, #592]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b90:	4b93      	ldr	r3, [pc, #588]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002b92:	2101      	movs	r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b98:	e01c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x420>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x408>
 8002ba2:	4b8f      	ldr	r3, [pc, #572]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ba4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ba6:	4b8e      	ldr	r3, [pc, #568]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ba8:	2104      	movs	r1, #4
 8002baa:	430a      	orrs	r2, r1
 8002bac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bae:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bb2:	4b8b      	ldr	r3, [pc, #556]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x420>
 8002bbc:	4b88      	ldr	r3, [pc, #544]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bc0:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bc8:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bcc:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bce:	2104      	movs	r1, #4
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d014      	beq.n	8002c06 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fc8e 	bl	80014fc <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be4:	e009      	b.n	8002bfa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fc89 	bl	80014fc <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	4a7d      	ldr	r2, [pc, #500]	; (8002de8 <HAL_RCC_OscConfig+0x634>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e136      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2202      	movs	r2, #2
 8002c00:	4013      	ands	r3, r2
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x432>
 8002c04:	e013      	b.n	8002c2e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fc79 	bl	80014fc <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fc74 	bl	80014fc <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	4a73      	ldr	r2, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x634>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e121      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c24:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c2e:	231f      	movs	r3, #31
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4b69      	ldr	r3, [pc, #420]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c3e:	496b      	ldr	r1, [pc, #428]	; (8002dec <HAL_RCC_OscConfig+0x638>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d039      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01b      	beq.n	8002c8e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c56:	4b62      	ldr	r3, [pc, #392]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	03c9      	lsls	r1, r1, #15
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fc4a 	bl	80014fc <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c6e:	f7fe fc45 	bl	80014fc <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0f3      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c80:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4ba>
 8002c8c:	e019      	b.n	8002cc2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c8e:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002c94:	4956      	ldr	r1, [pc, #344]	; (8002df0 <HAL_RCC_OscConfig+0x63c>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fc2f 	bl	80014fc <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca4:	f7fe fc2a 	bl	80014fc <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0d8      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d100      	bne.n	8002ccc <HAL_RCC_OscConfig+0x518>
 8002cca:	e0cc      	b.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ccc:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2238      	movs	r2, #56	; 0x38
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x526>
 8002cd8:	e07b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d156      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002ce8:	4942      	ldr	r1, [pc, #264]	; (8002df4 <HAL_RCC_OscConfig+0x640>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fc05 	bl	80014fc <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fc00 	bl	80014fc <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0ae      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0a:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	049b      	lsls	r3, r3, #18
 8002d12:	4013      	ands	r3, r2
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d16:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a37      	ldr	r2, [pc, #220]	; (8002df8 <HAL_RCC_OscConfig+0x644>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	431a      	orrs	r2, r3
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4a:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d50:	2180      	movs	r1, #128	; 0x80
 8002d52:	0449      	lsls	r1, r1, #17
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d5e:	2180      	movs	r1, #128	; 0x80
 8002d60:	0549      	lsls	r1, r1, #21
 8002d62:	430a      	orrs	r2, r1
 8002d64:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fbc9 	bl	80014fc <HAL_GetTick>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fbc4 	bl	80014fc <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e072      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	049b      	lsls	r3, r3, #18
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x5bc>
 8002d8e:	e06a      	b.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002d96:	4917      	ldr	r1, [pc, #92]	; (8002df4 <HAL_RCC_OscConfig+0x640>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7fe fbae 	bl	80014fc <HAL_GetTick>
 8002da0:	0003      	movs	r3, r0
 8002da2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fba9 	bl	80014fc <HAL_GetTick>
 8002daa:	0002      	movs	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e057      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	049b      	lsls	r3, r3, #18
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_OscConfig+0x62c>)
 8002dca:	490c      	ldr	r1, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x648>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	e049      	b.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e044      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	00001388 	.word	0x00001388
 8002dec:	efffffff 	.word	0xefffffff
 8002df0:	ffbfffff 	.word	0xffbfffff
 8002df4:	feffffff 	.word	0xfeffffff
 8002df8:	11c1808c 	.word	0x11c1808c
 8002dfc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x6bc>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d126      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2270      	movs	r2, #112	; 0x70
 8002e18:	401a      	ands	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d11f      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	23fe      	movs	r3, #254	; 0xfe
 8002e26:	01db      	lsls	r3, r3, #7
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d116      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	23f8      	movs	r3, #248	; 0xf8
 8002e38:	039b      	lsls	r3, r3, #14
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10e      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	23e0      	movs	r3, #224	; 0xe0
 8002e48:	051b      	lsls	r3, r3, #20
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	0f5b      	lsrs	r3, r3, #29
 8002e58:	075a      	lsls	r2, r3, #29
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b008      	add	sp, #32
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0e9      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	4013      	ands	r3, r2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d91e      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b73      	ldr	r3, [pc, #460]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	4b70      	ldr	r3, [pc, #448]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe fb28 	bl	80014fc <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb0:	e009      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb2:	f7fe fb23 	bl	80014fc <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <HAL_RCC_ClockConfig+0x1f4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0ca      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ec6:	4b67      	ldr	r3, [pc, #412]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2207      	movs	r2, #7
 8002ecc:	4013      	ands	r3, r2
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d015      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d006      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ee8:	4b60      	ldr	r3, [pc, #384]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002eee:	21e0      	movs	r1, #224	; 0xe0
 8002ef0:	01c9      	lsls	r1, r1, #7
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4a5d      	ldr	r2, [pc, #372]	; (8003070 <HAL_RCC_ClockConfig+0x1fc>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	d057      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1c:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	4013      	ands	r3, r2
 8002f26:	d12b      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e097      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f34:	4b4d      	ldr	r3, [pc, #308]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	049b      	lsls	r3, r3, #18
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d11f      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e08b      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4013      	ands	r3, r2
 8002f56:	d113      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e07f      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d108      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e074      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f72:	4b3e      	ldr	r3, [pc, #248]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e06d      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2207      	movs	r2, #7
 8002f86:	4393      	bics	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fe fab2 	bl	80014fc <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9c:	e009      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9e:	f7fe faad 	bl	80014fc <HAL_GetTick>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	; (8003068 <HAL_RCC_ClockConfig+0x1f4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e054      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2238      	movs	r2, #56	; 0x38
 8002fb8:	401a      	ands	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1ec      	bne.n	8002f9e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2207      	movs	r2, #7
 8002fca:	4013      	ands	r3, r2
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d21e      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2207      	movs	r2, #7
 8002fd8:	4393      	bics	r3, r2
 8002fda:	0019      	movs	r1, r3
 8002fdc:	4b21      	ldr	r3, [pc, #132]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa8a 	bl	80014fc <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fec:	e009      	b.n	8003002 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fee:	f7fe fa85 	bl	80014fc <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_RCC_ClockConfig+0x1f4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e02c      	b.n	800305c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2207      	movs	r2, #7
 8003008:	4013      	ands	r3, r2
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d1ee      	bne.n	8002fee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2204      	movs	r2, #4
 8003016:	4013      	ands	r3, r2
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_RCC_ClockConfig+0x200>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800302e:	f000 f829 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003032:	0001      	movs	r1, r0
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_ClockConfig+0x1f8>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	220f      	movs	r2, #15
 800303c:	401a      	ands	r2, r3
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_RCC_ClockConfig+0x204>)
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	58d3      	ldr	r3, [r2, r3]
 8003044:	221f      	movs	r2, #31
 8003046:	4013      	ands	r3, r2
 8003048:	000a      	movs	r2, r1
 800304a:	40da      	lsrs	r2, r3
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_ClockConfig+0x208>)
 800304e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_ClockConfig+0x20c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0018      	movs	r0, r3
 8003056:	f7fe f9f5 	bl	8001444 <HAL_InitTick>
 800305a:	0003      	movs	r3, r0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000
 8003068:	00001388 	.word	0x00001388
 800306c:	40021000 	.word	0x40021000
 8003070:	fffff0ff 	.word	0xfffff0ff
 8003074:	ffff8fff 	.word	0xffff8fff
 8003078:	080177e0 	.word	0x080177e0
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2238      	movs	r2, #56	; 0x38
 8003090:	4013      	ands	r3, r2
 8003092:	d10f      	bne.n	80030b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0adb      	lsrs	r3, r3, #11
 800309a:	2207      	movs	r2, #7
 800309c:	4013      	ands	r3, r2
 800309e:	2201      	movs	r2, #1
 80030a0:	409a      	lsls	r2, r3
 80030a2:	0013      	movs	r3, r2
 80030a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	4835      	ldr	r0, [pc, #212]	; (8003180 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030aa:	f7fd f82b 	bl	8000104 <__udivsi3>
 80030ae:	0003      	movs	r3, r0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e05d      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b4:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2238      	movs	r2, #56	; 0x38
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCC_GetSysClockFreq+0x100>)
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e054      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c6:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2238      	movs	r2, #56	; 0x38
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d138      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2203      	movs	r2, #3
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	2207      	movs	r2, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	3301      	adds	r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d10d      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4824      	ldr	r0, [pc, #144]	; (8003184 <HAL_RCC_GetSysClockFreq+0x100>)
 80030f4:	f7fd f806 	bl	8000104 <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	0019      	movs	r1, r3
 80030fc:	4b1f      	ldr	r3, [pc, #124]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	227f      	movs	r2, #127	; 0x7f
 8003104:	4013      	ands	r3, r2
 8003106:	434b      	muls	r3, r1
 8003108:	617b      	str	r3, [r7, #20]
        break;
 800310a:	e00d      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	481c      	ldr	r0, [pc, #112]	; (8003180 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003110:	f7fc fff8 	bl	8000104 <__udivsi3>
 8003114:	0003      	movs	r3, r0
 8003116:	0019      	movs	r1, r3
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	227f      	movs	r2, #127	; 0x7f
 8003120:	4013      	ands	r3, r2
 8003122:	434b      	muls	r3, r1
 8003124:	617b      	str	r3, [r7, #20]
        break;
 8003126:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0f5b      	lsrs	r3, r3, #29
 800312e:	2207      	movs	r2, #7
 8003130:	4013      	ands	r3, r2
 8003132:	3301      	adds	r3, #1
 8003134:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	6978      	ldr	r0, [r7, #20]
 800313a:	f7fc ffe3 	bl	8000104 <__udivsi3>
 800313e:	0003      	movs	r3, r0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e015      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003144:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2238      	movs	r2, #56	; 0x38
 800314a:	4013      	ands	r3, r2
 800314c:	2b20      	cmp	r3, #32
 800314e:	d103      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	e00b      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <HAL_RCC_GetSysClockFreq+0xf8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2238      	movs	r2, #56	; 0x38
 800315e:	4013      	ands	r3, r2
 8003160:	2b18      	cmp	r3, #24
 8003162:	d103      	bne.n	800316c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003164:	23fa      	movs	r3, #250	; 0xfa
 8003166:	01db      	lsls	r3, r3, #7
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e001      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003170:	693b      	ldr	r3, [r7, #16]
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b006      	add	sp, #24
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	00f42400 	.word	0x00f42400
 8003184:	007a1200 	.word	0x007a1200

08003188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b02      	ldr	r3, [pc, #8]	; (8003198 <HAL_RCC_GetHCLKFreq+0x10>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	20000000 	.word	0x20000000

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031a0:	f7ff fff2 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a4:	0004      	movs	r4, r0
 80031a6:	f7ff faf9 	bl	800279c <LL_RCC_GetAPB1Prescaler>
 80031aa:	0003      	movs	r3, r0
 80031ac:	0b1a      	lsrs	r2, r3, #12
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	58d3      	ldr	r3, [r2, r3]
 80031b4:	221f      	movs	r2, #31
 80031b6:	4013      	ands	r3, r2
 80031b8:	40dc      	lsrs	r4, r3
 80031ba:	0023      	movs	r3, r4
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bdb0      	pop	{r4, r5, r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	08017820 	.word	0x08017820

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031d0:	2313      	movs	r3, #19
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d8:	2312      	movs	r3, #18
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	4013      	ands	r3, r2
 80031ea:	d100      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031ec:	e0ad      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ee:	2011      	movs	r0, #17
 80031f0:	183b      	adds	r3, r7, r0
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	055b      	lsls	r3, r3, #21
 80031fe:	4013      	ands	r3, r2
 8003200:	d110      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	4b44      	ldr	r3, [pc, #272]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	0549      	lsls	r1, r1, #21
 800320c:	430a      	orrs	r2, r1
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003210:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	055b      	lsls	r3, r3, #21
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	183b      	adds	r3, r7, r0
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003224:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	0049      	lsls	r1, r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003232:	f7fe f963 	bl	80014fc <HAL_GetTick>
 8003236:	0003      	movs	r3, r0
 8003238:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800323a:	e00b      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fe f95e 	bl	80014fc <HAL_GetTick>
 8003240:	0002      	movs	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d904      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800324a:	2313      	movs	r3, #19
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2203      	movs	r2, #3
 8003250:	701a      	strb	r2, [r3, #0]
        break;
 8003252:	e005      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d0ed      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003260:	2313      	movs	r3, #19
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d15e      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800326c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800326e:	23c0      	movs	r3, #192	; 0xc0
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4013      	ands	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d019      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	429a      	cmp	r2, r3
 8003284:	d014      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	4a24      	ldr	r2, [pc, #144]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800328c:	4013      	ands	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0249      	lsls	r1, r1, #9
 800329a:	430a      	orrs	r2, r1
 800329c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032a4:	491e      	ldr	r1, [pc, #120]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80032a6:	400a      	ands	r2, r1
 80032a8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2201      	movs	r2, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	d016      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe f920 	bl	80014fc <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c0:	e00c      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fe f91b 	bl	80014fc <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d904      	bls.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80032d2:	2313      	movs	r3, #19
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	2203      	movs	r2, #3
 80032d8:	701a      	strb	r2, [r3, #0]
            break;
 80032da:	e004      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2202      	movs	r2, #2
 80032e2:	4013      	ands	r3, r2
 80032e4:	d0ed      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80032e6:	2313      	movs	r3, #19
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003300:	430a      	orrs	r2, r1
 8003302:	65da      	str	r2, [r3, #92]	; 0x5c
 8003304:	e016      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003306:	2312      	movs	r3, #18
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	2213      	movs	r2, #19
 800330c:	18ba      	adds	r2, r7, r2
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e00f      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
 800331c:	fffffcff 	.word	0xfffffcff
 8003320:	fffeffff 	.word	0xfffeffff
 8003324:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	2312      	movs	r3, #18
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2213      	movs	r2, #19
 800332e:	18ba      	adds	r2, r7, r2
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003334:	2311      	movs	r3, #17
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333e:	4bb6      	ldr	r3, [pc, #728]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003342:	4bb5      	ldr	r3, [pc, #724]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003344:	49b5      	ldr	r1, [pc, #724]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003346:	400a      	ands	r2, r1
 8003348:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2201      	movs	r2, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003354:	4bb0      	ldr	r3, [pc, #704]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	2203      	movs	r2, #3
 800335a:	4393      	bics	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4bad      	ldr	r3, [pc, #692]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003364:	430a      	orrs	r2, r1
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2202      	movs	r2, #2
 800336e:	4013      	ands	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003372:	4ba9      	ldr	r3, [pc, #676]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	220c      	movs	r2, #12
 8003378:	4393      	bics	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4ba5      	ldr	r3, [pc, #660]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003382:	430a      	orrs	r2, r1
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2204      	movs	r2, #4
 800338c:	4013      	ands	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003390:	4ba1      	ldr	r3, [pc, #644]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	2230      	movs	r2, #48	; 0x30
 8003396:	4393      	bics	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b9e      	ldr	r3, [pc, #632]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2210      	movs	r2, #16
 80033aa:	4013      	ands	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ae:	4b9a      	ldr	r3, [pc, #616]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	4a9b      	ldr	r2, [pc, #620]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	4b96      	ldr	r3, [pc, #600]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033be:	430a      	orrs	r2, r1
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	015b      	lsls	r3, r3, #5
 80033ca:	4013      	ands	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80033ce:	4b92      	ldr	r3, [pc, #584]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	4a94      	ldr	r2, [pc, #592]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	4b8e      	ldr	r3, [pc, #568]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4013      	ands	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ee:	4b8a      	ldr	r3, [pc, #552]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	4a8d      	ldr	r2, [pc, #564]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033fc:	4b86      	ldr	r3, [pc, #536]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033fe:	430a      	orrs	r2, r1
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4013      	ands	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800340e:	4b82      	ldr	r3, [pc, #520]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	4a86      	ldr	r2, [pc, #536]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	4b7e      	ldr	r3, [pc, #504]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800341e:	430a      	orrs	r2, r1
 8003420:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2220      	movs	r2, #32
 8003428:	4013      	ands	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800342c:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	4a7f      	ldr	r2, [pc, #508]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003432:	4013      	ands	r3, r2
 8003434:	0019      	movs	r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	4b77      	ldr	r3, [pc, #476]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800343c:	430a      	orrs	r2, r1
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	4013      	ands	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800344a:	4b73      	ldr	r3, [pc, #460]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	4a79      	ldr	r2, [pc, #484]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003450:	4013      	ands	r3, r2
 8003452:	0019      	movs	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800345a:	430a      	orrs	r2, r1
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	01db      	lsls	r3, r3, #7
 8003466:	4013      	ands	r3, r2
 8003468:	d015      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800346a:	4b6b      	ldr	r3, [pc, #428]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	0899      	lsrs	r1, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003476:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003478:	430a      	orrs	r2, r1
 800347a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	05db      	lsls	r3, r3, #23
 8003484:	429a      	cmp	r2, r3
 8003486:	d106      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003488:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4b62      	ldr	r3, [pc, #392]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	0249      	lsls	r1, r1, #9
 8003492:	430a      	orrs	r2, r1
 8003494:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	4013      	ands	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034a2:	4b5d      	ldr	r3, [pc, #372]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	2240      	movs	r2, #64	; 0x40
 80034a8:	4393      	bics	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034b2:	430a      	orrs	r2, r1
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	039b      	lsls	r3, r3, #14
 80034be:	4013      	ands	r3, r2
 80034c0:	d016      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80034c2:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	4a5c      	ldr	r2, [pc, #368]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d0:	4b51      	ldr	r3, [pc, #324]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034d2:	430a      	orrs	r2, r1
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	03db      	lsls	r3, r3, #15
 80034de:	429a      	cmp	r2, r3
 80034e0:	d106      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	0449      	lsls	r1, r1, #17
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	03db      	lsls	r3, r3, #15
 80034f8:	4013      	ands	r3, r2
 80034fa:	d016      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80034fc:	4b46      	ldr	r3, [pc, #280]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	4a4e      	ldr	r2, [pc, #312]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003502:	4013      	ands	r3, r2
 8003504:	0019      	movs	r1, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800350a:	4b43      	ldr	r3, [pc, #268]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800350c:	430a      	orrs	r2, r1
 800350e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	045b      	lsls	r3, r3, #17
 8003518:	429a      	cmp	r2, r3
 800351a:	d106      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800351c:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	0449      	lsls	r1, r1, #17
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4013      	ands	r3, r2
 8003534:	d014      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003536:	4b38      	ldr	r3, [pc, #224]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	2203      	movs	r2, #3
 800353c:	4393      	bics	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003546:	430a      	orrs	r2, r1
 8003548:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d106      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003552:	4b31      	ldr	r3, [pc, #196]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	4b30      	ldr	r3, [pc, #192]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0249      	lsls	r1, r1, #9
 800355c:	430a      	orrs	r2, r1
 800355e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	019b      	lsls	r3, r3, #6
 8003568:	4013      	ands	r3, r2
 800356a:	d014      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	220c      	movs	r2, #12
 8003572:	4393      	bics	r3, r2
 8003574:	0019      	movs	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800357c:	430a      	orrs	r2, r1
 800357e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	2b04      	cmp	r3, #4
 8003586:	d106      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003588:	4b23      	ldr	r3, [pc, #140]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800358e:	2180      	movs	r1, #128	; 0x80
 8003590:	0249      	lsls	r1, r1, #9
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	045b      	lsls	r3, r3, #17
 800359e:	4013      	ands	r3, r2
 80035a0:	d016      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	4a22      	ldr	r2, [pc, #136]	; (8003630 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	429a      	cmp	r2, r3
 80035c0:	d106      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	0449      	lsls	r1, r1, #17
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	049b      	lsls	r3, r3, #18
 80035d8:	4013      	ands	r3, r2
 80035da:	d016      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ec:	430a      	orrs	r2, r1
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d106      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	0449      	lsls	r1, r1, #17
 8003606:	430a      	orrs	r2, r1
 8003608:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800360a:	2312      	movs	r3, #18
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	781b      	ldrb	r3, [r3, #0]
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b006      	add	sp, #24
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	efffffff 	.word	0xefffffff
 8003620:	fffff3ff 	.word	0xfffff3ff
 8003624:	fffffcff 	.word	0xfffffcff
 8003628:	fff3ffff 	.word	0xfff3ffff
 800362c:	ffcfffff 	.word	0xffcfffff
 8003630:	ffffcfff 	.word	0xffffcfff
 8003634:	ffff3fff 	.word	0xffff3fff
 8003638:	ffbfffff 	.word	0xffbfffff
 800363c:	feffffff 	.word	0xfeffffff

08003640 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	429a      	cmp	r2, r3
 8003654:	d13b      	bne.n	80036ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003656:	4be2      	ldr	r3, [pc, #904]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003658:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800365a:	23c0      	movs	r3, #192	; 0xc0
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003662:	4bdf      	ldr	r3, [pc, #892]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	2202      	movs	r2, #2
 8003668:	4013      	ands	r3, r2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d109      	bne.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	429a      	cmp	r2, r3
 8003676:	d104      	bne.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	f000 fcfc 	bl	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003682:	4bd7      	ldr	r3, [pc, #860]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	2202      	movs	r2, #2
 8003688:	4013      	ands	r3, r2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d109      	bne.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d104      	bne.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
    {
      frequency = LSI_VALUE;
 8003698:	23fa      	movs	r3, #250	; 0xfa
 800369a:	01db      	lsls	r3, r3, #7
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	f000 fcec 	bl	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80036a2:	4bcf      	ldr	r3, [pc, #828]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	029b      	lsls	r3, r3, #10
 80036aa:	401a      	ands	r2, r3
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	029b      	lsls	r3, r3, #10
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80036b4:	f000 fce1 	bl	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	23c0      	movs	r3, #192	; 0xc0
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 80036c2:	f000 fcda 	bl	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
    {
      frequency = HSE_VALUE / 32U;
 80036c6:	4bc7      	ldr	r3, [pc, #796]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>)
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	f000 fcd6 	bl	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80036ce:	4bc4      	ldr	r3, [pc, #784]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2203      	movs	r2, #3
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d102      	bne.n	80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    {
      pllvco = HSI_VALUE;
 80036da:	4bc3      	ldr	r3, [pc, #780]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e00a      	b.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80036e0:	4bbf      	ldr	r3, [pc, #764]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2203      	movs	r2, #3
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d102      	bne.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
      pllvco = HSE_VALUE;
 80036ec:	4bbf      	ldr	r3, [pc, #764]	; (80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>)
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	e001      	b.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
    }
    else /* No source */
    {
      pllvco = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80036f6:	4bba      	ldr	r3, [pc, #744]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	2207      	movs	r2, #7
 80036fe:	4013      	ands	r3, r2
 8003700:	3301      	adds	r3, #1
 8003702:	0019      	movs	r1, r3
 8003704:	6938      	ldr	r0, [r7, #16]
 8003706:	f7fc fcfd 	bl	8000104 <__udivsi3>
 800370a:	0003      	movs	r3, r0
 800370c:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	049b      	lsls	r3, r3, #18
 8003714:	429a      	cmp	r2, r3
 8003716:	d101      	bne.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003718:	f000 fc43 	bl	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	049b      	lsls	r3, r3, #18
 8003722:	429a      	cmp	r2, r3
 8003724:	d901      	bls.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8003726:	f000 fc7c 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	045b      	lsls	r3, r3, #17
 8003730:	429a      	cmp	r2, r3
 8003732:	d101      	bne.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8003734:	f000 fbe0 	bl	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	045b      	lsls	r3, r3, #17
 800373e:	429a      	cmp	r2, r3
 8003740:	d901      	bls.n	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 8003742:	f000 fc6e 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	03db      	lsls	r3, r3, #15
 800374c:	429a      	cmp	r2, r3
 800374e:	d101      	bne.n	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8003750:	f000 fba1 	bl	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	03db      	lsls	r3, r3, #15
 800375a:	429a      	cmp	r2, r3
 800375c:	d901      	bls.n	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800375e:	f000 fc60 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	039b      	lsls	r3, r3, #14
 8003768:	429a      	cmp	r2, r3
 800376a:	d101      	bne.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800376c:	f000 fb62 	bl	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	039b      	lsls	r3, r3, #14
 8003776:	429a      	cmp	r2, r3
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800377a:	f000 fc52 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	031b      	lsls	r3, r3, #12
 8003784:	429a      	cmp	r2, r3
 8003786:	d100      	bne.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003788:	e115      	b.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	031b      	lsls	r3, r3, #12
 8003790:	429a      	cmp	r2, r3
 8003792:	d901      	bls.n	8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003794:	f000 fc45 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	01db      	lsls	r3, r3, #7
 800379e:	429a      	cmp	r2, r3
 80037a0:	d100      	bne.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
 80037a2:	e1ac      	b.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	01db      	lsls	r3, r3, #7
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80037ae:	f000 fc38 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	019b      	lsls	r3, r3, #6
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d100      	bne.n	80037be <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80037bc:	e270      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	019b      	lsls	r3, r3, #6
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80037c8:	f000 fc2b 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d100      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80037d6:	e158      	b.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	015b      	lsls	r3, r3, #5
 80037de:	429a      	cmp	r2, r3
 80037e0:	d901      	bls.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80037e2:	f000 fc1e 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d100      	bne.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 80037f0:	e213      	b.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d901      	bls.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 80037fc:	f000 fc11 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	429a      	cmp	r2, r3
 8003808:	d100      	bne.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
 800380a:	e2d3      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	429a      	cmp	r2, r3
 8003814:	d901      	bls.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 8003816:	f000 fc04 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d100      	bne.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8003824:	e286      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d901      	bls.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003830:	f000 fbf7 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b20      	cmp	r3, #32
 8003838:	d80f      	bhi.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8003840:	f000 fbef 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b20      	cmp	r3, #32
 8003848:	d901      	bls.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800384a:	f000 fbea 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>)
 8003854:	18d3      	adds	r3, r2, r3
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	469f      	mov	pc, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d100      	bne.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8003860:	e1b0      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8003862:	f000 fbde 	bl	8004022 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003866:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	2203      	movs	r2, #3
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003876:	f7ff fc91 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 800387a:	0003      	movs	r3, r0
 800387c:	617b      	str	r3, [r7, #20]
        break;
 800387e:	f000 fbd2 	bl	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = HAL_RCC_GetSysClockFreq();
 8003888:	f7ff fbfc 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 800388c:	0003      	movs	r3, r0
 800388e:	617b      	str	r3, [r7, #20]
        break;
 8003890:	f000 fbc9 	bl	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003894:	4b52      	ldr	r3, [pc, #328]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	401a      	ands	r2, r3
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d106      	bne.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d103      	bne.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          frequency = HSI_VALUE;
 80038ac:	4b4e      	ldr	r3, [pc, #312]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 80038ae:	617b      	str	r3, [r7, #20]
        break;
 80038b0:	f000 fbb9 	bl	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80038b4:	4b4a      	ldr	r3, [pc, #296]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2202      	movs	r2, #2
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d001      	beq.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
 80038c0:	f000 fbb1 	bl	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d001      	beq.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80038ca:	f000 fbac 	bl	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
          frequency = LSE_VALUE;
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	617b      	str	r3, [r7, #20]
        break;
 80038d4:	f000 fba7 	bl	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80038d8:	4b41      	ldr	r3, [pc, #260]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	220c      	movs	r2, #12
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80038e8:	f7ff fc58 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80038ec:	0003      	movs	r3, r0
 80038ee:	617b      	str	r3, [r7, #20]
        break;
 80038f0:	f000 fb9b 	bl	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d105      	bne.n	8003906 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
          frequency = HAL_RCC_GetSysClockFreq();
 80038fa:	f7ff fbc3 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 80038fe:	0003      	movs	r3, r0
 8003900:	617b      	str	r3, [r7, #20]
        break;
 8003902:	f000 fb92 	bl	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	401a      	ands	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	429a      	cmp	r2, r3
 8003916:	d106      	bne.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d103      	bne.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          frequency = HSI_VALUE;
 800391e:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 8003920:	617b      	str	r3, [r7, #20]
        break;
 8003922:	f000 fb82 	bl	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003926:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	2202      	movs	r2, #2
 800392c:	4013      	ands	r3, r2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d001      	beq.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8003932:	f000 fb7a 	bl	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800393c:	f000 fb75 	bl	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
          frequency = LSE_VALUE;
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	617b      	str	r3, [r7, #20]
        break;
 8003946:	f000 fb70 	bl	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800394a:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	2230      	movs	r2, #48	; 0x30
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
          frequency = HAL_RCC_GetPCLK1Freq();
 800395a:	f7ff fc1f 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 800395e:	0003      	movs	r3, r0
 8003960:	617b      	str	r3, [r7, #20]
        break;
 8003962:	f000 fb64 	bl	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b10      	cmp	r3, #16
 800396a:	d105      	bne.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
          frequency = HAL_RCC_GetSysClockFreq();
 800396c:	f7ff fb8a 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003970:	0003      	movs	r3, r0
 8003972:	617b      	str	r3, [r7, #20]
        break;
 8003974:	f000 fb5b 	bl	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	401a      	ands	r2, r3
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	429a      	cmp	r2, r3
 8003988:	d106      	bne.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b20      	cmp	r3, #32
 800398e:	d103      	bne.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          frequency = HSI_VALUE;
 8003990:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>)
 8003992:	617b      	str	r3, [r7, #20]
        break;
 8003994:	f000 fb4b 	bl	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	2202      	movs	r2, #2
 800399e:	4013      	ands	r3, r2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d000      	beq.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80039a4:	e343      	b.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d000      	beq.n	80039ae <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 80039ac:	e33f      	b.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
          frequency = LSE_VALUE;
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	617b      	str	r3, [r7, #20]
        break;
 80039b4:	e33b      	b.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	401a      	ands	r2, r3
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d112      	bne.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10f      	bne.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          frequency = (HSI_VALUE / 488U);
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>)
 80039da:	617b      	str	r3, [r7, #20]
        break;
 80039dc:	e329      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	40021000 	.word	0x40021000
 80039e4:	0003d090 	.word	0x0003d090
 80039e8:	00f42400 	.word	0x00f42400
 80039ec:	007a1200 	.word	0x007a1200
 80039f0:	08017840 	.word	0x08017840
 80039f4:	00008012 	.word	0x00008012
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80039f8:	4bcb      	ldr	r3, [pc, #812]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	2202      	movs	r2, #2
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d000      	beq.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8003a04:	e315      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d000      	beq.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8003a0c:	e311      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = LSE_VALUE;
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	617b      	str	r3, [r7, #20]
        break;
 8003a14:	e30d      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003a16:	4bc4      	ldr	r3, [pc, #784]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a1a:	23c0      	movs	r3, #192	; 0xc0
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a28:	f7ff fbb8 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	617b      	str	r3, [r7, #20]
        break;
 8003a30:	e301      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d104      	bne.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a3c:	f7ff fb22 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003a40:	0003      	movs	r3, r0
 8003a42:	617b      	str	r3, [r7, #20]
        break;
 8003a44:	e2f7      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003a46:	4bb8      	ldr	r3, [pc, #736]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	401a      	ands	r2, r3
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d107      	bne.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d102      	bne.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
          frequency = HSI_VALUE;
 8003a62:	4bb2      	ldr	r3, [pc, #712]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003a64:	617b      	str	r3, [r7, #20]
        break;
 8003a66:	e2e6      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003a68:	4baf      	ldr	r3, [pc, #700]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d000      	beq.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8003a74:	e2df      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	23c0      	movs	r3, #192	; 0xc0
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d000      	beq.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8003a80:	e2d9      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = LSE_VALUE;
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	617b      	str	r3, [r7, #20]
        break;
 8003a88:	e2d5      	b.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8003a8a:	4ba7      	ldr	r3, [pc, #668]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a8e:	23c0      	movs	r3, #192	; 0xc0
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4013      	ands	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART2CLKSOURCE_PCLK1)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a9c:	f7ff fb7e 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	617b      	str	r3, [r7, #20]
        break;
 8003aa4:	e2c9      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if (srcclk == RCC_LPUART2CLKSOURCE_SYSCLK)
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d104      	bne.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ab0:	f7ff fae8 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	617b      	str	r3, [r7, #20]
        break;
 8003ab8:	e2bf      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART2CLKSOURCE_HSI))
 8003aba:	4b9b      	ldr	r3, [pc, #620]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d107      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d102      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x49c>
          frequency = HSI_VALUE;
 8003ad6:	4b95      	ldr	r3, [pc, #596]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003ad8:	617b      	str	r3, [r7, #20]
        break;
 8003ada:	e2ae      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART2CLKSOURCE_LSE))
 8003adc:	4b92      	ldr	r3, [pc, #584]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d000      	beq.n	8003aea <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8003ae8:	e2a7      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	23c0      	movs	r3, #192	; 0xc0
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d000      	beq.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8003af4:	e2a1      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          frequency = LSE_VALUE;
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	617b      	str	r3, [r7, #20]
        break;
 8003afc:	e29d      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003afe:	4b8a      	ldr	r3, [pc, #552]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	0f9b      	lsrs	r3, r3, #30
 8003b04:	079b      	lsls	r3, r3, #30
 8003b06:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b0e:	f7ff fab9 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003b12:	0003      	movs	r3, r0
 8003b14:	617b      	str	r3, [r7, #20]
        break;
 8003b16:	e292      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d102      	bne.n	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HSI_VALUE;
 8003b22:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003b24:	617b      	str	r3, [r7, #20]
        break;
 8003b26:	e28a      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d000      	beq.n	8003b34 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8003b32:	e284      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8003b34:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	025b      	lsls	r3, r3, #9
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8003b40:	e27d      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b42:	4b79      	ldr	r3, [pc, #484]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	227f      	movs	r2, #127	; 0x7f
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	435a      	muls	r2, r3
 8003b54:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	0c5b      	lsrs	r3, r3, #17
 8003b5a:	211f      	movs	r1, #31
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	3301      	adds	r3, #1
 8003b60:	0019      	movs	r1, r3
 8003b62:	0010      	movs	r0, r2
 8003b64:	f7fc face 	bl	8000104 <__udivsi3>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	617b      	str	r3, [r7, #20]
        break;
 8003b6c:	e267      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003b6e:	4b6e      	ldr	r3, [pc, #440]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b72:	23c0      	movs	r3, #192	; 0xc0
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	4013      	ands	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7ff fb0c 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003b84:	0003      	movs	r3, r0
 8003b86:	617b      	str	r3, [r7, #20]
        break;
 8003b88:	e25b      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	015b      	lsls	r3, r3, #5
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d104      	bne.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b94:	f7ff fa76 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	617b      	str	r3, [r7, #20]
        break;
 8003b9c:	e251      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003b9e:	4b62      	ldr	r3, [pc, #392]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d000      	beq.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 8003bb0:	e247      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	019b      	lsls	r3, r3, #6
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d000      	beq.n	8003bbe <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003bbc:	e241      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = HSI_VALUE;
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003bc0:	617b      	str	r3, [r7, #20]
        break;
 8003bc2:	e23e      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003bc4:	4b58      	ldr	r3, [pc, #352]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003bc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc8:	23c0      	movs	r3, #192	; 0xc0
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003bd6:	f7ff fae1 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	617b      	str	r3, [r7, #20]
        break;
 8003bde:	e232      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	01db      	lsls	r3, r3, #7
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d104      	bne.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = HAL_RCC_GetSysClockFreq();
 8003bea:	f7ff fa4b 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	617b      	str	r3, [r7, #20]
        break;
 8003bf2:	e228      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d000      	beq.n	8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
 8003c06:	e21e      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	021b      	lsls	r3, r3, #8
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d000      	beq.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8003c12:	e218      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
          frequency = HSI_VALUE;
 8003c14:	4b45      	ldr	r3, [pc, #276]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003c16:	617b      	str	r3, [r7, #20]
        break;
 8003c18:	e215      	b.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0xa06>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8003c1a:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	2203      	movs	r2, #3
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	025b      	lsls	r3, r3, #9
 8003c32:	4013      	ands	r3, r2
 8003c34:	d100      	bne.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8003c36:	e208      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c38:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	227f      	movs	r2, #127	; 0x7f
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	435a      	muls	r2, r3
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	0c5b      	lsrs	r3, r3, #17
 8003c50:	211f      	movs	r1, #31
 8003c52:	400b      	ands	r3, r1
 8003c54:	3301      	adds	r3, #1
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f7fc fa53 	bl	8000104 <__udivsi3>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	617b      	str	r3, [r7, #20]
        break;
 8003c62:	e1f2      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c6a:	f7ff fa0b 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	617b      	str	r3, [r7, #20]
        break;
 8003c72:	e1ea      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d105      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          frequency = HSI_VALUE;
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003c8e:	617b      	str	r3, [r7, #20]
        break;
 8003c90:	e1db      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d000      	beq.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003c98:	e1d7      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8003c9a:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8003c9c:	617b      	str	r3, [r7, #20]
        break;
 8003c9e:	e1d4      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
        srcclk = __HAL_RCC_GET_I2S2_SOURCE();
 8003ca0:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	220c      	movs	r2, #12
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S2CLKSOURCE_PLL)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d11c      	bne.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	025b      	lsls	r3, r3, #9
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d100      	bne.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8003cbc:	e1c7      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	227f      	movs	r2, #127	; 0x7f
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	435a      	muls	r2, r3
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	0c5b      	lsrs	r3, r3, #17
 8003cd6:	211f      	movs	r1, #31
 8003cd8:	400b      	ands	r3, r1
 8003cda:	3301      	adds	r3, #1
 8003cdc:	0019      	movs	r1, r3
 8003cde:	0010      	movs	r0, r2
 8003ce0:	f7fc fa10 	bl	8000104 <__udivsi3>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	617b      	str	r3, [r7, #20]
        break;
 8003ce8:	e1b1      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if (srcclk == RCC_I2S2CLKSOURCE_SYSCLK)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d104      	bne.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
          frequency = HAL_RCC_GetSysClockFreq();
 8003cf0:	f7ff f9c8 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	617b      	str	r3, [r7, #20]
        break;
 8003cf8:	e1a9      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S2CLKSOURCE_HSI))
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	401a      	ands	r2, r3
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d102      	bne.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = HSI_VALUE;
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>)
 8003d14:	617b      	str	r3, [r7, #20]
        break;
 8003d16:	e19a      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        else if (srcclk == RCC_I2S2CLKSOURCE_EXT)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d000      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8003d1e:	e196      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
          frequency = EXTERNAL_I2S2_CLOCK_VALUE;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>)
 8003d22:	617b      	str	r3, [r7, #20]
        break;
 8003d24:	e193      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	0000bb80 	.word	0x0000bb80
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003d34:	4bcc      	ldr	r3, [pc, #816]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003d36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d38:	23c0      	movs	r3, #192	; 0xc0
 8003d3a:	031b      	lsls	r3, r3, #12
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d46:	f7ff fa29 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	617b      	str	r3, [r7, #20]
        break;
 8003d4e:	e180      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8003d50:	4bc5      	ldr	r3, [pc, #788]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	2202      	movs	r2, #2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d108      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	02db      	lsls	r3, r3, #11
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d103      	bne.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          frequency = LSI_VALUE;
 8003d66:	23fa      	movs	r3, #250	; 0xfa
 8003d68:	01db      	lsls	r3, r3, #7
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e021      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8003d6e:	4bbe      	ldr	r3, [pc, #760]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	401a      	ands	r2, r3
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	031b      	lsls	r3, r3, #12
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d102      	bne.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
          frequency = HSI_VALUE;
 8003d8a:	4bb8      	ldr	r3, [pc, #736]	; (800406c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>)
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e010      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8003d90:	4bb5      	ldr	r3, [pc, #724]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2202      	movs	r2, #2
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d000      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8003d9c:	e159      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	23c0      	movs	r3, #192	; 0xc0
 8003da2:	031b      	lsls	r3, r3, #12
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d000      	beq.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003da8:	e153      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = LSE_VALUE;
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	617b      	str	r3, [r7, #20]
        break;
 8003db0:	e14f      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8003db2:	e14e      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003db4:	4bac      	ldr	r3, [pc, #688]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003db6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003db8:	23c0      	movs	r3, #192	; 0xc0
 8003dba:	039b      	lsls	r3, r3, #14
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d104      	bne.n	8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dc6:	f7ff f9e9 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	617b      	str	r3, [r7, #20]
        break;
 8003dce:	e142      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8003dd0:	4ba5      	ldr	r3, [pc, #660]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d108      	bne.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	035b      	lsls	r3, r3, #13
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d103      	bne.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
          frequency = LSI_VALUE;
 8003de6:	23fa      	movs	r3, #250	; 0xfa
 8003de8:	01db      	lsls	r3, r3, #7
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e021      	b.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8003dee:	4b9e      	ldr	r3, [pc, #632]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	401a      	ands	r2, r3
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	039b      	lsls	r3, r3, #14
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d102      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          frequency = HSI_VALUE;
 8003e0a:	4b98      	ldr	r3, [pc, #608]	; (800406c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>)
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	e010      	b.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8003e10:	4b95      	ldr	r3, [pc, #596]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	2202      	movs	r2, #2
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d000      	beq.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8003e1c:	e11b      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	23c0      	movs	r3, #192	; 0xc0
 8003e22:	039b      	lsls	r3, r3, #14
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d000      	beq.n	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8003e28:	e115      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
          frequency = LSE_VALUE;
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	617b      	str	r3, [r7, #20]
        break;
 8003e30:	e111      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003e32:	e110      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8003e34:	4b8c      	ldr	r3, [pc, #560]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003e36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	03db      	lsls	r3, r3, #15
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	03db      	lsls	r3, r3, #15
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003e4a:	4b87      	ldr	r3, [pc, #540]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	045b      	lsls	r3, r3, #17
 8003e52:	4013      	ands	r3, r2
 8003e54:	d100      	bne.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8003e56:	e100      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e58:	4b83      	ldr	r3, [pc, #524]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	227f      	movs	r2, #127	; 0x7f
 8003e60:	4013      	ands	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	435a      	muls	r2, r3
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	0e5b      	lsrs	r3, r3, #25
 8003e70:	2107      	movs	r1, #7
 8003e72:	400b      	ands	r3, r1
 8003e74:	3301      	adds	r3, #1
 8003e76:	0019      	movs	r1, r3
 8003e78:	0010      	movs	r0, r2
 8003e7a:	f7fc f943 	bl	8000104 <__udivsi3>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	617b      	str	r3, [r7, #20]
        break;
 8003e82:	e0ea      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d000      	beq.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8003e8a:	e0e6      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f7ff f986 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003e90:	0003      	movs	r3, r0
 8003e92:	617b      	str	r3, [r7, #20]
        break;
 8003e94:	e0e1      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8003e96:	4b74      	ldr	r3, [pc, #464]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	045b      	lsls	r3, r3, #17
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	045b      	lsls	r3, r3, #17
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d11c      	bne.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003eac:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	045b      	lsls	r3, r3, #17
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d100      	bne.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8003eb8:	e0d1      	b.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003eba:	4b6b      	ldr	r3, [pc, #428]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	227f      	movs	r2, #127	; 0x7f
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	435a      	muls	r2, r3
 8003ecc:	4b66      	ldr	r3, [pc, #408]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0e5b      	lsrs	r3, r3, #25
 8003ed2:	2107      	movs	r1, #7
 8003ed4:	400b      	ands	r3, r1
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	0019      	movs	r1, r3
 8003eda:	0010      	movs	r0, r2
 8003edc:	f7fc f912 	bl	8000104 <__udivsi3>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	617b      	str	r3, [r7, #20]
        break;
 8003ee4:	e0bb      	b.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d000      	beq.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8003eec:	e0b7      	b.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7ff f955 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	617b      	str	r3, [r7, #20]
        break;
 8003ef6:	e0b2      	b.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        srcclk = READ_BIT(RCC->CCIPR2, RCC_CCIPR2_USBSEL);
 8003ef8:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003efa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003efc:	23c0      	movs	r3, #192	; 0xc0
 8003efe:	019b      	lsls	r3, r3, #6
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USBCLKSOURCE_PLL) /* PLL ? */
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d11c      	bne.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x908>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003f0e:	4b56      	ldr	r3, [pc, #344]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	045b      	lsls	r3, r3, #17
 8003f16:	4013      	ands	r3, r2
 8003f18:	d100      	bne.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
 8003f1a:	e0a2      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f1c:	4b52      	ldr	r3, [pc, #328]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	227f      	movs	r2, #127	; 0x7f
 8003f24:	4013      	ands	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	435a      	muls	r2, r3
 8003f2e:	4b4e      	ldr	r3, [pc, #312]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	0e5b      	lsrs	r3, r3, #25
 8003f34:	2107      	movs	r1, #7
 8003f36:	400b      	ands	r3, r1
 8003f38:	3301      	adds	r3, #1
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	0010      	movs	r0, r2
 8003f3e:	f7fc f8e1 	bl	8000104 <__udivsi3>
 8003f42:	0003      	movs	r3, r0
 8003f44:	617b      	str	r3, [r7, #20]
        break;
 8003f46:	e08c      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        else if (srcclk == RCC_USBCLKSOURCE_HSI48) /* HSI48 ? */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d110      	bne.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	401a      	ands	r2, r3
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	041b      	lsls	r3, r3, #16
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d000      	beq.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
 8003f60:	e07f      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d000      	beq.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
 8003f68:	e07b      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            frequency = HSI48_VALUE;
 8003f6a:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>)
 8003f6c:	617b      	str	r3, [r7, #20]
        break;
 8003f6e:	e078      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        else if (srcclk == RCC_USBCLKSOURCE_HSE)
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	015b      	lsls	r3, r3, #5
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d000      	beq.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
 8003f7a:	e072      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBCLKSOURCE_HSE))
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	029b      	lsls	r3, r3, #10
 8003f84:	401a      	ands	r2, r3
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d000      	beq.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8003f8e:	e068      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	015b      	lsls	r3, r3, #5
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d000      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8003f9a:	e062      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            frequency = HSE_VALUE;
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 8003f9e:	617b      	str	r3, [r7, #20]
        break;
 8003fa0:	e05f      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        srcclk = READ_BIT(RCC->CCIPR2, RCC_CCIPR2_FDCANSEL);
 8003fa2:	4b31      	ldr	r3, [pc, #196]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003fa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fa6:	23c0      	movs	r3, #192	; 0xc0
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4013      	ands	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_FDCANCLKSOURCE_PLL) /* PLL ? */
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	045b      	lsls	r3, r3, #17
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d059      	beq.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003fc4:	4b28      	ldr	r3, [pc, #160]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	227f      	movs	r2, #127	; 0x7f
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	435a      	muls	r2, r3
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	0e5b      	lsrs	r3, r3, #25
 8003fdc:	2107      	movs	r1, #7
 8003fde:	400b      	ands	r3, r1
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	0010      	movs	r0, r2
 8003fe6:	f7fc f88d 	bl	8000104 <__udivsi3>
 8003fea:	0003      	movs	r3, r0
 8003fec:	617b      	str	r3, [r7, #20]
        break;
 8003fee:	e043      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        else if (srcclk == RCC_FDCANCLKSOURCE_PCLK1) /* PCLK1 ? */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_RCCEx_GetPeriphCLKFreq+0x9c0>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ff6:	f7ff f8d1 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	617b      	str	r3, [r7, #20]
        break;
 8003ffe:	e03b      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	401a      	ands	r2, r3
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	429a      	cmp	r2, r3
 8004010:	d132      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d12d      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
          frequency = HSE_VALUE;
 800401c:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>)
 800401e:	617b      	str	r3, [r7, #20]
        break;
 8004020:	e02a      	b.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
        break;
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	e029      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	e027      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	e025      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	e023      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	e021      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	e01f      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	e01d      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	e01b      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	e019      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	e017      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	e015      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	e013      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	e011      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	e00f      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	e00d      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	e00b      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        break;
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	e009      	b.n	800407a <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	40021000 	.word	0x40021000
 800406c:	00f42400 	.word	0x00f42400
 8004070:	02dc6c00 	.word	0x02dc6c00
 8004074:	007a1200 	.word	0x007a1200
        break;
 8004078:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800407a:	697b      	ldr	r3, [r7, #20]
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b006      	add	sp, #24
 8004082:	bd80      	pop	{r7, pc}

08004084 <__libc_init_array>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	2600      	movs	r6, #0
 8004088:	4d0c      	ldr	r5, [pc, #48]	; (80040bc <__libc_init_array+0x38>)
 800408a:	4c0d      	ldr	r4, [pc, #52]	; (80040c0 <__libc_init_array+0x3c>)
 800408c:	1b64      	subs	r4, r4, r5
 800408e:	10a4      	asrs	r4, r4, #2
 8004090:	42a6      	cmp	r6, r4
 8004092:	d109      	bne.n	80040a8 <__libc_init_array+0x24>
 8004094:	2600      	movs	r6, #0
 8004096:	f000 f821 	bl	80040dc <_init>
 800409a:	4d0a      	ldr	r5, [pc, #40]	; (80040c4 <__libc_init_array+0x40>)
 800409c:	4c0a      	ldr	r4, [pc, #40]	; (80040c8 <__libc_init_array+0x44>)
 800409e:	1b64      	subs	r4, r4, r5
 80040a0:	10a4      	asrs	r4, r4, #2
 80040a2:	42a6      	cmp	r6, r4
 80040a4:	d105      	bne.n	80040b2 <__libc_init_array+0x2e>
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	00b3      	lsls	r3, r6, #2
 80040aa:	58eb      	ldr	r3, [r5, r3]
 80040ac:	4798      	blx	r3
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7ee      	b.n	8004090 <__libc_init_array+0xc>
 80040b2:	00b3      	lsls	r3, r6, #2
 80040b4:	58eb      	ldr	r3, [r5, r3]
 80040b6:	4798      	blx	r3
 80040b8:	3601      	adds	r6, #1
 80040ba:	e7f2      	b.n	80040a2 <__libc_init_array+0x1e>
 80040bc:	080178c4 	.word	0x080178c4
 80040c0:	080178c4 	.word	0x080178c4
 80040c4:	080178c4 	.word	0x080178c4
 80040c8:	080178c8 	.word	0x080178c8

080040cc <memset>:
 80040cc:	0003      	movs	r3, r0
 80040ce:	1882      	adds	r2, r0, r2
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	7019      	strb	r1, [r3, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <_init>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e2:	bc08      	pop	{r3}
 80040e4:	469e      	mov	lr, r3
 80040e6:	4770      	bx	lr

080040e8 <_fini>:
 80040e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ee:	bc08      	pop	{r3}
 80040f0:	469e      	mov	lr, r3
 80040f2:	4770      	bx	lr
